// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/takuyakawta/spot-teacher-sample/spot-teacher/internal/school/domain (interfaces: SchoolRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/takuyakawta/spot-teacher-sample/spot-teacher/internal/school/domain"
)

// MockSchoolRepository is a mock of SchoolRepository interface.
type MockSchoolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSchoolRepositoryMockRecorder
}

// MockSchoolRepositoryMockRecorder is the mock recorder for MockSchoolRepository.
type MockSchoolRepositoryMockRecorder struct {
	mock *MockSchoolRepository
}

// NewMockSchoolRepository creates a new mock instance.
func NewMockSchoolRepository(ctrl *gomock.Controller) *MockSchoolRepository {
	mock := &MockSchoolRepository{ctrl: ctrl}
	mock.recorder = &MockSchoolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchoolRepository) EXPECT() *MockSchoolRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSchoolRepository) Create(arg0 context.Context, arg1 *domain.School) (*domain.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSchoolRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSchoolRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSchoolRepository) Delete(arg0 context.Context, arg1 domain.SchoolID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSchoolRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSchoolRepository)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockSchoolRepository) FindAll(arg0 context.Context) ([]*domain.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]*domain.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSchoolRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSchoolRepository)(nil).FindAll), arg0)
}

// FindByID mocks base method.
func (m *MockSchoolRepository) FindByID(arg0 context.Context, arg1 domain.SchoolID) (*domain.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSchoolRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSchoolRepository)(nil).FindByID), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockSchoolRepository) FindByName(arg0 context.Context, arg1 domain.SchoolName) (*domain.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(*domain.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockSchoolRepositoryMockRecorder) FindByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockSchoolRepository)(nil).FindByName), arg0, arg1)
}

// Update mocks base method.
func (m *MockSchoolRepository) Update(arg0 context.Context, arg1 *domain.School) (*domain.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*domain.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSchoolRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSchoolRepository)(nil).Update), arg0, arg1)
}
