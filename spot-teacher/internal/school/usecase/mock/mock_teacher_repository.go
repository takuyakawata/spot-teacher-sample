// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/takuyakawta/spot-teacher-sample/spot-teacher/internal/user/domain (interfaces: TeacherRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/takuyakawta/spot-teacher-sample/spot-teacher/internal/school/domain"
	domain0 "github.com/takuyakawta/spot-teacher-sample/spot-teacher/internal/shared/domain"
	domain1 "github.com/takuyakawta/spot-teacher-sample/spot-teacher/internal/user/domain"
)

// MockTeacherRepository is a mock of TeacherRepository interface.
type MockTeacherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeacherRepositoryMockRecorder
}

// MockTeacherRepositoryMockRecorder is the mock recorder for MockTeacherRepository.
type MockTeacherRepositoryMockRecorder struct {
	mock *MockTeacherRepository
}

// NewMockTeacherRepository creates a new mock instance.
func NewMockTeacherRepository(ctrl *gomock.Controller) *MockTeacherRepository {
	mock := &MockTeacherRepository{ctrl: ctrl}
	mock.recorder = &MockTeacherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeacherRepository) EXPECT() *MockTeacherRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTeacherRepository) Create(arg0 context.Context, arg1 *domain1.Teacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTeacherRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTeacherRepository)(nil).Create), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockTeacherRepository) FindByEmail(arg0 context.Context, arg1 domain0.EmailAddress) (*domain1.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0, arg1)
	ret0, _ := ret[0].(*domain1.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockTeacherRepositoryMockRecorder) FindByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockTeacherRepository)(nil).FindByEmail), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockTeacherRepository) FindByID(arg0 context.Context, arg1 domain1.TeacherID) (*domain1.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*domain1.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTeacherRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTeacherRepository)(nil).FindByID), arg0, arg1)
}

// FindBySchoolID mocks base method.
func (m *MockTeacherRepository) FindBySchoolID(arg0 context.Context, arg1 domain.SchoolID) ([]*domain1.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySchoolID", arg0, arg1)
	ret0, _ := ret[0].([]*domain1.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySchoolID indicates an expected call of FindBySchoolID.
func (mr *MockTeacherRepositoryMockRecorder) FindBySchoolID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySchoolID", reflect.TypeOf((*MockTeacherRepository)(nil).FindBySchoolID), arg0, arg1)
}
