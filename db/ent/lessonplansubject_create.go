// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplansubject"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/subject"
)

// LessonPlanSubjectCreate is the builder for creating a LessonPlanSubject entity.
type LessonPlanSubjectCreate struct {
	config
	mutation *LessonPlanSubjectMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lpsc *LessonPlanSubjectCreate) SetCreatedAt(t time.Time) *LessonPlanSubjectCreate {
	lpsc.mutation.SetCreatedAt(t)
	return lpsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpsc *LessonPlanSubjectCreate) SetNillableCreatedAt(t *time.Time) *LessonPlanSubjectCreate {
	if t != nil {
		lpsc.SetCreatedAt(*t)
	}
	return lpsc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpsc *LessonPlanSubjectCreate) SetUpdatedAt(t time.Time) *LessonPlanSubjectCreate {
	lpsc.mutation.SetUpdatedAt(t)
	return lpsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpsc *LessonPlanSubjectCreate) SetNillableUpdatedAt(t *time.Time) *LessonPlanSubjectCreate {
	if t != nil {
		lpsc.SetUpdatedAt(*t)
	}
	return lpsc
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpsc *LessonPlanSubjectCreate) SetLessonPlanID(i int64) *LessonPlanSubjectCreate {
	lpsc.mutation.SetLessonPlanID(i)
	return lpsc
}

// SetSubjectID sets the "subject_id" field.
func (lpsc *LessonPlanSubjectCreate) SetSubjectID(i int64) *LessonPlanSubjectCreate {
	lpsc.mutation.SetSubjectID(i)
	return lpsc
}

// SetID sets the "id" field.
func (lpsc *LessonPlanSubjectCreate) SetID(i int64) *LessonPlanSubjectCreate {
	lpsc.mutation.SetID(i)
	return lpsc
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpsc *LessonPlanSubjectCreate) SetLessonPlan(l *LessonPlan) *LessonPlanSubjectCreate {
	return lpsc.SetLessonPlanID(l.ID)
}

// SetSubject sets the "subject" edge to the Subject entity.
func (lpsc *LessonPlanSubjectCreate) SetSubject(s *Subject) *LessonPlanSubjectCreate {
	return lpsc.SetSubjectID(s.ID)
}

// Mutation returns the LessonPlanSubjectMutation object of the builder.
func (lpsc *LessonPlanSubjectCreate) Mutation() *LessonPlanSubjectMutation {
	return lpsc.mutation
}

// Save creates the LessonPlanSubject in the database.
func (lpsc *LessonPlanSubjectCreate) Save(ctx context.Context) (*LessonPlanSubject, error) {
	lpsc.defaults()
	return withHooks(ctx, lpsc.sqlSave, lpsc.mutation, lpsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpsc *LessonPlanSubjectCreate) SaveX(ctx context.Context) *LessonPlanSubject {
	v, err := lpsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpsc *LessonPlanSubjectCreate) Exec(ctx context.Context) error {
	_, err := lpsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsc *LessonPlanSubjectCreate) ExecX(ctx context.Context) {
	if err := lpsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpsc *LessonPlanSubjectCreate) defaults() {
	if _, ok := lpsc.mutation.CreatedAt(); !ok {
		v := lessonplansubject.DefaultCreatedAt()
		lpsc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpsc.mutation.UpdatedAt(); !ok {
		v := lessonplansubject.DefaultUpdatedAt()
		lpsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpsc *LessonPlanSubjectCreate) check() error {
	if _, ok := lpsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonPlanSubject.created_at"`)}
	}
	if _, ok := lpsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonPlanSubject.updated_at"`)}
	}
	if _, ok := lpsc.mutation.LessonPlanID(); !ok {
		return &ValidationError{Name: "lesson_plan_id", err: errors.New(`ent: missing required field "LessonPlanSubject.lesson_plan_id"`)}
	}
	if _, ok := lpsc.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`ent: missing required field "LessonPlanSubject.subject_id"`)}
	}
	if v, ok := lpsc.mutation.ID(); ok {
		if err := lessonplansubject.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LessonPlanSubject.id": %w`, err)}
		}
	}
	if len(lpsc.mutation.LessonPlanIDs()) == 0 {
		return &ValidationError{Name: "lesson_plan", err: errors.New(`ent: missing required edge "LessonPlanSubject.lesson_plan"`)}
	}
	if len(lpsc.mutation.SubjectIDs()) == 0 {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required edge "LessonPlanSubject.subject"`)}
	}
	return nil
}

func (lpsc *LessonPlanSubjectCreate) sqlSave(ctx context.Context) (*LessonPlanSubject, error) {
	if err := lpsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lpsc.mutation.id = &_node.ID
	lpsc.mutation.done = true
	return _node, nil
}

func (lpsc *LessonPlanSubjectCreate) createSpec() (*LessonPlanSubject, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonPlanSubject{config: lpsc.config}
		_spec = sqlgraph.NewCreateSpec(lessonplansubject.Table, sqlgraph.NewFieldSpec(lessonplansubject.FieldID, field.TypeInt64))
	)
	if id, ok := lpsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lpsc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonplansubject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpsc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplansubject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lpsc.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.LessonPlanTable,
			Columns: []string{lessonplansubject.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonPlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpsc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.SubjectTable,
			Columns: []string{lessonplansubject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonPlanSubjectCreateBulk is the builder for creating many LessonPlanSubject entities in bulk.
type LessonPlanSubjectCreateBulk struct {
	config
	err      error
	builders []*LessonPlanSubjectCreate
}

// Save creates the LessonPlanSubject entities in the database.
func (lpscb *LessonPlanSubjectCreateBulk) Save(ctx context.Context) ([]*LessonPlanSubject, error) {
	if lpscb.err != nil {
		return nil, lpscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpscb.builders))
	nodes := make([]*LessonPlanSubject, len(lpscb.builders))
	mutators := make([]Mutator, len(lpscb.builders))
	for i := range lpscb.builders {
		func(i int, root context.Context) {
			builder := lpscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonPlanSubjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpscb *LessonPlanSubjectCreateBulk) SaveX(ctx context.Context) []*LessonPlanSubject {
	v, err := lpscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpscb *LessonPlanSubjectCreateBulk) Exec(ctx context.Context) error {
	_, err := lpscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpscb *LessonPlanSubjectCreateBulk) ExecX(ctx context.Context) {
	if err := lpscb.Exec(ctx); err != nil {
		panic(err)
	}
}
