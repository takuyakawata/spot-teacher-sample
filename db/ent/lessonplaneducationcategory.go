// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplaneducationcategory"
)

// LessonPlanEducationCategory is the model entity for the LessonPlanEducationCategory schema.
type LessonPlanEducationCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LessonPlanID holds the value of the "lesson_plan_id" field.
	LessonPlanID int64 `json:"lesson_plan_id,omitempty"`
	// EducationCategoryID holds the value of the "education_category_id" field.
	EducationCategoryID int64 `json:"education_category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonPlanEducationCategoryQuery when eager-loading is set.
	Edges        LessonPlanEducationCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonPlanEducationCategoryEdges holds the relations/edges for other nodes in the graph.
type LessonPlanEducationCategoryEdges struct {
	// LessonPlan holds the value of the lesson_plan edge.
	LessonPlan *LessonPlan `json:"lesson_plan,omitempty"`
	// EducationCategory holds the value of the education_category edge.
	EducationCategory *EducationCategory `json:"education_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LessonPlanOrErr returns the LessonPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonPlanEducationCategoryEdges) LessonPlanOrErr() (*LessonPlan, error) {
	if e.LessonPlan != nil {
		return e.LessonPlan, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonplan.Label}
	}
	return nil, &NotLoadedError{edge: "lesson_plan"}
}

// EducationCategoryOrErr returns the EducationCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonPlanEducationCategoryEdges) EducationCategoryOrErr() (*EducationCategory, error) {
	if e.EducationCategory != nil {
		return e.EducationCategory, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: educationcategory.Label}
	}
	return nil, &NotLoadedError{edge: "education_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonPlanEducationCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonplaneducationcategory.FieldID, lessonplaneducationcategory.FieldLessonPlanID, lessonplaneducationcategory.FieldEducationCategoryID:
			values[i] = new(sql.NullInt64)
		case lessonplaneducationcategory.FieldCreatedAt, lessonplaneducationcategory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonPlanEducationCategory fields.
func (lpec *LessonPlanEducationCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonplaneducationcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lpec.ID = int64(value.Int64)
		case lessonplaneducationcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lpec.CreatedAt = value.Time
			}
		case lessonplaneducationcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lpec.UpdatedAt = value.Time
			}
		case lessonplaneducationcategory.FieldLessonPlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_plan_id", values[i])
			} else if value.Valid {
				lpec.LessonPlanID = value.Int64
			}
		case lessonplaneducationcategory.FieldEducationCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field education_category_id", values[i])
			} else if value.Valid {
				lpec.EducationCategoryID = value.Int64
			}
		default:
			lpec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonPlanEducationCategory.
// This includes values selected through modifiers, order, etc.
func (lpec *LessonPlanEducationCategory) Value(name string) (ent.Value, error) {
	return lpec.selectValues.Get(name)
}

// QueryLessonPlan queries the "lesson_plan" edge of the LessonPlanEducationCategory entity.
func (lpec *LessonPlanEducationCategory) QueryLessonPlan() *LessonPlanQuery {
	return NewLessonPlanEducationCategoryClient(lpec.config).QueryLessonPlan(lpec)
}

// QueryEducationCategory queries the "education_category" edge of the LessonPlanEducationCategory entity.
func (lpec *LessonPlanEducationCategory) QueryEducationCategory() *EducationCategoryQuery {
	return NewLessonPlanEducationCategoryClient(lpec.config).QueryEducationCategory(lpec)
}

// Update returns a builder for updating this LessonPlanEducationCategory.
// Note that you need to call LessonPlanEducationCategory.Unwrap() before calling this method if this LessonPlanEducationCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (lpec *LessonPlanEducationCategory) Update() *LessonPlanEducationCategoryUpdateOne {
	return NewLessonPlanEducationCategoryClient(lpec.config).UpdateOne(lpec)
}

// Unwrap unwraps the LessonPlanEducationCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lpec *LessonPlanEducationCategory) Unwrap() *LessonPlanEducationCategory {
	_tx, ok := lpec.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonPlanEducationCategory is not a transactional entity")
	}
	lpec.config.driver = _tx.drv
	return lpec
}

// String implements the fmt.Stringer.
func (lpec *LessonPlanEducationCategory) String() string {
	var builder strings.Builder
	builder.WriteString("LessonPlanEducationCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lpec.ID))
	builder.WriteString("created_at=")
	builder.WriteString(lpec.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lpec.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lesson_plan_id=")
	builder.WriteString(fmt.Sprintf("%v", lpec.LessonPlanID))
	builder.WriteString(", ")
	builder.WriteString("education_category_id=")
	builder.WriteString(fmt.Sprintf("%v", lpec.EducationCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// LessonPlanEducationCategories is a parsable slice of LessonPlanEducationCategory.
type LessonPlanEducationCategories []*LessonPlanEducationCategory
