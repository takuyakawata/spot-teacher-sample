// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplansubject"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/subject"
)

// LessonPlanSubjectUpdate is the builder for updating LessonPlanSubject entities.
type LessonPlanSubjectUpdate struct {
	config
	hooks    []Hook
	mutation *LessonPlanSubjectMutation
}

// Where appends a list predicates to the LessonPlanSubjectUpdate builder.
func (lpsu *LessonPlanSubjectUpdate) Where(ps ...predicate.LessonPlanSubject) *LessonPlanSubjectUpdate {
	lpsu.mutation.Where(ps...)
	return lpsu
}

// SetUpdatedAt sets the "updated_at" field.
func (lpsu *LessonPlanSubjectUpdate) SetUpdatedAt(t time.Time) *LessonPlanSubjectUpdate {
	lpsu.mutation.SetUpdatedAt(t)
	return lpsu
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpsu *LessonPlanSubjectUpdate) SetLessonPlanID(i int64) *LessonPlanSubjectUpdate {
	lpsu.mutation.SetLessonPlanID(i)
	return lpsu
}

// SetNillableLessonPlanID sets the "lesson_plan_id" field if the given value is not nil.
func (lpsu *LessonPlanSubjectUpdate) SetNillableLessonPlanID(i *int64) *LessonPlanSubjectUpdate {
	if i != nil {
		lpsu.SetLessonPlanID(*i)
	}
	return lpsu
}

// SetSubjectID sets the "subject_id" field.
func (lpsu *LessonPlanSubjectUpdate) SetSubjectID(i int64) *LessonPlanSubjectUpdate {
	lpsu.mutation.SetSubjectID(i)
	return lpsu
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (lpsu *LessonPlanSubjectUpdate) SetNillableSubjectID(i *int64) *LessonPlanSubjectUpdate {
	if i != nil {
		lpsu.SetSubjectID(*i)
	}
	return lpsu
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpsu *LessonPlanSubjectUpdate) SetLessonPlan(l *LessonPlan) *LessonPlanSubjectUpdate {
	return lpsu.SetLessonPlanID(l.ID)
}

// SetSubject sets the "subject" edge to the Subject entity.
func (lpsu *LessonPlanSubjectUpdate) SetSubject(s *Subject) *LessonPlanSubjectUpdate {
	return lpsu.SetSubjectID(s.ID)
}

// Mutation returns the LessonPlanSubjectMutation object of the builder.
func (lpsu *LessonPlanSubjectUpdate) Mutation() *LessonPlanSubjectMutation {
	return lpsu.mutation
}

// ClearLessonPlan clears the "lesson_plan" edge to the LessonPlan entity.
func (lpsu *LessonPlanSubjectUpdate) ClearLessonPlan() *LessonPlanSubjectUpdate {
	lpsu.mutation.ClearLessonPlan()
	return lpsu
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (lpsu *LessonPlanSubjectUpdate) ClearSubject() *LessonPlanSubjectUpdate {
	lpsu.mutation.ClearSubject()
	return lpsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpsu *LessonPlanSubjectUpdate) Save(ctx context.Context) (int, error) {
	lpsu.defaults()
	return withHooks(ctx, lpsu.sqlSave, lpsu.mutation, lpsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpsu *LessonPlanSubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := lpsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpsu *LessonPlanSubjectUpdate) Exec(ctx context.Context) error {
	_, err := lpsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsu *LessonPlanSubjectUpdate) ExecX(ctx context.Context) {
	if err := lpsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpsu *LessonPlanSubjectUpdate) defaults() {
	if _, ok := lpsu.mutation.UpdatedAt(); !ok {
		v := lessonplansubject.UpdateDefaultUpdatedAt()
		lpsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpsu *LessonPlanSubjectUpdate) check() error {
	if lpsu.mutation.LessonPlanCleared() && len(lpsu.mutation.LessonPlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanSubject.lesson_plan"`)
	}
	if lpsu.mutation.SubjectCleared() && len(lpsu.mutation.SubjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanSubject.subject"`)
	}
	return nil
}

func (lpsu *LessonPlanSubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lpsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonplansubject.Table, lessonplansubject.Columns, sqlgraph.NewFieldSpec(lessonplansubject.FieldID, field.TypeInt64))
	if ps := lpsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpsu.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplansubject.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpsu.mutation.LessonPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.LessonPlanTable,
			Columns: []string{lessonplansubject.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsu.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.LessonPlanTable,
			Columns: []string{lessonplansubject.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpsu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.SubjectTable,
			Columns: []string{lessonplansubject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.SubjectTable,
			Columns: []string{lessonplansubject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonplansubject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpsu.mutation.done = true
	return n, nil
}

// LessonPlanSubjectUpdateOne is the builder for updating a single LessonPlanSubject entity.
type LessonPlanSubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonPlanSubjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lpsuo *LessonPlanSubjectUpdateOne) SetUpdatedAt(t time.Time) *LessonPlanSubjectUpdateOne {
	lpsuo.mutation.SetUpdatedAt(t)
	return lpsuo
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpsuo *LessonPlanSubjectUpdateOne) SetLessonPlanID(i int64) *LessonPlanSubjectUpdateOne {
	lpsuo.mutation.SetLessonPlanID(i)
	return lpsuo
}

// SetNillableLessonPlanID sets the "lesson_plan_id" field if the given value is not nil.
func (lpsuo *LessonPlanSubjectUpdateOne) SetNillableLessonPlanID(i *int64) *LessonPlanSubjectUpdateOne {
	if i != nil {
		lpsuo.SetLessonPlanID(*i)
	}
	return lpsuo
}

// SetSubjectID sets the "subject_id" field.
func (lpsuo *LessonPlanSubjectUpdateOne) SetSubjectID(i int64) *LessonPlanSubjectUpdateOne {
	lpsuo.mutation.SetSubjectID(i)
	return lpsuo
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (lpsuo *LessonPlanSubjectUpdateOne) SetNillableSubjectID(i *int64) *LessonPlanSubjectUpdateOne {
	if i != nil {
		lpsuo.SetSubjectID(*i)
	}
	return lpsuo
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpsuo *LessonPlanSubjectUpdateOne) SetLessonPlan(l *LessonPlan) *LessonPlanSubjectUpdateOne {
	return lpsuo.SetLessonPlanID(l.ID)
}

// SetSubject sets the "subject" edge to the Subject entity.
func (lpsuo *LessonPlanSubjectUpdateOne) SetSubject(s *Subject) *LessonPlanSubjectUpdateOne {
	return lpsuo.SetSubjectID(s.ID)
}

// Mutation returns the LessonPlanSubjectMutation object of the builder.
func (lpsuo *LessonPlanSubjectUpdateOne) Mutation() *LessonPlanSubjectMutation {
	return lpsuo.mutation
}

// ClearLessonPlan clears the "lesson_plan" edge to the LessonPlan entity.
func (lpsuo *LessonPlanSubjectUpdateOne) ClearLessonPlan() *LessonPlanSubjectUpdateOne {
	lpsuo.mutation.ClearLessonPlan()
	return lpsuo
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (lpsuo *LessonPlanSubjectUpdateOne) ClearSubject() *LessonPlanSubjectUpdateOne {
	lpsuo.mutation.ClearSubject()
	return lpsuo
}

// Where appends a list predicates to the LessonPlanSubjectUpdate builder.
func (lpsuo *LessonPlanSubjectUpdateOne) Where(ps ...predicate.LessonPlanSubject) *LessonPlanSubjectUpdateOne {
	lpsuo.mutation.Where(ps...)
	return lpsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpsuo *LessonPlanSubjectUpdateOne) Select(field string, fields ...string) *LessonPlanSubjectUpdateOne {
	lpsuo.fields = append([]string{field}, fields...)
	return lpsuo
}

// Save executes the query and returns the updated LessonPlanSubject entity.
func (lpsuo *LessonPlanSubjectUpdateOne) Save(ctx context.Context) (*LessonPlanSubject, error) {
	lpsuo.defaults()
	return withHooks(ctx, lpsuo.sqlSave, lpsuo.mutation, lpsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpsuo *LessonPlanSubjectUpdateOne) SaveX(ctx context.Context) *LessonPlanSubject {
	node, err := lpsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpsuo *LessonPlanSubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := lpsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsuo *LessonPlanSubjectUpdateOne) ExecX(ctx context.Context) {
	if err := lpsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpsuo *LessonPlanSubjectUpdateOne) defaults() {
	if _, ok := lpsuo.mutation.UpdatedAt(); !ok {
		v := lessonplansubject.UpdateDefaultUpdatedAt()
		lpsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpsuo *LessonPlanSubjectUpdateOne) check() error {
	if lpsuo.mutation.LessonPlanCleared() && len(lpsuo.mutation.LessonPlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanSubject.lesson_plan"`)
	}
	if lpsuo.mutation.SubjectCleared() && len(lpsuo.mutation.SubjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanSubject.subject"`)
	}
	return nil
}

func (lpsuo *LessonPlanSubjectUpdateOne) sqlSave(ctx context.Context) (_node *LessonPlanSubject, err error) {
	if err := lpsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonplansubject.Table, lessonplansubject.Columns, sqlgraph.NewFieldSpec(lessonplansubject.FieldID, field.TypeInt64))
	id, ok := lpsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LessonPlanSubject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonplansubject.FieldID)
		for _, f := range fields {
			if !lessonplansubject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lessonplansubject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplansubject.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpsuo.mutation.LessonPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.LessonPlanTable,
			Columns: []string{lessonplansubject.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsuo.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.LessonPlanTable,
			Columns: []string{lessonplansubject.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpsuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.SubjectTable,
			Columns: []string{lessonplansubject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplansubject.SubjectTable,
			Columns: []string{lessonplansubject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LessonPlanSubject{config: lpsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonplansubject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpsuo.mutation.done = true
	return _node, nil
}
