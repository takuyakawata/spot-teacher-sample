// Code generated by ent, DO NOT EDIT.

package lessonreservation

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lessonreservation type in the database.
	Label = "lesson_reservation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLessonScheduleID holds the string denoting the lesson_schedule_id field in the database.
	FieldLessonScheduleID = "lesson_schedule_id"
	// FieldSchoolID holds the string denoting the school_id field in the database.
	FieldSchoolID = "school_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldReservationStatus holds the string denoting the reservation_status field in the database.
	FieldReservationStatus = "reservation_status"
	// FieldCountStudent holds the string denoting the count_student field in the database.
	FieldCountStudent = "count_student"
	// FieldGraduate holds the string denoting the graduate field in the database.
	FieldGraduate = "graduate"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldReservationConfirmAt holds the string denoting the reservation_confirm_at field in the database.
	FieldReservationConfirmAt = "reservation_confirm_at"
	// EdgeLessonSchedule holds the string denoting the lesson_schedule edge name in mutations.
	EdgeLessonSchedule = "lesson_schedule"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeLessonReservationPreferredDates holds the string denoting the lesson_reservation_preferred_dates edge name in mutations.
	EdgeLessonReservationPreferredDates = "lesson_reservation_preferred_dates"
	// EdgeLessonConfirmation holds the string denoting the lesson_confirmation edge name in mutations.
	EdgeLessonConfirmation = "lesson_confirmation"
	// Table holds the table name of the lessonreservation in the database.
	Table = "lesson_reservations"
	// LessonScheduleTable is the table that holds the lesson_schedule relation/edge.
	LessonScheduleTable = "lesson_reservations"
	// LessonScheduleInverseTable is the table name for the LessonSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "lessonschedule" package.
	LessonScheduleInverseTable = "lesson_schedules"
	// LessonScheduleColumn is the table column denoting the lesson_schedule relation/edge.
	LessonScheduleColumn = "lesson_schedule_id"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "lesson_reservations"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "lesson_reservations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// LessonReservationPreferredDatesTable is the table that holds the lesson_reservation_preferred_dates relation/edge.
	LessonReservationPreferredDatesTable = "lesson_reservation_preferred_dates"
	// LessonReservationPreferredDatesInverseTable is the table name for the LessonReservationPreferredDate entity.
	// It exists in this package in order to avoid circular dependency with the "lessonreservationpreferreddate" package.
	LessonReservationPreferredDatesInverseTable = "lesson_reservation_preferred_dates"
	// LessonReservationPreferredDatesColumn is the table column denoting the lesson_reservation_preferred_dates relation/edge.
	LessonReservationPreferredDatesColumn = "lesson_reservation_id"
	// LessonConfirmationTable is the table that holds the lesson_confirmation relation/edge.
	LessonConfirmationTable = "lesson_confirmations"
	// LessonConfirmationInverseTable is the table name for the LessonConfirmation entity.
	// It exists in this package in order to avoid circular dependency with the "lessonconfirmation" package.
	LessonConfirmationInverseTable = "lesson_confirmations"
	// LessonConfirmationColumn is the table column denoting the lesson_confirmation relation/edge.
	LessonConfirmationColumn = "lesson_reservation_id"
)

// Columns holds all SQL columns for lessonreservation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLessonScheduleID,
	FieldSchoolID,
	FieldUserID,
	FieldReservationStatus,
	FieldCountStudent,
	FieldGraduate,
	FieldSubject,
	FieldRemarks,
	FieldReservationConfirmAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// LessonScheduleIDValidator is a validator for the "lesson_schedule_id" field. It is called by the builders before save.
	LessonScheduleIDValidator func(int64) error
	// SchoolIDValidator is a validator for the "school_id" field. It is called by the builders before save.
	SchoolIDValidator func(int64) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// ReservationStatus defines the type for the "reservation_status" enum field.
type ReservationStatus string

// ReservationStatus values.
const (
	ReservationStatusPENDING  ReservationStatus = "PENDING"
	ReservationStatusAPPROVED ReservationStatus = "APPROVED"
	ReservationStatusCANCELED ReservationStatus = "CANCELED"
)

func (rs ReservationStatus) String() string {
	return string(rs)
}

// ReservationStatusValidator is a validator for the "reservation_status" field enum values. It is called by the builders before save.
func ReservationStatusValidator(rs ReservationStatus) error {
	switch rs {
	case ReservationStatusPENDING, ReservationStatusAPPROVED, ReservationStatusCANCELED:
		return nil
	default:
		return fmt.Errorf("lessonreservation: invalid enum value for reservation_status field: %q", rs)
	}
}

// OrderOption defines the ordering options for the LessonReservation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLessonScheduleID orders the results by the lesson_schedule_id field.
func ByLessonScheduleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonScheduleID, opts...).ToFunc()
}

// BySchoolID orders the results by the school_id field.
func BySchoolID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchoolID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByReservationStatus orders the results by the reservation_status field.
func ByReservationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReservationStatus, opts...).ToFunc()
}

// ByCountStudent orders the results by the count_student field.
func ByCountStudent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountStudent, opts...).ToFunc()
}

// ByGraduate orders the results by the graduate field.
func ByGraduate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGraduate, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByReservationConfirmAt orders the results by the reservation_confirm_at field.
func ByReservationConfirmAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReservationConfirmAt, opts...).ToFunc()
}

// ByLessonScheduleField orders the results by lesson_schedule field.
func ByLessonScheduleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonScheduleStep(), sql.OrderByField(field, opts...))
	}
}

// BySchoolField orders the results by school field.
func BySchoolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchoolStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByLessonReservationPreferredDatesCount orders the results by lesson_reservation_preferred_dates count.
func ByLessonReservationPreferredDatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonReservationPreferredDatesStep(), opts...)
	}
}

// ByLessonReservationPreferredDates orders the results by lesson_reservation_preferred_dates terms.
func ByLessonReservationPreferredDates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonReservationPreferredDatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLessonConfirmationCount orders the results by lesson_confirmation count.
func ByLessonConfirmationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonConfirmationStep(), opts...)
	}
}

// ByLessonConfirmation orders the results by lesson_confirmation terms.
func ByLessonConfirmation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonConfirmationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLessonScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LessonScheduleTable, LessonScheduleColumn),
	)
}
func newSchoolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchoolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SchoolTable, SchoolColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newLessonReservationPreferredDatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonReservationPreferredDatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LessonReservationPreferredDatesTable, LessonReservationPreferredDatesColumn),
	)
}
func newLessonConfirmationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonConfirmationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LessonConfirmationTable, LessonConfirmationColumn),
	)
}
