// Code generated by ent, DO NOT EDIT.

package lessonreservation

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the lessonreservation type in the database.
	Label = "lesson_reservation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLessonScheduleID holds the string denoting the lesson_schedule_id field in the database.
	FieldLessonScheduleID = "lesson_schedule_id"
	// FieldSchoolID holds the string denoting the school_id field in the database.
	FieldSchoolID = "school_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldReservationStatus holds the string denoting the reservation_status field in the database.
	FieldReservationStatus = "reservation_status"
	// FieldCountStudent holds the string denoting the count_student field in the database.
	FieldCountStudent = "count_student"
	// FieldGraduate holds the string denoting the graduate field in the database.
	FieldGraduate = "graduate"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldReservationConfirmAt holds the string denoting the reservation_confirm_at field in the database.
	FieldReservationConfirmAt = "reservation_confirm_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the lessonreservation in the database.
	Table = "lesson_reservations"
)

// Columns holds all SQL columns for lessonreservation fields.
var Columns = []string{
	FieldID,
	FieldLessonScheduleID,
	FieldSchoolID,
	FieldUserID,
	FieldReservationStatus,
	FieldCountStudent,
	FieldGraduate,
	FieldSubject,
	FieldRemarks,
	FieldReservationConfirmAt,
	FieldDeletedAt,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LessonScheduleIDValidator is a validator for the "lesson_schedule_id" field. It is called by the builders before save.
	LessonScheduleIDValidator func(int64) error
	// SchoolIDValidator is a validator for the "school_id" field. It is called by the builders before save.
	SchoolIDValidator func(int64) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int64) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// ReservationStatus defines the type for the "reservation_status" enum field.
type ReservationStatus string

// ReservationStatus values.
const (
	ReservationStatusPENDING  ReservationStatus = "PENDING"
	ReservationStatusAPPROVED ReservationStatus = "APPROVED"
	ReservationStatusCANCELED ReservationStatus = "CANCELED"
)

func (rs ReservationStatus) String() string {
	return string(rs)
}

// ReservationStatusValidator is a validator for the "reservation_status" field enum values. It is called by the builders before save.
func ReservationStatusValidator(rs ReservationStatus) error {
	switch rs {
	case ReservationStatusPENDING, ReservationStatusAPPROVED, ReservationStatusCANCELED:
		return nil
	default:
		return fmt.Errorf("lessonreservation: invalid enum value for reservation_status field: %q", rs)
	}
}

// OrderOption defines the ordering options for the LessonReservation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLessonScheduleID orders the results by the lesson_schedule_id field.
func ByLessonScheduleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonScheduleID, opts...).ToFunc()
}

// BySchoolID orders the results by the school_id field.
func BySchoolID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchoolID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByReservationStatus orders the results by the reservation_status field.
func ByReservationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReservationStatus, opts...).ToFunc()
}

// ByCountStudent orders the results by the count_student field.
func ByCountStudent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountStudent, opts...).ToFunc()
}

// ByGraduate orders the results by the graduate field.
func ByGraduate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGraduate, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByReservationConfirmAt orders the results by the reservation_confirm_at field.
func ByReservationConfirmAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReservationConfirmAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
