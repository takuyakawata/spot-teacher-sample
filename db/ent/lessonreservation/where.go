// Code generated by ent, DO NOT EDIT.

package lessonreservation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLTE(FieldID, id))
}

// LessonScheduleID applies equality check predicate on the "lesson_schedule_id" field. It's identical to LessonScheduleIDEQ.
func LessonScheduleID(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldLessonScheduleID, v))
}

// SchoolID applies equality check predicate on the "school_id" field. It's identical to SchoolIDEQ.
func SchoolID(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldSchoolID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldUserID, v))
}

// CountStudent applies equality check predicate on the "count_student" field. It's identical to CountStudentEQ.
func CountStudent(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldCountStudent, v))
}

// Graduate applies equality check predicate on the "graduate" field. It's identical to GraduateEQ.
func Graduate(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldGraduate, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldSubject, v))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldRemarks, v))
}

// ReservationConfirmAt applies equality check predicate on the "reservation_confirm_at" field. It's identical to ReservationConfirmAtEQ.
func ReservationConfirmAt(v time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldReservationConfirmAt, v))
}

// LessonScheduleIDEQ applies the EQ predicate on the "lesson_schedule_id" field.
func LessonScheduleIDEQ(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldLessonScheduleID, v))
}

// LessonScheduleIDNEQ applies the NEQ predicate on the "lesson_schedule_id" field.
func LessonScheduleIDNEQ(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldLessonScheduleID, v))
}

// LessonScheduleIDIn applies the In predicate on the "lesson_schedule_id" field.
func LessonScheduleIDIn(vs ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldLessonScheduleID, vs...))
}

// LessonScheduleIDNotIn applies the NotIn predicate on the "lesson_schedule_id" field.
func LessonScheduleIDNotIn(vs ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldLessonScheduleID, vs...))
}

// SchoolIDEQ applies the EQ predicate on the "school_id" field.
func SchoolIDEQ(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldSchoolID, v))
}

// SchoolIDNEQ applies the NEQ predicate on the "school_id" field.
func SchoolIDNEQ(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldSchoolID, v))
}

// SchoolIDIn applies the In predicate on the "school_id" field.
func SchoolIDIn(vs ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldSchoolID, vs...))
}

// SchoolIDNotIn applies the NotIn predicate on the "school_id" field.
func SchoolIDNotIn(vs ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldSchoolID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldUserID, vs...))
}

// ReservationStatusEQ applies the EQ predicate on the "reservation_status" field.
func ReservationStatusEQ(v ReservationStatus) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldReservationStatus, v))
}

// ReservationStatusNEQ applies the NEQ predicate on the "reservation_status" field.
func ReservationStatusNEQ(v ReservationStatus) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldReservationStatus, v))
}

// ReservationStatusIn applies the In predicate on the "reservation_status" field.
func ReservationStatusIn(vs ...ReservationStatus) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldReservationStatus, vs...))
}

// ReservationStatusNotIn applies the NotIn predicate on the "reservation_status" field.
func ReservationStatusNotIn(vs ...ReservationStatus) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldReservationStatus, vs...))
}

// CountStudentEQ applies the EQ predicate on the "count_student" field.
func CountStudentEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldCountStudent, v))
}

// CountStudentNEQ applies the NEQ predicate on the "count_student" field.
func CountStudentNEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldCountStudent, v))
}

// CountStudentIn applies the In predicate on the "count_student" field.
func CountStudentIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldCountStudent, vs...))
}

// CountStudentNotIn applies the NotIn predicate on the "count_student" field.
func CountStudentNotIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldCountStudent, vs...))
}

// CountStudentGT applies the GT predicate on the "count_student" field.
func CountStudentGT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGT(FieldCountStudent, v))
}

// CountStudentGTE applies the GTE predicate on the "count_student" field.
func CountStudentGTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGTE(FieldCountStudent, v))
}

// CountStudentLT applies the LT predicate on the "count_student" field.
func CountStudentLT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLT(FieldCountStudent, v))
}

// CountStudentLTE applies the LTE predicate on the "count_student" field.
func CountStudentLTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLTE(FieldCountStudent, v))
}

// CountStudentContains applies the Contains predicate on the "count_student" field.
func CountStudentContains(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContains(FieldCountStudent, v))
}

// CountStudentHasPrefix applies the HasPrefix predicate on the "count_student" field.
func CountStudentHasPrefix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasPrefix(FieldCountStudent, v))
}

// CountStudentHasSuffix applies the HasSuffix predicate on the "count_student" field.
func CountStudentHasSuffix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasSuffix(FieldCountStudent, v))
}

// CountStudentEqualFold applies the EqualFold predicate on the "count_student" field.
func CountStudentEqualFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEqualFold(FieldCountStudent, v))
}

// CountStudentContainsFold applies the ContainsFold predicate on the "count_student" field.
func CountStudentContainsFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContainsFold(FieldCountStudent, v))
}

// GraduateEQ applies the EQ predicate on the "graduate" field.
func GraduateEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldGraduate, v))
}

// GraduateNEQ applies the NEQ predicate on the "graduate" field.
func GraduateNEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldGraduate, v))
}

// GraduateIn applies the In predicate on the "graduate" field.
func GraduateIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldGraduate, vs...))
}

// GraduateNotIn applies the NotIn predicate on the "graduate" field.
func GraduateNotIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldGraduate, vs...))
}

// GraduateGT applies the GT predicate on the "graduate" field.
func GraduateGT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGT(FieldGraduate, v))
}

// GraduateGTE applies the GTE predicate on the "graduate" field.
func GraduateGTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGTE(FieldGraduate, v))
}

// GraduateLT applies the LT predicate on the "graduate" field.
func GraduateLT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLT(FieldGraduate, v))
}

// GraduateLTE applies the LTE predicate on the "graduate" field.
func GraduateLTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLTE(FieldGraduate, v))
}

// GraduateContains applies the Contains predicate on the "graduate" field.
func GraduateContains(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContains(FieldGraduate, v))
}

// GraduateHasPrefix applies the HasPrefix predicate on the "graduate" field.
func GraduateHasPrefix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasPrefix(FieldGraduate, v))
}

// GraduateHasSuffix applies the HasSuffix predicate on the "graduate" field.
func GraduateHasSuffix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasSuffix(FieldGraduate, v))
}

// GraduateEqualFold applies the EqualFold predicate on the "graduate" field.
func GraduateEqualFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEqualFold(FieldGraduate, v))
}

// GraduateContainsFold applies the ContainsFold predicate on the "graduate" field.
func GraduateContainsFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContainsFold(FieldGraduate, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContainsFold(FieldSubject, v))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldContainsFold(FieldRemarks, v))
}

// ReservationConfirmAtEQ applies the EQ predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtEQ(v time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldEQ(FieldReservationConfirmAt, v))
}

// ReservationConfirmAtNEQ applies the NEQ predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtNEQ(v time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNEQ(FieldReservationConfirmAt, v))
}

// ReservationConfirmAtIn applies the In predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtIn(vs ...time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIn(FieldReservationConfirmAt, vs...))
}

// ReservationConfirmAtNotIn applies the NotIn predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtNotIn(vs ...time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotIn(FieldReservationConfirmAt, vs...))
}

// ReservationConfirmAtGT applies the GT predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtGT(v time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGT(FieldReservationConfirmAt, v))
}

// ReservationConfirmAtGTE applies the GTE predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtGTE(v time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldGTE(FieldReservationConfirmAt, v))
}

// ReservationConfirmAtLT applies the LT predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtLT(v time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLT(FieldReservationConfirmAt, v))
}

// ReservationConfirmAtLTE applies the LTE predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtLTE(v time.Time) predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldLTE(FieldReservationConfirmAt, v))
}

// ReservationConfirmAtIsNil applies the IsNil predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtIsNil() predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldIsNull(FieldReservationConfirmAt))
}

// ReservationConfirmAtNotNil applies the NotNil predicate on the "reservation_confirm_at" field.
func ReservationConfirmAtNotNil() predicate.LessonReservation {
	return predicate.LessonReservation(sql.FieldNotNull(FieldReservationConfirmAt))
}

// HasLessonSchedule applies the HasEdge predicate on the "lesson_schedule" edge.
func HasLessonSchedule() predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LessonScheduleTable, LessonScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonScheduleWith applies the HasEdge predicate on the "lesson_schedule" edge with a given conditions (other predicates).
func HasLessonScheduleWith(preds ...predicate.LessonSchedule) predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := newLessonScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchool applies the HasEdge predicate on the "school" edge.
func HasSchool() predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SchoolTable, SchoolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchoolWith applies the HasEdge predicate on the "school" edge with a given conditions (other predicates).
func HasSchoolWith(preds ...predicate.School) predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := newSchoolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLessonReservationPreferredDates applies the HasEdge predicate on the "lesson_reservation_preferred_dates" edge.
func HasLessonReservationPreferredDates() predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LessonReservationPreferredDatesTable, LessonReservationPreferredDatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonReservationPreferredDatesWith applies the HasEdge predicate on the "lesson_reservation_preferred_dates" edge with a given conditions (other predicates).
func HasLessonReservationPreferredDatesWith(preds ...predicate.LessonReservationPreferredDate) predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := newLessonReservationPreferredDatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLessonConfirmation applies the HasEdge predicate on the "lesson_confirmation" edge.
func HasLessonConfirmation() predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LessonConfirmationTable, LessonConfirmationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonConfirmationWith applies the HasEdge predicate on the "lesson_confirmation" edge with a given conditions (other predicates).
func HasLessonConfirmationWith(preds ...predicate.LessonConfirmation) predicate.LessonReservation {
	return predicate.LessonReservation(func(s *sql.Selector) {
		step := newLessonConfirmationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LessonReservation) predicate.LessonReservation {
	return predicate.LessonReservation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LessonReservation) predicate.LessonReservation {
	return predicate.LessonReservation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LessonReservation) predicate.LessonReservation {
	return predicate.LessonReservation(sql.NotPredicates(p))
}
