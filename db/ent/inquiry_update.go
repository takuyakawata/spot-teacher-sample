// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/inquiry"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// InquiryUpdate is the builder for updating Inquiry entities.
type InquiryUpdate struct {
	config
	hooks    []Hook
	mutation *InquiryMutation
}

// Where appends a list predicates to the InquiryUpdate builder.
func (iu *InquiryUpdate) Where(ps ...predicate.Inquiry) *InquiryUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InquiryUpdate) SetUpdatedAt(t time.Time) *InquiryUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetLessonScheduleID sets the "lesson_schedule_id" field.
func (iu *InquiryUpdate) SetLessonScheduleID(i int64) *InquiryUpdate {
	iu.mutation.SetLessonScheduleID(i)
	return iu
}

// SetNillableLessonScheduleID sets the "lesson_schedule_id" field if the given value is not nil.
func (iu *InquiryUpdate) SetNillableLessonScheduleID(i *int64) *InquiryUpdate {
	if i != nil {
		iu.SetLessonScheduleID(*i)
	}
	return iu
}

// SetSchoolID sets the "school_id" field.
func (iu *InquiryUpdate) SetSchoolID(i int64) *InquiryUpdate {
	iu.mutation.SetSchoolID(i)
	return iu
}

// SetNillableSchoolID sets the "school_id" field if the given value is not nil.
func (iu *InquiryUpdate) SetNillableSchoolID(i *int64) *InquiryUpdate {
	if i != nil {
		iu.SetSchoolID(*i)
	}
	return iu
}

// SetUserID sets the "user_id" field.
func (iu *InquiryUpdate) SetUserID(i int64) *InquiryUpdate {
	iu.mutation.SetUserID(i)
	return iu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iu *InquiryUpdate) SetNillableUserID(i *int64) *InquiryUpdate {
	if i != nil {
		iu.SetUserID(*i)
	}
	return iu
}

// SetCategory sets the "category" field.
func (iu *InquiryUpdate) SetCategory(i inquiry.Category) *InquiryUpdate {
	iu.mutation.SetCategory(i)
	return iu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (iu *InquiryUpdate) SetNillableCategory(i *inquiry.Category) *InquiryUpdate {
	if i != nil {
		iu.SetCategory(*i)
	}
	return iu
}

// SetInquiryDetail sets the "inquiry_detail" field.
func (iu *InquiryUpdate) SetInquiryDetail(s string) *InquiryUpdate {
	iu.mutation.SetInquiryDetail(s)
	return iu
}

// SetNillableInquiryDetail sets the "inquiry_detail" field if the given value is not nil.
func (iu *InquiryUpdate) SetNillableInquiryDetail(s *string) *InquiryUpdate {
	if s != nil {
		iu.SetInquiryDetail(*s)
	}
	return iu
}

// SetLessonID sets the "lesson" edge to the LessonPlan entity by ID.
func (iu *InquiryUpdate) SetLessonID(id int64) *InquiryUpdate {
	iu.mutation.SetLessonID(id)
	return iu
}

// SetLesson sets the "lesson" edge to the LessonPlan entity.
func (iu *InquiryUpdate) SetLesson(l *LessonPlan) *InquiryUpdate {
	return iu.SetLessonID(l.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (iu *InquiryUpdate) SetSchool(s *School) *InquiryUpdate {
	return iu.SetSchoolID(s.ID)
}

// SetTeacherID sets the "teacher" edge to the User entity by ID.
func (iu *InquiryUpdate) SetTeacherID(id int64) *InquiryUpdate {
	iu.mutation.SetTeacherID(id)
	return iu
}

// SetTeacher sets the "teacher" edge to the User entity.
func (iu *InquiryUpdate) SetTeacher(u *User) *InquiryUpdate {
	return iu.SetTeacherID(u.ID)
}

// Mutation returns the InquiryMutation object of the builder.
func (iu *InquiryUpdate) Mutation() *InquiryMutation {
	return iu.mutation
}

// ClearLesson clears the "lesson" edge to the LessonPlan entity.
func (iu *InquiryUpdate) ClearLesson() *InquiryUpdate {
	iu.mutation.ClearLesson()
	return iu
}

// ClearSchool clears the "school" edge to the School entity.
func (iu *InquiryUpdate) ClearSchool() *InquiryUpdate {
	iu.mutation.ClearSchool()
	return iu
}

// ClearTeacher clears the "teacher" edge to the User entity.
func (iu *InquiryUpdate) ClearTeacher() *InquiryUpdate {
	iu.mutation.ClearTeacher()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InquiryUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InquiryUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InquiryUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InquiryUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InquiryUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := inquiry.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InquiryUpdate) check() error {
	if v, ok := iu.mutation.LessonScheduleID(); ok {
		if err := inquiry.LessonScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_schedule_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.lesson_schedule_id": %w`, err)}
		}
	}
	if v, ok := iu.mutation.SchoolID(); ok {
		if err := inquiry.SchoolIDValidator(v); err != nil {
			return &ValidationError{Name: "school_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.school_id": %w`, err)}
		}
	}
	if v, ok := iu.mutation.UserID(); ok {
		if err := inquiry.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.user_id": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Category(); ok {
		if err := inquiry.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Inquiry.category": %w`, err)}
		}
	}
	if iu.mutation.LessonCleared() && len(iu.mutation.LessonIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Inquiry.lesson"`)
	}
	if iu.mutation.SchoolCleared() && len(iu.mutation.SchoolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Inquiry.school"`)
	}
	if iu.mutation.TeacherCleared() && len(iu.mutation.TeacherIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Inquiry.teacher"`)
	}
	return nil
}

func (iu *InquiryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inquiry.Table, inquiry.Columns, sqlgraph.NewFieldSpec(inquiry.FieldID, field.TypeInt64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(inquiry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Category(); ok {
		_spec.SetField(inquiry.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.InquiryDetail(); ok {
		_spec.SetField(inquiry.FieldInquiryDetail, field.TypeString, value)
	}
	if iu.mutation.LessonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.LessonTable,
			Columns: []string{inquiry.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.LessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.LessonTable,
			Columns: []string{inquiry.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.SchoolTable,
			Columns: []string{inquiry.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.SchoolTable,
			Columns: []string{inquiry.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.TeacherTable,
			Columns: []string{inquiry.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.TeacherTable,
			Columns: []string{inquiry.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inquiry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InquiryUpdateOne is the builder for updating a single Inquiry entity.
type InquiryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InquiryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InquiryUpdateOne) SetUpdatedAt(t time.Time) *InquiryUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetLessonScheduleID sets the "lesson_schedule_id" field.
func (iuo *InquiryUpdateOne) SetLessonScheduleID(i int64) *InquiryUpdateOne {
	iuo.mutation.SetLessonScheduleID(i)
	return iuo
}

// SetNillableLessonScheduleID sets the "lesson_schedule_id" field if the given value is not nil.
func (iuo *InquiryUpdateOne) SetNillableLessonScheduleID(i *int64) *InquiryUpdateOne {
	if i != nil {
		iuo.SetLessonScheduleID(*i)
	}
	return iuo
}

// SetSchoolID sets the "school_id" field.
func (iuo *InquiryUpdateOne) SetSchoolID(i int64) *InquiryUpdateOne {
	iuo.mutation.SetSchoolID(i)
	return iuo
}

// SetNillableSchoolID sets the "school_id" field if the given value is not nil.
func (iuo *InquiryUpdateOne) SetNillableSchoolID(i *int64) *InquiryUpdateOne {
	if i != nil {
		iuo.SetSchoolID(*i)
	}
	return iuo
}

// SetUserID sets the "user_id" field.
func (iuo *InquiryUpdateOne) SetUserID(i int64) *InquiryUpdateOne {
	iuo.mutation.SetUserID(i)
	return iuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iuo *InquiryUpdateOne) SetNillableUserID(i *int64) *InquiryUpdateOne {
	if i != nil {
		iuo.SetUserID(*i)
	}
	return iuo
}

// SetCategory sets the "category" field.
func (iuo *InquiryUpdateOne) SetCategory(i inquiry.Category) *InquiryUpdateOne {
	iuo.mutation.SetCategory(i)
	return iuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (iuo *InquiryUpdateOne) SetNillableCategory(i *inquiry.Category) *InquiryUpdateOne {
	if i != nil {
		iuo.SetCategory(*i)
	}
	return iuo
}

// SetInquiryDetail sets the "inquiry_detail" field.
func (iuo *InquiryUpdateOne) SetInquiryDetail(s string) *InquiryUpdateOne {
	iuo.mutation.SetInquiryDetail(s)
	return iuo
}

// SetNillableInquiryDetail sets the "inquiry_detail" field if the given value is not nil.
func (iuo *InquiryUpdateOne) SetNillableInquiryDetail(s *string) *InquiryUpdateOne {
	if s != nil {
		iuo.SetInquiryDetail(*s)
	}
	return iuo
}

// SetLessonID sets the "lesson" edge to the LessonPlan entity by ID.
func (iuo *InquiryUpdateOne) SetLessonID(id int64) *InquiryUpdateOne {
	iuo.mutation.SetLessonID(id)
	return iuo
}

// SetLesson sets the "lesson" edge to the LessonPlan entity.
func (iuo *InquiryUpdateOne) SetLesson(l *LessonPlan) *InquiryUpdateOne {
	return iuo.SetLessonID(l.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (iuo *InquiryUpdateOne) SetSchool(s *School) *InquiryUpdateOne {
	return iuo.SetSchoolID(s.ID)
}

// SetTeacherID sets the "teacher" edge to the User entity by ID.
func (iuo *InquiryUpdateOne) SetTeacherID(id int64) *InquiryUpdateOne {
	iuo.mutation.SetTeacherID(id)
	return iuo
}

// SetTeacher sets the "teacher" edge to the User entity.
func (iuo *InquiryUpdateOne) SetTeacher(u *User) *InquiryUpdateOne {
	return iuo.SetTeacherID(u.ID)
}

// Mutation returns the InquiryMutation object of the builder.
func (iuo *InquiryUpdateOne) Mutation() *InquiryMutation {
	return iuo.mutation
}

// ClearLesson clears the "lesson" edge to the LessonPlan entity.
func (iuo *InquiryUpdateOne) ClearLesson() *InquiryUpdateOne {
	iuo.mutation.ClearLesson()
	return iuo
}

// ClearSchool clears the "school" edge to the School entity.
func (iuo *InquiryUpdateOne) ClearSchool() *InquiryUpdateOne {
	iuo.mutation.ClearSchool()
	return iuo
}

// ClearTeacher clears the "teacher" edge to the User entity.
func (iuo *InquiryUpdateOne) ClearTeacher() *InquiryUpdateOne {
	iuo.mutation.ClearTeacher()
	return iuo
}

// Where appends a list predicates to the InquiryUpdate builder.
func (iuo *InquiryUpdateOne) Where(ps ...predicate.Inquiry) *InquiryUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InquiryUpdateOne) Select(field string, fields ...string) *InquiryUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inquiry entity.
func (iuo *InquiryUpdateOne) Save(ctx context.Context) (*Inquiry, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InquiryUpdateOne) SaveX(ctx context.Context) *Inquiry {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InquiryUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InquiryUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InquiryUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := inquiry.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InquiryUpdateOne) check() error {
	if v, ok := iuo.mutation.LessonScheduleID(); ok {
		if err := inquiry.LessonScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_schedule_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.lesson_schedule_id": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.SchoolID(); ok {
		if err := inquiry.SchoolIDValidator(v); err != nil {
			return &ValidationError{Name: "school_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.school_id": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.UserID(); ok {
		if err := inquiry.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.user_id": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Category(); ok {
		if err := inquiry.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Inquiry.category": %w`, err)}
		}
	}
	if iuo.mutation.LessonCleared() && len(iuo.mutation.LessonIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Inquiry.lesson"`)
	}
	if iuo.mutation.SchoolCleared() && len(iuo.mutation.SchoolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Inquiry.school"`)
	}
	if iuo.mutation.TeacherCleared() && len(iuo.mutation.TeacherIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Inquiry.teacher"`)
	}
	return nil
}

func (iuo *InquiryUpdateOne) sqlSave(ctx context.Context) (_node *Inquiry, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inquiry.Table, inquiry.Columns, sqlgraph.NewFieldSpec(inquiry.FieldID, field.TypeInt64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Inquiry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inquiry.FieldID)
		for _, f := range fields {
			if !inquiry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inquiry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inquiry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Category(); ok {
		_spec.SetField(inquiry.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.InquiryDetail(); ok {
		_spec.SetField(inquiry.FieldInquiryDetail, field.TypeString, value)
	}
	if iuo.mutation.LessonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.LessonTable,
			Columns: []string{inquiry.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.LessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.LessonTable,
			Columns: []string{inquiry.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.SchoolTable,
			Columns: []string{inquiry.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.SchoolTable,
			Columns: []string{inquiry.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.TeacherTable,
			Columns: []string{inquiry.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.TeacherTable,
			Columns: []string{inquiry.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Inquiry{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inquiry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
