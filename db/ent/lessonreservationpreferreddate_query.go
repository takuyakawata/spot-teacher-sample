// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonReservationPreferredDateQuery is the builder for querying LessonReservationPreferredDate entities.
type LessonReservationPreferredDateQuery struct {
	config
	ctx                    *QueryContext
	order                  []lessonreservationpreferreddate.OrderOption
	inters                 []Interceptor
	predicates             []predicate.LessonReservationPreferredDate
	withLessonReservations *LessonReservationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LessonReservationPreferredDateQuery builder.
func (lrpdq *LessonReservationPreferredDateQuery) Where(ps ...predicate.LessonReservationPreferredDate) *LessonReservationPreferredDateQuery {
	lrpdq.predicates = append(lrpdq.predicates, ps...)
	return lrpdq
}

// Limit the number of records to be returned by this query.
func (lrpdq *LessonReservationPreferredDateQuery) Limit(limit int) *LessonReservationPreferredDateQuery {
	lrpdq.ctx.Limit = &limit
	return lrpdq
}

// Offset to start from.
func (lrpdq *LessonReservationPreferredDateQuery) Offset(offset int) *LessonReservationPreferredDateQuery {
	lrpdq.ctx.Offset = &offset
	return lrpdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lrpdq *LessonReservationPreferredDateQuery) Unique(unique bool) *LessonReservationPreferredDateQuery {
	lrpdq.ctx.Unique = &unique
	return lrpdq
}

// Order specifies how the records should be ordered.
func (lrpdq *LessonReservationPreferredDateQuery) Order(o ...lessonreservationpreferreddate.OrderOption) *LessonReservationPreferredDateQuery {
	lrpdq.order = append(lrpdq.order, o...)
	return lrpdq
}

// QueryLessonReservations chains the current query on the "lessonReservations" edge.
func (lrpdq *LessonReservationPreferredDateQuery) QueryLessonReservations() *LessonReservationQuery {
	query := (&LessonReservationClient{config: lrpdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lrpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lrpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservationpreferreddate.Table, lessonreservationpreferreddate.FieldID, selector),
			sqlgraph.To(lessonreservation.Table, lessonreservation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservationpreferreddate.LessonReservationsTable, lessonreservationpreferreddate.LessonReservationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lrpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LessonReservationPreferredDate entity from the query.
// Returns a *NotFoundError when no LessonReservationPreferredDate was found.
func (lrpdq *LessonReservationPreferredDateQuery) First(ctx context.Context) (*LessonReservationPreferredDate, error) {
	nodes, err := lrpdq.Limit(1).All(setContextOp(ctx, lrpdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lessonreservationpreferreddate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) FirstX(ctx context.Context) *LessonReservationPreferredDate {
	node, err := lrpdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LessonReservationPreferredDate ID from the query.
// Returns a *NotFoundError when no LessonReservationPreferredDate ID was found.
func (lrpdq *LessonReservationPreferredDateQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lrpdq.Limit(1).IDs(setContextOp(ctx, lrpdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lessonreservationpreferreddate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) FirstIDX(ctx context.Context) int {
	id, err := lrpdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LessonReservationPreferredDate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LessonReservationPreferredDate entity is found.
// Returns a *NotFoundError when no LessonReservationPreferredDate entities are found.
func (lrpdq *LessonReservationPreferredDateQuery) Only(ctx context.Context) (*LessonReservationPreferredDate, error) {
	nodes, err := lrpdq.Limit(2).All(setContextOp(ctx, lrpdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lessonreservationpreferreddate.Label}
	default:
		return nil, &NotSingularError{lessonreservationpreferreddate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) OnlyX(ctx context.Context) *LessonReservationPreferredDate {
	node, err := lrpdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LessonReservationPreferredDate ID in the query.
// Returns a *NotSingularError when more than one LessonReservationPreferredDate ID is found.
// Returns a *NotFoundError when no entities are found.
func (lrpdq *LessonReservationPreferredDateQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lrpdq.Limit(2).IDs(setContextOp(ctx, lrpdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lessonreservationpreferreddate.Label}
	default:
		err = &NotSingularError{lessonreservationpreferreddate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) OnlyIDX(ctx context.Context) int {
	id, err := lrpdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LessonReservationPreferredDates.
func (lrpdq *LessonReservationPreferredDateQuery) All(ctx context.Context) ([]*LessonReservationPreferredDate, error) {
	ctx = setContextOp(ctx, lrpdq.ctx, ent.OpQueryAll)
	if err := lrpdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LessonReservationPreferredDate, *LessonReservationPreferredDateQuery]()
	return withInterceptors[[]*LessonReservationPreferredDate](ctx, lrpdq, qr, lrpdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) AllX(ctx context.Context) []*LessonReservationPreferredDate {
	nodes, err := lrpdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LessonReservationPreferredDate IDs.
func (lrpdq *LessonReservationPreferredDateQuery) IDs(ctx context.Context) (ids []int, err error) {
	if lrpdq.ctx.Unique == nil && lrpdq.path != nil {
		lrpdq.Unique(true)
	}
	ctx = setContextOp(ctx, lrpdq.ctx, ent.OpQueryIDs)
	if err = lrpdq.Select(lessonreservationpreferreddate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) IDsX(ctx context.Context) []int {
	ids, err := lrpdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lrpdq *LessonReservationPreferredDateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lrpdq.ctx, ent.OpQueryCount)
	if err := lrpdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lrpdq, querierCount[*LessonReservationPreferredDateQuery](), lrpdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) CountX(ctx context.Context) int {
	count, err := lrpdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lrpdq *LessonReservationPreferredDateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lrpdq.ctx, ent.OpQueryExist)
	switch _, err := lrpdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lrpdq *LessonReservationPreferredDateQuery) ExistX(ctx context.Context) bool {
	exist, err := lrpdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LessonReservationPreferredDateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lrpdq *LessonReservationPreferredDateQuery) Clone() *LessonReservationPreferredDateQuery {
	if lrpdq == nil {
		return nil
	}
	return &LessonReservationPreferredDateQuery{
		config:                 lrpdq.config,
		ctx:                    lrpdq.ctx.Clone(),
		order:                  append([]lessonreservationpreferreddate.OrderOption{}, lrpdq.order...),
		inters:                 append([]Interceptor{}, lrpdq.inters...),
		predicates:             append([]predicate.LessonReservationPreferredDate{}, lrpdq.predicates...),
		withLessonReservations: lrpdq.withLessonReservations.Clone(),
		// clone intermediate query.
		sql:  lrpdq.sql.Clone(),
		path: lrpdq.path,
	}
}

// WithLessonReservations tells the query-builder to eager-load the nodes that are connected to
// the "lessonReservations" edge. The optional arguments are used to configure the query builder of the edge.
func (lrpdq *LessonReservationPreferredDateQuery) WithLessonReservations(opts ...func(*LessonReservationQuery)) *LessonReservationPreferredDateQuery {
	query := (&LessonReservationClient{config: lrpdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lrpdq.withLessonReservations = query
	return lrpdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LessonReservationPreferredDate.Query().
//		GroupBy(lessonreservationpreferreddate.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lrpdq *LessonReservationPreferredDateQuery) GroupBy(field string, fields ...string) *LessonReservationPreferredDateGroupBy {
	lrpdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LessonReservationPreferredDateGroupBy{build: lrpdq}
	grbuild.flds = &lrpdq.ctx.Fields
	grbuild.label = lessonreservationpreferreddate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LessonReservationPreferredDate.Query().
//		Select(lessonreservationpreferreddate.FieldCreatedAt).
//		Scan(ctx, &v)
func (lrpdq *LessonReservationPreferredDateQuery) Select(fields ...string) *LessonReservationPreferredDateSelect {
	lrpdq.ctx.Fields = append(lrpdq.ctx.Fields, fields...)
	sbuild := &LessonReservationPreferredDateSelect{LessonReservationPreferredDateQuery: lrpdq}
	sbuild.label = lessonreservationpreferreddate.Label
	sbuild.flds, sbuild.scan = &lrpdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LessonReservationPreferredDateSelect configured with the given aggregations.
func (lrpdq *LessonReservationPreferredDateQuery) Aggregate(fns ...AggregateFunc) *LessonReservationPreferredDateSelect {
	return lrpdq.Select().Aggregate(fns...)
}

func (lrpdq *LessonReservationPreferredDateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lrpdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lrpdq); err != nil {
				return err
			}
		}
	}
	for _, f := range lrpdq.ctx.Fields {
		if !lessonreservationpreferreddate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lrpdq.path != nil {
		prev, err := lrpdq.path(ctx)
		if err != nil {
			return err
		}
		lrpdq.sql = prev
	}
	return nil
}

func (lrpdq *LessonReservationPreferredDateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LessonReservationPreferredDate, error) {
	var (
		nodes       = []*LessonReservationPreferredDate{}
		_spec       = lrpdq.querySpec()
		loadedTypes = [1]bool{
			lrpdq.withLessonReservations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LessonReservationPreferredDate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LessonReservationPreferredDate{config: lrpdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lrpdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lrpdq.withLessonReservations; query != nil {
		if err := lrpdq.loadLessonReservations(ctx, query, nodes, nil,
			func(n *LessonReservationPreferredDate, e *LessonReservation) { n.Edges.LessonReservations = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lrpdq *LessonReservationPreferredDateQuery) loadLessonReservations(ctx context.Context, query *LessonReservationQuery, nodes []*LessonReservationPreferredDate, init func(*LessonReservationPreferredDate), assign func(*LessonReservationPreferredDate, *LessonReservation)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LessonReservationPreferredDate)
	for i := range nodes {
		fk := nodes[i].LessonReservationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lessonreservation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lesson_reservation_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lrpdq *LessonReservationPreferredDateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lrpdq.querySpec()
	_spec.Node.Columns = lrpdq.ctx.Fields
	if len(lrpdq.ctx.Fields) > 0 {
		_spec.Unique = lrpdq.ctx.Unique != nil && *lrpdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lrpdq.driver, _spec)
}

func (lrpdq *LessonReservationPreferredDateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lessonreservationpreferreddate.Table, lessonreservationpreferreddate.Columns, sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt))
	_spec.From = lrpdq.sql
	if unique := lrpdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lrpdq.path != nil {
		_spec.Unique = true
	}
	if fields := lrpdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonreservationpreferreddate.FieldID)
		for i := range fields {
			if fields[i] != lessonreservationpreferreddate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lrpdq.withLessonReservations != nil {
			_spec.Node.AddColumnOnce(lessonreservationpreferreddate.FieldLessonReservationID)
		}
	}
	if ps := lrpdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lrpdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lrpdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lrpdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lrpdq *LessonReservationPreferredDateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lrpdq.driver.Dialect())
	t1 := builder.Table(lessonreservationpreferreddate.Table)
	columns := lrpdq.ctx.Fields
	if len(columns) == 0 {
		columns = lessonreservationpreferreddate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lrpdq.sql != nil {
		selector = lrpdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lrpdq.ctx.Unique != nil && *lrpdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lrpdq.predicates {
		p(selector)
	}
	for _, p := range lrpdq.order {
		p(selector)
	}
	if offset := lrpdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lrpdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LessonReservationPreferredDateGroupBy is the group-by builder for LessonReservationPreferredDate entities.
type LessonReservationPreferredDateGroupBy struct {
	selector
	build *LessonReservationPreferredDateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lrpdgb *LessonReservationPreferredDateGroupBy) Aggregate(fns ...AggregateFunc) *LessonReservationPreferredDateGroupBy {
	lrpdgb.fns = append(lrpdgb.fns, fns...)
	return lrpdgb
}

// Scan applies the selector query and scans the result into the given value.
func (lrpdgb *LessonReservationPreferredDateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lrpdgb.build.ctx, ent.OpQueryGroupBy)
	if err := lrpdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonReservationPreferredDateQuery, *LessonReservationPreferredDateGroupBy](ctx, lrpdgb.build, lrpdgb, lrpdgb.build.inters, v)
}

func (lrpdgb *LessonReservationPreferredDateGroupBy) sqlScan(ctx context.Context, root *LessonReservationPreferredDateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lrpdgb.fns))
	for _, fn := range lrpdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lrpdgb.flds)+len(lrpdgb.fns))
		for _, f := range *lrpdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lrpdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lrpdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LessonReservationPreferredDateSelect is the builder for selecting fields of LessonReservationPreferredDate entities.
type LessonReservationPreferredDateSelect struct {
	*LessonReservationPreferredDateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lrpds *LessonReservationPreferredDateSelect) Aggregate(fns ...AggregateFunc) *LessonReservationPreferredDateSelect {
	lrpds.fns = append(lrpds.fns, fns...)
	return lrpds
}

// Scan applies the selector query and scans the result into the given value.
func (lrpds *LessonReservationPreferredDateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lrpds.ctx, ent.OpQuerySelect)
	if err := lrpds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonReservationPreferredDateQuery, *LessonReservationPreferredDateSelect](ctx, lrpds.LessonReservationPreferredDateQuery, lrpds, lrpds.inters, v)
}

func (lrpds *LessonReservationPreferredDateSelect) sqlScan(ctx context.Context, root *LessonReservationPreferredDateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lrpds.fns))
	for _, fn := range lrpds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lrpds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lrpds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
