// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
)

// EducationCategory is the model entity for the EducationCategory schema.
type EducationCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EducationCategoryQuery when eager-loading is set.
	Edges                                EducationCategoryEdges `json:"edges"`
	lesson_schedule_education_categories *int
	selectValues                         sql.SelectValues
}

// EducationCategoryEdges holds the relations/edges for other nodes in the graph.
type EducationCategoryEdges struct {
	// LessonPlans holds the value of the lesson_plans edge.
	LessonPlans []*LessonPlan `json:"lesson_plans,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LessonPlansOrErr returns the LessonPlans value or an error if the edge
// was not loaded in eager-loading.
func (e EducationCategoryEdges) LessonPlansOrErr() ([]*LessonPlan, error) {
	if e.loadedTypes[0] {
		return e.LessonPlans, nil
	}
	return nil, &NotLoadedError{edge: "lesson_plans"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EducationCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case educationcategory.FieldID:
			values[i] = new(sql.NullInt64)
		case educationcategory.FieldName, educationcategory.FieldCode:
			values[i] = new(sql.NullString)
		case educationcategory.FieldCreatedAt, educationcategory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case educationcategory.ForeignKeys[0]: // lesson_schedule_education_categories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EducationCategory fields.
func (ec *EducationCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case educationcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int(value.Int64)
		case educationcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ec.CreatedAt = value.Time
			}
		case educationcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ec.UpdatedAt = value.Time
			}
		case educationcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ec.Name = value.String
			}
		case educationcategory.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ec.Code = value.String
			}
		case educationcategory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field lesson_schedule_education_categories", value)
			} else if value.Valid {
				ec.lesson_schedule_education_categories = new(int)
				*ec.lesson_schedule_education_categories = int(value.Int64)
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EducationCategory.
// This includes values selected through modifiers, order, etc.
func (ec *EducationCategory) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryLessonPlans queries the "lesson_plans" edge of the EducationCategory entity.
func (ec *EducationCategory) QueryLessonPlans() *LessonPlanQuery {
	return NewEducationCategoryClient(ec.config).QueryLessonPlans(ec)
}

// Update returns a builder for updating this EducationCategory.
// Note that you need to call EducationCategory.Unwrap() before calling this method if this EducationCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EducationCategory) Update() *EducationCategoryUpdateOne {
	return NewEducationCategoryClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EducationCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EducationCategory) Unwrap() *EducationCategory {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EducationCategory is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EducationCategory) String() string {
	var builder strings.Builder
	builder.WriteString("EducationCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ec.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ec.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ec.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(ec.Code)
	builder.WriteByte(')')
	return builder.String()
}

// EducationCategories is a parsable slice of EducationCategory.
type EducationCategories []*EducationCategory
