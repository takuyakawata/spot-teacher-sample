// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
)

// LessonReservationPreferredDate is the model entity for the LessonReservationPreferredDate schema.
type LessonReservationPreferredDate struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LessonReservationID holds the value of the "lesson_reservation_id" field.
	LessonReservationID int64 `json:"lesson_reservation_id,omitempty"`
	// 希望日時の優先順位
	Priority lessonreservationpreferreddate.Priority `json:"priority,omitempty"`
	// 希望日
	Date time.Time `json:"date,omitempty"`
	// 希望開始時間
	StartTime time.Time `json:"start_time,omitempty"`
	// 希望終了時間
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonReservationPreferredDateQuery when eager-loading is set.
	Edges        LessonReservationPreferredDateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonReservationPreferredDateEdges holds the relations/edges for other nodes in the graph.
type LessonReservationPreferredDateEdges struct {
	// LessonReservations holds the value of the lessonReservations edge.
	LessonReservations *LessonReservation `json:"lessonReservations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LessonReservationsOrErr returns the LessonReservations value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonReservationPreferredDateEdges) LessonReservationsOrErr() (*LessonReservation, error) {
	if e.LessonReservations != nil {
		return e.LessonReservations, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonreservation.Label}
	}
	return nil, &NotLoadedError{edge: "lessonReservations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonReservationPreferredDate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonreservationpreferreddate.FieldID, lessonreservationpreferreddate.FieldLessonReservationID:
			values[i] = new(sql.NullInt64)
		case lessonreservationpreferreddate.FieldPriority:
			values[i] = new(sql.NullString)
		case lessonreservationpreferreddate.FieldCreatedAt, lessonreservationpreferreddate.FieldUpdatedAt, lessonreservationpreferreddate.FieldDate, lessonreservationpreferreddate.FieldStartTime, lessonreservationpreferreddate.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonReservationPreferredDate fields.
func (lrpd *LessonReservationPreferredDate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonreservationpreferreddate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lrpd.ID = int64(value.Int64)
		case lessonreservationpreferreddate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lrpd.CreatedAt = value.Time
			}
		case lessonreservationpreferreddate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lrpd.UpdatedAt = value.Time
			}
		case lessonreservationpreferreddate.FieldLessonReservationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_reservation_id", values[i])
			} else if value.Valid {
				lrpd.LessonReservationID = value.Int64
			}
		case lessonreservationpreferreddate.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				lrpd.Priority = lessonreservationpreferreddate.Priority(value.String)
			}
		case lessonreservationpreferreddate.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				lrpd.Date = value.Time
			}
		case lessonreservationpreferreddate.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				lrpd.StartTime = value.Time
			}
		case lessonreservationpreferreddate.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				lrpd.EndTime = value.Time
			}
		default:
			lrpd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonReservationPreferredDate.
// This includes values selected through modifiers, order, etc.
func (lrpd *LessonReservationPreferredDate) Value(name string) (ent.Value, error) {
	return lrpd.selectValues.Get(name)
}

// QueryLessonReservations queries the "lessonReservations" edge of the LessonReservationPreferredDate entity.
func (lrpd *LessonReservationPreferredDate) QueryLessonReservations() *LessonReservationQuery {
	return NewLessonReservationPreferredDateClient(lrpd.config).QueryLessonReservations(lrpd)
}

// Update returns a builder for updating this LessonReservationPreferredDate.
// Note that you need to call LessonReservationPreferredDate.Unwrap() before calling this method if this LessonReservationPreferredDate
// was returned from a transaction, and the transaction was committed or rolled back.
func (lrpd *LessonReservationPreferredDate) Update() *LessonReservationPreferredDateUpdateOne {
	return NewLessonReservationPreferredDateClient(lrpd.config).UpdateOne(lrpd)
}

// Unwrap unwraps the LessonReservationPreferredDate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lrpd *LessonReservationPreferredDate) Unwrap() *LessonReservationPreferredDate {
	_tx, ok := lrpd.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonReservationPreferredDate is not a transactional entity")
	}
	lrpd.config.driver = _tx.drv
	return lrpd
}

// String implements the fmt.Stringer.
func (lrpd *LessonReservationPreferredDate) String() string {
	var builder strings.Builder
	builder.WriteString("LessonReservationPreferredDate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lrpd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(lrpd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lrpd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lesson_reservation_id=")
	builder.WriteString(fmt.Sprintf("%v", lrpd.LessonReservationID))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", lrpd.Priority))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(lrpd.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(lrpd.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(lrpd.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LessonReservationPreferredDates is a parsable slice of LessonReservationPreferredDate.
type LessonReservationPreferredDates []*LessonReservationPreferredDate
