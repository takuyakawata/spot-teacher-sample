// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplansubject"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonPlanSubjectDelete is the builder for deleting a LessonPlanSubject entity.
type LessonPlanSubjectDelete struct {
	config
	hooks    []Hook
	mutation *LessonPlanSubjectMutation
}

// Where appends a list predicates to the LessonPlanSubjectDelete builder.
func (lpsd *LessonPlanSubjectDelete) Where(ps ...predicate.LessonPlanSubject) *LessonPlanSubjectDelete {
	lpsd.mutation.Where(ps...)
	return lpsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lpsd *LessonPlanSubjectDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lpsd.sqlExec, lpsd.mutation, lpsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsd *LessonPlanSubjectDelete) ExecX(ctx context.Context) int {
	n, err := lpsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lpsd *LessonPlanSubjectDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lessonplansubject.Table, sqlgraph.NewFieldSpec(lessonplansubject.FieldID, field.TypeInt64))
	if ps := lpsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lpsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lpsd.mutation.done = true
	return affected, err
}

// LessonPlanSubjectDeleteOne is the builder for deleting a single LessonPlanSubject entity.
type LessonPlanSubjectDeleteOne struct {
	lpsd *LessonPlanSubjectDelete
}

// Where appends a list predicates to the LessonPlanSubjectDelete builder.
func (lpsdo *LessonPlanSubjectDeleteOne) Where(ps ...predicate.LessonPlanSubject) *LessonPlanSubjectDeleteOne {
	lpsdo.lpsd.mutation.Where(ps...)
	return lpsdo
}

// Exec executes the deletion query.
func (lpsdo *LessonPlanSubjectDeleteOne) Exec(ctx context.Context) error {
	n, err := lpsdo.lpsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lessonplansubject.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsdo *LessonPlanSubjectDeleteOne) ExecX(ctx context.Context) {
	if err := lpsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
