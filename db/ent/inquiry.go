// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/inquiry"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// Inquiry is the model entity for the Inquiry schema.
type Inquiry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LessonScheduleID holds the value of the "lesson_schedule_id" field.
	LessonScheduleID int `json:"lesson_schedule_id,omitempty"`
	// SchoolID holds the value of the "school_id" field.
	SchoolID int `json:"school_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Category holds the value of the "category" field.
	Category inquiry.Category `json:"category,omitempty"`
	// InquiryDetail holds the value of the "inquiry_detail" field.
	InquiryDetail string `json:"inquiry_detail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InquiryQuery when eager-loading is set.
	Edges        InquiryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InquiryEdges holds the relations/edges for other nodes in the graph.
type InquiryEdges struct {
	// Lesson holds the value of the lesson edge.
	Lesson *LessonPlan `json:"lesson,omitempty"`
	// School holds the value of the school edge.
	School *School `json:"school,omitempty"`
	// Teacher holds the value of the teacher edge.
	Teacher *User `json:"teacher,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// LessonOrErr returns the Lesson value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InquiryEdges) LessonOrErr() (*LessonPlan, error) {
	if e.Lesson != nil {
		return e.Lesson, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonplan.Label}
	}
	return nil, &NotLoadedError{edge: "lesson"}
}

// SchoolOrErr returns the School value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InquiryEdges) SchoolOrErr() (*School, error) {
	if e.School != nil {
		return e.School, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: school.Label}
	}
	return nil, &NotLoadedError{edge: "school"}
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InquiryEdges) TeacherOrErr() (*User, error) {
	if e.Teacher != nil {
		return e.Teacher, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inquiry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inquiry.FieldID, inquiry.FieldLessonScheduleID, inquiry.FieldSchoolID, inquiry.FieldUserID:
			values[i] = new(sql.NullInt64)
		case inquiry.FieldCategory, inquiry.FieldInquiryDetail:
			values[i] = new(sql.NullString)
		case inquiry.FieldCreatedAt, inquiry.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inquiry fields.
func (i *Inquiry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inquiry.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case inquiry.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case inquiry.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case inquiry.FieldLessonScheduleID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_schedule_id", values[j])
			} else if value.Valid {
				i.LessonScheduleID = int(value.Int64)
			}
		case inquiry.FieldSchoolID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field school_id", values[j])
			} else if value.Valid {
				i.SchoolID = int(value.Int64)
			}
		case inquiry.FieldUserID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[j])
			} else if value.Valid {
				i.UserID = int(value.Int64)
			}
		case inquiry.FieldCategory:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[j])
			} else if value.Valid {
				i.Category = inquiry.Category(value.String)
			}
		case inquiry.FieldInquiryDetail:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inquiry_detail", values[j])
			} else if value.Valid {
				i.InquiryDetail = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Inquiry.
// This includes values selected through modifiers, order, etc.
func (i *Inquiry) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryLesson queries the "lesson" edge of the Inquiry entity.
func (i *Inquiry) QueryLesson() *LessonPlanQuery {
	return NewInquiryClient(i.config).QueryLesson(i)
}

// QuerySchool queries the "school" edge of the Inquiry entity.
func (i *Inquiry) QuerySchool() *SchoolQuery {
	return NewInquiryClient(i.config).QuerySchool(i)
}

// QueryTeacher queries the "teacher" edge of the Inquiry entity.
func (i *Inquiry) QueryTeacher() *UserQuery {
	return NewInquiryClient(i.config).QueryTeacher(i)
}

// Update returns a builder for updating this Inquiry.
// Note that you need to call Inquiry.Unwrap() before calling this method if this Inquiry
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inquiry) Update() *InquiryUpdateOne {
	return NewInquiryClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Inquiry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inquiry) Unwrap() *Inquiry {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Inquiry is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inquiry) String() string {
	var builder strings.Builder
	builder.WriteString("Inquiry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lesson_schedule_id=")
	builder.WriteString(fmt.Sprintf("%v", i.LessonScheduleID))
	builder.WriteString(", ")
	builder.WriteString("school_id=")
	builder.WriteString(fmt.Sprintf("%v", i.SchoolID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", i.UserID))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", i.Category))
	builder.WriteString(", ")
	builder.WriteString("inquiry_detail=")
	builder.WriteString(i.InquiryDetail)
	builder.WriteByte(')')
	return builder.String()
}

// Inquiries is a parsable slice of Inquiry.
type Inquiries []*Inquiry
