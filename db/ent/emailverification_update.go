// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/emailverification"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// EmailVerificationUpdate is the builder for updating EmailVerification entities.
type EmailVerificationUpdate struct {
	config
	hooks    []Hook
	mutation *EmailVerificationMutation
}

// Where appends a list predicates to the EmailVerificationUpdate builder.
func (evu *EmailVerificationUpdate) Where(ps ...predicate.EmailVerification) *EmailVerificationUpdate {
	evu.mutation.Where(ps...)
	return evu
}

// SetUpdateTime sets the "update_time" field.
func (evu *EmailVerificationUpdate) SetUpdateTime(t time.Time) *EmailVerificationUpdate {
	evu.mutation.SetUpdateTime(t)
	return evu
}

// SetEmail sets the "email" field.
func (evu *EmailVerificationUpdate) SetEmail(s string) *EmailVerificationUpdate {
	evu.mutation.SetEmail(s)
	return evu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evu *EmailVerificationUpdate) SetNillableEmail(s *string) *EmailVerificationUpdate {
	if s != nil {
		evu.SetEmail(*s)
	}
	return evu
}

// SetToken sets the "token" field.
func (evu *EmailVerificationUpdate) SetToken(s string) *EmailVerificationUpdate {
	evu.mutation.SetToken(s)
	return evu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evu *EmailVerificationUpdate) SetNillableToken(s *string) *EmailVerificationUpdate {
	if s != nil {
		evu.SetToken(*s)
	}
	return evu
}

// SetExpiredAt sets the "expired_at" field.
func (evu *EmailVerificationUpdate) SetExpiredAt(t time.Time) *EmailVerificationUpdate {
	evu.mutation.SetExpiredAt(t)
	return evu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (evu *EmailVerificationUpdate) SetNillableExpiredAt(t *time.Time) *EmailVerificationUpdate {
	if t != nil {
		evu.SetExpiredAt(*t)
	}
	return evu
}

// Mutation returns the EmailVerificationMutation object of the builder.
func (evu *EmailVerificationUpdate) Mutation() *EmailVerificationMutation {
	return evu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (evu *EmailVerificationUpdate) Save(ctx context.Context) (int, error) {
	evu.defaults()
	return withHooks(ctx, evu.sqlSave, evu.mutation, evu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evu *EmailVerificationUpdate) SaveX(ctx context.Context) int {
	affected, err := evu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (evu *EmailVerificationUpdate) Exec(ctx context.Context) error {
	_, err := evu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evu *EmailVerificationUpdate) ExecX(ctx context.Context) {
	if err := evu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evu *EmailVerificationUpdate) defaults() {
	if _, ok := evu.mutation.UpdateTime(); !ok {
		v := emailverification.UpdateDefaultUpdateTime()
		evu.mutation.SetUpdateTime(v)
	}
}

func (evu *EmailVerificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(emailverification.Table, emailverification.Columns, sqlgraph.NewFieldSpec(emailverification.FieldID, field.TypeInt))
	if ps := evu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := evu.mutation.UpdateTime(); ok {
		_spec.SetField(emailverification.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := evu.mutation.Email(); ok {
		_spec.SetField(emailverification.FieldEmail, field.TypeString, value)
	}
	if value, ok := evu.mutation.Token(); ok {
		_spec.SetField(emailverification.FieldToken, field.TypeString, value)
	}
	if value, ok := evu.mutation.ExpiredAt(); ok {
		_spec.SetField(emailverification.FieldExpiredAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, evu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	evu.mutation.done = true
	return n, nil
}

// EmailVerificationUpdateOne is the builder for updating a single EmailVerification entity.
type EmailVerificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailVerificationMutation
}

// SetUpdateTime sets the "update_time" field.
func (evuo *EmailVerificationUpdateOne) SetUpdateTime(t time.Time) *EmailVerificationUpdateOne {
	evuo.mutation.SetUpdateTime(t)
	return evuo
}

// SetEmail sets the "email" field.
func (evuo *EmailVerificationUpdateOne) SetEmail(s string) *EmailVerificationUpdateOne {
	evuo.mutation.SetEmail(s)
	return evuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evuo *EmailVerificationUpdateOne) SetNillableEmail(s *string) *EmailVerificationUpdateOne {
	if s != nil {
		evuo.SetEmail(*s)
	}
	return evuo
}

// SetToken sets the "token" field.
func (evuo *EmailVerificationUpdateOne) SetToken(s string) *EmailVerificationUpdateOne {
	evuo.mutation.SetToken(s)
	return evuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evuo *EmailVerificationUpdateOne) SetNillableToken(s *string) *EmailVerificationUpdateOne {
	if s != nil {
		evuo.SetToken(*s)
	}
	return evuo
}

// SetExpiredAt sets the "expired_at" field.
func (evuo *EmailVerificationUpdateOne) SetExpiredAt(t time.Time) *EmailVerificationUpdateOne {
	evuo.mutation.SetExpiredAt(t)
	return evuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (evuo *EmailVerificationUpdateOne) SetNillableExpiredAt(t *time.Time) *EmailVerificationUpdateOne {
	if t != nil {
		evuo.SetExpiredAt(*t)
	}
	return evuo
}

// Mutation returns the EmailVerificationMutation object of the builder.
func (evuo *EmailVerificationUpdateOne) Mutation() *EmailVerificationMutation {
	return evuo.mutation
}

// Where appends a list predicates to the EmailVerificationUpdate builder.
func (evuo *EmailVerificationUpdateOne) Where(ps ...predicate.EmailVerification) *EmailVerificationUpdateOne {
	evuo.mutation.Where(ps...)
	return evuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (evuo *EmailVerificationUpdateOne) Select(field string, fields ...string) *EmailVerificationUpdateOne {
	evuo.fields = append([]string{field}, fields...)
	return evuo
}

// Save executes the query and returns the updated EmailVerification entity.
func (evuo *EmailVerificationUpdateOne) Save(ctx context.Context) (*EmailVerification, error) {
	evuo.defaults()
	return withHooks(ctx, evuo.sqlSave, evuo.mutation, evuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evuo *EmailVerificationUpdateOne) SaveX(ctx context.Context) *EmailVerification {
	node, err := evuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (evuo *EmailVerificationUpdateOne) Exec(ctx context.Context) error {
	_, err := evuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evuo *EmailVerificationUpdateOne) ExecX(ctx context.Context) {
	if err := evuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evuo *EmailVerificationUpdateOne) defaults() {
	if _, ok := evuo.mutation.UpdateTime(); !ok {
		v := emailverification.UpdateDefaultUpdateTime()
		evuo.mutation.SetUpdateTime(v)
	}
}

func (evuo *EmailVerificationUpdateOne) sqlSave(ctx context.Context) (_node *EmailVerification, err error) {
	_spec := sqlgraph.NewUpdateSpec(emailverification.Table, emailverification.Columns, sqlgraph.NewFieldSpec(emailverification.FieldID, field.TypeInt))
	id, ok := evuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailVerification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := evuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailverification.FieldID)
		for _, f := range fields {
			if !emailverification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailverification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := evuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := evuo.mutation.UpdateTime(); ok {
		_spec.SetField(emailverification.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := evuo.mutation.Email(); ok {
		_spec.SetField(emailverification.FieldEmail, field.TypeString, value)
	}
	if value, ok := evuo.mutation.Token(); ok {
		_spec.SetField(emailverification.FieldToken, field.TypeString, value)
	}
	if value, ok := evuo.mutation.ExpiredAt(); ok {
		_spec.SetField(emailverification.FieldExpiredAt, field.TypeTime, value)
	}
	_node = &EmailVerification{config: evuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, evuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	evuo.mutation.done = true
	return _node, nil
}
