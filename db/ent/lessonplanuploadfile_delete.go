// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplanuploadfile"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonPlanUploadFileDelete is the builder for deleting a LessonPlanUploadFile entity.
type LessonPlanUploadFileDelete struct {
	config
	hooks    []Hook
	mutation *LessonPlanUploadFileMutation
}

// Where appends a list predicates to the LessonPlanUploadFileDelete builder.
func (lpufd *LessonPlanUploadFileDelete) Where(ps ...predicate.LessonPlanUploadFile) *LessonPlanUploadFileDelete {
	lpufd.mutation.Where(ps...)
	return lpufd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lpufd *LessonPlanUploadFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lpufd.sqlExec, lpufd.mutation, lpufd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lpufd *LessonPlanUploadFileDelete) ExecX(ctx context.Context) int {
	n, err := lpufd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lpufd *LessonPlanUploadFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lessonplanuploadfile.Table, sqlgraph.NewFieldSpec(lessonplanuploadfile.FieldID, field.TypeInt64))
	if ps := lpufd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lpufd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lpufd.mutation.done = true
	return affected, err
}

// LessonPlanUploadFileDeleteOne is the builder for deleting a single LessonPlanUploadFile entity.
type LessonPlanUploadFileDeleteOne struct {
	lpufd *LessonPlanUploadFileDelete
}

// Where appends a list predicates to the LessonPlanUploadFileDelete builder.
func (lpufdo *LessonPlanUploadFileDeleteOne) Where(ps ...predicate.LessonPlanUploadFile) *LessonPlanUploadFileDeleteOne {
	lpufdo.lpufd.mutation.Where(ps...)
	return lpufdo
}

// Exec executes the deletion query.
func (lpufdo *LessonPlanUploadFileDeleteOne) Exec(ctx context.Context) error {
	n, err := lpufdo.lpufd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lessonplanuploadfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lpufdo *LessonPlanUploadFileDeleteOne) ExecX(ctx context.Context) {
	if err := lpufdo.Exec(ctx); err != nil {
		panic(err)
	}
}
