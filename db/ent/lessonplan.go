// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/company"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
)

// LessonPlan is the model entity for the LessonPlan schema.
type LessonPlan struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CompanyID holds the value of the "company_id" field.
	CompanyID int64 `json:"company_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// LessonType holds the value of the "lesson_type" field.
	LessonType lessonplan.LessonType `json:"lesson_type,omitempty"`
	// 年間可能実施回数
	AnnualMaxExecutions int `json:"annual_max_executions,omitempty"`
	// StartMonth holds the value of the "start_month" field.
	StartMonth int `json:"start_month,omitempty"`
	// StartDay holds the value of the "start_day" field.
	StartDay int `json:"start_day,omitempty"`
	// EndMonth holds the value of the "end_month" field.
	EndMonth int `json:"end_month,omitempty"`
	// EndDay holds the value of the "end_day" field.
	EndDay int `json:"end_day,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonPlanQuery when eager-loading is set.
	Edges        LessonPlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonPlanEdges holds the relations/edges for other nodes in the graph.
type LessonPlanEdges struct {
	// Schedules holds the value of the schedules edge.
	Schedules []*LessonSchedule `json:"schedules,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Grades holds the value of the grades edge.
	Grades []*Grade `json:"grades,omitempty"`
	// Subjects holds the value of the subjects edge.
	Subjects []*Subject `json:"subjects,omitempty"`
	// EducationCategories holds the value of the education_categories edge.
	EducationCategories []*EducationCategory `json:"education_categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e LessonPlanEdges) SchedulesOrErr() ([]*LessonSchedule, error) {
	if e.loadedTypes[0] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonPlanEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// GradesOrErr returns the Grades value or an error if the edge
// was not loaded in eager-loading.
func (e LessonPlanEdges) GradesOrErr() ([]*Grade, error) {
	if e.loadedTypes[2] {
		return e.Grades, nil
	}
	return nil, &NotLoadedError{edge: "grades"}
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e LessonPlanEdges) SubjectsOrErr() ([]*Subject, error) {
	if e.loadedTypes[3] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// EducationCategoriesOrErr returns the EducationCategories value or an error if the edge
// was not loaded in eager-loading.
func (e LessonPlanEdges) EducationCategoriesOrErr() ([]*EducationCategory, error) {
	if e.loadedTypes[4] {
		return e.EducationCategories, nil
	}
	return nil, &NotLoadedError{edge: "education_categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonPlan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonplan.FieldID, lessonplan.FieldCompanyID, lessonplan.FieldAnnualMaxExecutions, lessonplan.FieldStartMonth, lessonplan.FieldStartDay, lessonplan.FieldEndMonth, lessonplan.FieldEndDay:
			values[i] = new(sql.NullInt64)
		case lessonplan.FieldTitle, lessonplan.FieldDescription, lessonplan.FieldLocation, lessonplan.FieldLessonType:
			values[i] = new(sql.NullString)
		case lessonplan.FieldStartTime, lessonplan.FieldEndTime, lessonplan.FieldUpdatedAt, lessonplan.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonPlan fields.
func (lp *LessonPlan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonplan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lp.ID = int64(value.Int64)
		case lessonplan.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				lp.CompanyID = value.Int64
			}
		case lessonplan.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				lp.Title = value.String
			}
		case lessonplan.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				lp.Description = value.String
			}
		case lessonplan.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				lp.Location = value.String
			}
		case lessonplan.FieldLessonType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_type", values[i])
			} else if value.Valid {
				lp.LessonType = lessonplan.LessonType(value.String)
			}
		case lessonplan.FieldAnnualMaxExecutions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field annual_max_executions", values[i])
			} else if value.Valid {
				lp.AnnualMaxExecutions = int(value.Int64)
			}
		case lessonplan.FieldStartMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_month", values[i])
			} else if value.Valid {
				lp.StartMonth = int(value.Int64)
			}
		case lessonplan.FieldStartDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_day", values[i])
			} else if value.Valid {
				lp.StartDay = int(value.Int64)
			}
		case lessonplan.FieldEndMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_month", values[i])
			} else if value.Valid {
				lp.EndMonth = int(value.Int64)
			}
		case lessonplan.FieldEndDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_day", values[i])
			} else if value.Valid {
				lp.EndDay = int(value.Int64)
			}
		case lessonplan.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				lp.StartTime = value.Time
			}
		case lessonplan.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				lp.EndTime = value.Time
			}
		case lessonplan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lp.UpdatedAt = value.Time
			}
		case lessonplan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lp.CreatedAt = value.Time
			}
		default:
			lp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonPlan.
// This includes values selected through modifiers, order, etc.
func (lp *LessonPlan) Value(name string) (ent.Value, error) {
	return lp.selectValues.Get(name)
}

// QuerySchedules queries the "schedules" edge of the LessonPlan entity.
func (lp *LessonPlan) QuerySchedules() *LessonScheduleQuery {
	return NewLessonPlanClient(lp.config).QuerySchedules(lp)
}

// QueryCompany queries the "company" edge of the LessonPlan entity.
func (lp *LessonPlan) QueryCompany() *CompanyQuery {
	return NewLessonPlanClient(lp.config).QueryCompany(lp)
}

// QueryGrades queries the "grades" edge of the LessonPlan entity.
func (lp *LessonPlan) QueryGrades() *GradeQuery {
	return NewLessonPlanClient(lp.config).QueryGrades(lp)
}

// QuerySubjects queries the "subjects" edge of the LessonPlan entity.
func (lp *LessonPlan) QuerySubjects() *SubjectQuery {
	return NewLessonPlanClient(lp.config).QuerySubjects(lp)
}

// QueryEducationCategories queries the "education_categories" edge of the LessonPlan entity.
func (lp *LessonPlan) QueryEducationCategories() *EducationCategoryQuery {
	return NewLessonPlanClient(lp.config).QueryEducationCategories(lp)
}

// Update returns a builder for updating this LessonPlan.
// Note that you need to call LessonPlan.Unwrap() before calling this method if this LessonPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (lp *LessonPlan) Update() *LessonPlanUpdateOne {
	return NewLessonPlanClient(lp.config).UpdateOne(lp)
}

// Unwrap unwraps the LessonPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lp *LessonPlan) Unwrap() *LessonPlan {
	_tx, ok := lp.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonPlan is not a transactional entity")
	}
	lp.config.driver = _tx.drv
	return lp
}

// String implements the fmt.Stringer.
func (lp *LessonPlan) String() string {
	var builder strings.Builder
	builder.WriteString("LessonPlan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lp.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", lp.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(lp.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(lp.Description)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(lp.Location)
	builder.WriteString(", ")
	builder.WriteString("lesson_type=")
	builder.WriteString(fmt.Sprintf("%v", lp.LessonType))
	builder.WriteString(", ")
	builder.WriteString("annual_max_executions=")
	builder.WriteString(fmt.Sprintf("%v", lp.AnnualMaxExecutions))
	builder.WriteString(", ")
	builder.WriteString("start_month=")
	builder.WriteString(fmt.Sprintf("%v", lp.StartMonth))
	builder.WriteString(", ")
	builder.WriteString("start_day=")
	builder.WriteString(fmt.Sprintf("%v", lp.StartDay))
	builder.WriteString(", ")
	builder.WriteString("end_month=")
	builder.WriteString(fmt.Sprintf("%v", lp.EndMonth))
	builder.WriteString(", ")
	builder.WriteString("end_day=")
	builder.WriteString(fmt.Sprintf("%v", lp.EndDay))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(lp.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(lp.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lp.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LessonPlans is a parsable slice of LessonPlan.
type LessonPlans []*LessonPlan
