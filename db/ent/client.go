// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/takuyakawta/spot-teacher-sample/db/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/company"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/emailverification"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/grade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/inquiry"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonconfirmation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/product"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/subject"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Company is the client for interacting with the Company builders.
	Company *CompanyClient
	// EducationCategory is the client for interacting with the EducationCategory builders.
	EducationCategory *EducationCategoryClient
	// EmailVerification is the client for interacting with the EmailVerification builders.
	EmailVerification *EmailVerificationClient
	// Grade is the client for interacting with the Grade builders.
	Grade *GradeClient
	// Inquiry is the client for interacting with the Inquiry builders.
	Inquiry *InquiryClient
	// LessonConfirmation is the client for interacting with the LessonConfirmation builders.
	LessonConfirmation *LessonConfirmationClient
	// LessonPlan is the client for interacting with the LessonPlan builders.
	LessonPlan *LessonPlanClient
	// LessonReservation is the client for interacting with the LessonReservation builders.
	LessonReservation *LessonReservationClient
	// LessonReservationPreferredDate is the client for interacting with the LessonReservationPreferredDate builders.
	LessonReservationPreferredDate *LessonReservationPreferredDateClient
	// LessonSchedule is the client for interacting with the LessonSchedule builders.
	LessonSchedule *LessonScheduleClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// School is the client for interacting with the School builders.
	School *SchoolClient
	// Subject is the client for interacting with the Subject builders.
	Subject *SubjectClient
	// UploadFile is the client for interacting with the UploadFile builders.
	UploadFile *UploadFileClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Company = NewCompanyClient(c.config)
	c.EducationCategory = NewEducationCategoryClient(c.config)
	c.EmailVerification = NewEmailVerificationClient(c.config)
	c.Grade = NewGradeClient(c.config)
	c.Inquiry = NewInquiryClient(c.config)
	c.LessonConfirmation = NewLessonConfirmationClient(c.config)
	c.LessonPlan = NewLessonPlanClient(c.config)
	c.LessonReservation = NewLessonReservationClient(c.config)
	c.LessonReservationPreferredDate = NewLessonReservationPreferredDateClient(c.config)
	c.LessonSchedule = NewLessonScheduleClient(c.config)
	c.Product = NewProductClient(c.config)
	c.School = NewSchoolClient(c.config)
	c.Subject = NewSubjectClient(c.config)
	c.UploadFile = NewUploadFileClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                            ctx,
		config:                         cfg,
		Company:                        NewCompanyClient(cfg),
		EducationCategory:              NewEducationCategoryClient(cfg),
		EmailVerification:              NewEmailVerificationClient(cfg),
		Grade:                          NewGradeClient(cfg),
		Inquiry:                        NewInquiryClient(cfg),
		LessonConfirmation:             NewLessonConfirmationClient(cfg),
		LessonPlan:                     NewLessonPlanClient(cfg),
		LessonReservation:              NewLessonReservationClient(cfg),
		LessonReservationPreferredDate: NewLessonReservationPreferredDateClient(cfg),
		LessonSchedule:                 NewLessonScheduleClient(cfg),
		Product:                        NewProductClient(cfg),
		School:                         NewSchoolClient(cfg),
		Subject:                        NewSubjectClient(cfg),
		UploadFile:                     NewUploadFileClient(cfg),
		User:                           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                            ctx,
		config:                         cfg,
		Company:                        NewCompanyClient(cfg),
		EducationCategory:              NewEducationCategoryClient(cfg),
		EmailVerification:              NewEmailVerificationClient(cfg),
		Grade:                          NewGradeClient(cfg),
		Inquiry:                        NewInquiryClient(cfg),
		LessonConfirmation:             NewLessonConfirmationClient(cfg),
		LessonPlan:                     NewLessonPlanClient(cfg),
		LessonReservation:              NewLessonReservationClient(cfg),
		LessonReservationPreferredDate: NewLessonReservationPreferredDateClient(cfg),
		LessonSchedule:                 NewLessonScheduleClient(cfg),
		Product:                        NewProductClient(cfg),
		School:                         NewSchoolClient(cfg),
		Subject:                        NewSubjectClient(cfg),
		UploadFile:                     NewUploadFileClient(cfg),
		User:                           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Company.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Company, c.EducationCategory, c.EmailVerification, c.Grade, c.Inquiry,
		c.LessonConfirmation, c.LessonPlan, c.LessonReservation,
		c.LessonReservationPreferredDate, c.LessonSchedule, c.Product, c.School,
		c.Subject, c.UploadFile, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Company, c.EducationCategory, c.EmailVerification, c.Grade, c.Inquiry,
		c.LessonConfirmation, c.LessonPlan, c.LessonReservation,
		c.LessonReservationPreferredDate, c.LessonSchedule, c.Product, c.School,
		c.Subject, c.UploadFile, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CompanyMutation:
		return c.Company.mutate(ctx, m)
	case *EducationCategoryMutation:
		return c.EducationCategory.mutate(ctx, m)
	case *EmailVerificationMutation:
		return c.EmailVerification.mutate(ctx, m)
	case *GradeMutation:
		return c.Grade.mutate(ctx, m)
	case *InquiryMutation:
		return c.Inquiry.mutate(ctx, m)
	case *LessonConfirmationMutation:
		return c.LessonConfirmation.mutate(ctx, m)
	case *LessonPlanMutation:
		return c.LessonPlan.mutate(ctx, m)
	case *LessonReservationMutation:
		return c.LessonReservation.mutate(ctx, m)
	case *LessonReservationPreferredDateMutation:
		return c.LessonReservationPreferredDate.mutate(ctx, m)
	case *LessonScheduleMutation:
		return c.LessonSchedule.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *SchoolMutation:
		return c.School.mutate(ctx, m)
	case *SubjectMutation:
		return c.Subject.mutate(ctx, m)
	case *UploadFileMutation:
		return c.UploadFile.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CompanyClient is a client for the Company schema.
type CompanyClient struct {
	config
}

// NewCompanyClient returns a client for the Company from the given config.
func NewCompanyClient(c config) *CompanyClient {
	return &CompanyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `company.Hooks(f(g(h())))`.
func (c *CompanyClient) Use(hooks ...Hook) {
	c.hooks.Company = append(c.hooks.Company, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `company.Intercept(f(g(h())))`.
func (c *CompanyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Company = append(c.inters.Company, interceptors...)
}

// Create returns a builder for creating a Company entity.
func (c *CompanyClient) Create() *CompanyCreate {
	mutation := newCompanyMutation(c.config, OpCreate)
	return &CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Company entities.
func (c *CompanyClient) CreateBulk(builders ...*CompanyCreate) *CompanyCreateBulk {
	return &CompanyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompanyClient) MapCreateBulk(slice any, setFunc func(*CompanyCreate, int)) *CompanyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompanyCreateBulk{err: fmt.Errorf("calling to CompanyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompanyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompanyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Company.
func (c *CompanyClient) Update() *CompanyUpdate {
	mutation := newCompanyMutation(c.config, OpUpdate)
	return &CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyClient) UpdateOne(co *Company) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompany(co))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyClient) UpdateOneID(id int) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompanyID(id))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Company.
func (c *CompanyClient) Delete() *CompanyDelete {
	mutation := newCompanyMutation(c.config, OpDelete)
	return &CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompanyClient) DeleteOne(co *Company) *CompanyDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompanyClient) DeleteOneID(id int) *CompanyDeleteOne {
	builder := c.Delete().Where(company.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDeleteOne{builder}
}

// Query returns a query builder for Company.
func (c *CompanyClient) Query() *CompanyQuery {
	return &CompanyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompany},
		inters: c.Interceptors(),
	}
}

// Get returns a Company entity by its id.
func (c *CompanyClient) Get(ctx context.Context, id int) (*Company, error) {
	return c.Query().Where(company.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyClient) GetX(ctx context.Context, id int) *Company {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonPlans queries the lesson_plans edge of a Company.
func (c *CompanyClient) QueryLessonPlans(co *Company) *LessonPlanQuery {
	query := (&LessonPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.LessonPlansTable, company.LessonPlansColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMembers queries the members edge of a Company.
func (c *CompanyClient) QueryMembers(co *Company) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.MembersTable, company.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyClient) Hooks() []Hook {
	return c.hooks.Company
}

// Interceptors returns the client interceptors.
func (c *CompanyClient) Interceptors() []Interceptor {
	return c.inters.Company
}

func (c *CompanyClient) mutate(ctx context.Context, m *CompanyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Company mutation op: %q", m.Op())
	}
}

// EducationCategoryClient is a client for the EducationCategory schema.
type EducationCategoryClient struct {
	config
}

// NewEducationCategoryClient returns a client for the EducationCategory from the given config.
func NewEducationCategoryClient(c config) *EducationCategoryClient {
	return &EducationCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `educationcategory.Hooks(f(g(h())))`.
func (c *EducationCategoryClient) Use(hooks ...Hook) {
	c.hooks.EducationCategory = append(c.hooks.EducationCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `educationcategory.Intercept(f(g(h())))`.
func (c *EducationCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.EducationCategory = append(c.inters.EducationCategory, interceptors...)
}

// Create returns a builder for creating a EducationCategory entity.
func (c *EducationCategoryClient) Create() *EducationCategoryCreate {
	mutation := newEducationCategoryMutation(c.config, OpCreate)
	return &EducationCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EducationCategory entities.
func (c *EducationCategoryClient) CreateBulk(builders ...*EducationCategoryCreate) *EducationCategoryCreateBulk {
	return &EducationCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EducationCategoryClient) MapCreateBulk(slice any, setFunc func(*EducationCategoryCreate, int)) *EducationCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EducationCategoryCreateBulk{err: fmt.Errorf("calling to EducationCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EducationCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EducationCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EducationCategory.
func (c *EducationCategoryClient) Update() *EducationCategoryUpdate {
	mutation := newEducationCategoryMutation(c.config, OpUpdate)
	return &EducationCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationCategoryClient) UpdateOne(ec *EducationCategory) *EducationCategoryUpdateOne {
	mutation := newEducationCategoryMutation(c.config, OpUpdateOne, withEducationCategory(ec))
	return &EducationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationCategoryClient) UpdateOneID(id int) *EducationCategoryUpdateOne {
	mutation := newEducationCategoryMutation(c.config, OpUpdateOne, withEducationCategoryID(id))
	return &EducationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EducationCategory.
func (c *EducationCategoryClient) Delete() *EducationCategoryDelete {
	mutation := newEducationCategoryMutation(c.config, OpDelete)
	return &EducationCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationCategoryClient) DeleteOne(ec *EducationCategory) *EducationCategoryDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationCategoryClient) DeleteOneID(id int) *EducationCategoryDeleteOne {
	builder := c.Delete().Where(educationcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationCategoryDeleteOne{builder}
}

// Query returns a query builder for EducationCategory.
func (c *EducationCategoryClient) Query() *EducationCategoryQuery {
	return &EducationCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducationCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a EducationCategory entity by its id.
func (c *EducationCategoryClient) Get(ctx context.Context, id int) (*EducationCategory, error) {
	return c.Query().Where(educationcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationCategoryClient) GetX(ctx context.Context, id int) *EducationCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonPlans queries the lesson_plans edge of a EducationCategory.
func (c *EducationCategoryClient) QueryLessonPlans(ec *EducationCategory) *LessonPlanQuery {
	query := (&LessonPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationcategory.Table, educationcategory.FieldID, id),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, educationcategory.LessonPlansTable, educationcategory.LessonPlansPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationCategoryClient) Hooks() []Hook {
	return c.hooks.EducationCategory
}

// Interceptors returns the client interceptors.
func (c *EducationCategoryClient) Interceptors() []Interceptor {
	return c.inters.EducationCategory
}

func (c *EducationCategoryClient) mutate(ctx context.Context, m *EducationCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EducationCategory mutation op: %q", m.Op())
	}
}

// EmailVerificationClient is a client for the EmailVerification schema.
type EmailVerificationClient struct {
	config
}

// NewEmailVerificationClient returns a client for the EmailVerification from the given config.
func NewEmailVerificationClient(c config) *EmailVerificationClient {
	return &EmailVerificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailverification.Hooks(f(g(h())))`.
func (c *EmailVerificationClient) Use(hooks ...Hook) {
	c.hooks.EmailVerification = append(c.hooks.EmailVerification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailverification.Intercept(f(g(h())))`.
func (c *EmailVerificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailVerification = append(c.inters.EmailVerification, interceptors...)
}

// Create returns a builder for creating a EmailVerification entity.
func (c *EmailVerificationClient) Create() *EmailVerificationCreate {
	mutation := newEmailVerificationMutation(c.config, OpCreate)
	return &EmailVerificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailVerification entities.
func (c *EmailVerificationClient) CreateBulk(builders ...*EmailVerificationCreate) *EmailVerificationCreateBulk {
	return &EmailVerificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailVerificationClient) MapCreateBulk(slice any, setFunc func(*EmailVerificationCreate, int)) *EmailVerificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailVerificationCreateBulk{err: fmt.Errorf("calling to EmailVerificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailVerificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailVerificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailVerification.
func (c *EmailVerificationClient) Update() *EmailVerificationUpdate {
	mutation := newEmailVerificationMutation(c.config, OpUpdate)
	return &EmailVerificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailVerificationClient) UpdateOne(ev *EmailVerification) *EmailVerificationUpdateOne {
	mutation := newEmailVerificationMutation(c.config, OpUpdateOne, withEmailVerification(ev))
	return &EmailVerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailVerificationClient) UpdateOneID(id int) *EmailVerificationUpdateOne {
	mutation := newEmailVerificationMutation(c.config, OpUpdateOne, withEmailVerificationID(id))
	return &EmailVerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailVerification.
func (c *EmailVerificationClient) Delete() *EmailVerificationDelete {
	mutation := newEmailVerificationMutation(c.config, OpDelete)
	return &EmailVerificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailVerificationClient) DeleteOne(ev *EmailVerification) *EmailVerificationDeleteOne {
	return c.DeleteOneID(ev.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailVerificationClient) DeleteOneID(id int) *EmailVerificationDeleteOne {
	builder := c.Delete().Where(emailverification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailVerificationDeleteOne{builder}
}

// Query returns a query builder for EmailVerification.
func (c *EmailVerificationClient) Query() *EmailVerificationQuery {
	return &EmailVerificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailVerification},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailVerification entity by its id.
func (c *EmailVerificationClient) Get(ctx context.Context, id int) (*EmailVerification, error) {
	return c.Query().Where(emailverification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailVerificationClient) GetX(ctx context.Context, id int) *EmailVerification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmailVerificationClient) Hooks() []Hook {
	return c.hooks.EmailVerification
}

// Interceptors returns the client interceptors.
func (c *EmailVerificationClient) Interceptors() []Interceptor {
	return c.inters.EmailVerification
}

func (c *EmailVerificationClient) mutate(ctx context.Context, m *EmailVerificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailVerificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailVerificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailVerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailVerificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmailVerification mutation op: %q", m.Op())
	}
}

// GradeClient is a client for the Grade schema.
type GradeClient struct {
	config
}

// NewGradeClient returns a client for the Grade from the given config.
func NewGradeClient(c config) *GradeClient {
	return &GradeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grade.Hooks(f(g(h())))`.
func (c *GradeClient) Use(hooks ...Hook) {
	c.hooks.Grade = append(c.hooks.Grade, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `grade.Intercept(f(g(h())))`.
func (c *GradeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Grade = append(c.inters.Grade, interceptors...)
}

// Create returns a builder for creating a Grade entity.
func (c *GradeClient) Create() *GradeCreate {
	mutation := newGradeMutation(c.config, OpCreate)
	return &GradeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Grade entities.
func (c *GradeClient) CreateBulk(builders ...*GradeCreate) *GradeCreateBulk {
	return &GradeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GradeClient) MapCreateBulk(slice any, setFunc func(*GradeCreate, int)) *GradeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GradeCreateBulk{err: fmt.Errorf("calling to GradeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GradeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GradeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Grade.
func (c *GradeClient) Update() *GradeUpdate {
	mutation := newGradeMutation(c.config, OpUpdate)
	return &GradeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GradeClient) UpdateOne(gr *Grade) *GradeUpdateOne {
	mutation := newGradeMutation(c.config, OpUpdateOne, withGrade(gr))
	return &GradeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GradeClient) UpdateOneID(id int) *GradeUpdateOne {
	mutation := newGradeMutation(c.config, OpUpdateOne, withGradeID(id))
	return &GradeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Grade.
func (c *GradeClient) Delete() *GradeDelete {
	mutation := newGradeMutation(c.config, OpDelete)
	return &GradeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GradeClient) DeleteOne(gr *Grade) *GradeDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GradeClient) DeleteOneID(id int) *GradeDeleteOne {
	builder := c.Delete().Where(grade.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GradeDeleteOne{builder}
}

// Query returns a query builder for Grade.
func (c *GradeClient) Query() *GradeQuery {
	return &GradeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGrade},
		inters: c.Interceptors(),
	}
}

// Get returns a Grade entity by its id.
func (c *GradeClient) Get(ctx context.Context, id int) (*Grade, error) {
	return c.Query().Where(grade.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GradeClient) GetX(ctx context.Context, id int) *Grade {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonPlans queries the lesson_plans edge of a Grade.
func (c *GradeClient) QueryLessonPlans(gr *Grade) *LessonPlanQuery {
	query := (&LessonPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grade.Table, grade.FieldID, id),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, grade.LessonPlansTable, grade.LessonPlansPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GradeClient) Hooks() []Hook {
	return c.hooks.Grade
}

// Interceptors returns the client interceptors.
func (c *GradeClient) Interceptors() []Interceptor {
	return c.inters.Grade
}

func (c *GradeClient) mutate(ctx context.Context, m *GradeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GradeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GradeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GradeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GradeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Grade mutation op: %q", m.Op())
	}
}

// InquiryClient is a client for the Inquiry schema.
type InquiryClient struct {
	config
}

// NewInquiryClient returns a client for the Inquiry from the given config.
func NewInquiryClient(c config) *InquiryClient {
	return &InquiryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inquiry.Hooks(f(g(h())))`.
func (c *InquiryClient) Use(hooks ...Hook) {
	c.hooks.Inquiry = append(c.hooks.Inquiry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inquiry.Intercept(f(g(h())))`.
func (c *InquiryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Inquiry = append(c.inters.Inquiry, interceptors...)
}

// Create returns a builder for creating a Inquiry entity.
func (c *InquiryClient) Create() *InquiryCreate {
	mutation := newInquiryMutation(c.config, OpCreate)
	return &InquiryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inquiry entities.
func (c *InquiryClient) CreateBulk(builders ...*InquiryCreate) *InquiryCreateBulk {
	return &InquiryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InquiryClient) MapCreateBulk(slice any, setFunc func(*InquiryCreate, int)) *InquiryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InquiryCreateBulk{err: fmt.Errorf("calling to InquiryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InquiryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InquiryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inquiry.
func (c *InquiryClient) Update() *InquiryUpdate {
	mutation := newInquiryMutation(c.config, OpUpdate)
	return &InquiryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InquiryClient) UpdateOne(i *Inquiry) *InquiryUpdateOne {
	mutation := newInquiryMutation(c.config, OpUpdateOne, withInquiry(i))
	return &InquiryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InquiryClient) UpdateOneID(id int) *InquiryUpdateOne {
	mutation := newInquiryMutation(c.config, OpUpdateOne, withInquiryID(id))
	return &InquiryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inquiry.
func (c *InquiryClient) Delete() *InquiryDelete {
	mutation := newInquiryMutation(c.config, OpDelete)
	return &InquiryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InquiryClient) DeleteOne(i *Inquiry) *InquiryDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InquiryClient) DeleteOneID(id int) *InquiryDeleteOne {
	builder := c.Delete().Where(inquiry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InquiryDeleteOne{builder}
}

// Query returns a query builder for Inquiry.
func (c *InquiryClient) Query() *InquiryQuery {
	return &InquiryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInquiry},
		inters: c.Interceptors(),
	}
}

// Get returns a Inquiry entity by its id.
func (c *InquiryClient) Get(ctx context.Context, id int) (*Inquiry, error) {
	return c.Query().Where(inquiry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InquiryClient) GetX(ctx context.Context, id int) *Inquiry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLesson queries the lesson edge of a Inquiry.
func (c *InquiryClient) QueryLesson(i *Inquiry) *LessonPlanQuery {
	query := (&LessonPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inquiry.Table, inquiry.FieldID, id),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inquiry.LessonTable, inquiry.LessonColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchool queries the school edge of a Inquiry.
func (c *InquiryClient) QuerySchool(i *Inquiry) *SchoolQuery {
	query := (&SchoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inquiry.Table, inquiry.FieldID, id),
			sqlgraph.To(school.Table, school.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inquiry.SchoolTable, inquiry.SchoolColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacher queries the teacher edge of a Inquiry.
func (c *InquiryClient) QueryTeacher(i *Inquiry) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inquiry.Table, inquiry.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inquiry.TeacherTable, inquiry.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InquiryClient) Hooks() []Hook {
	return c.hooks.Inquiry
}

// Interceptors returns the client interceptors.
func (c *InquiryClient) Interceptors() []Interceptor {
	return c.inters.Inquiry
}

func (c *InquiryClient) mutate(ctx context.Context, m *InquiryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InquiryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InquiryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InquiryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InquiryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Inquiry mutation op: %q", m.Op())
	}
}

// LessonConfirmationClient is a client for the LessonConfirmation schema.
type LessonConfirmationClient struct {
	config
}

// NewLessonConfirmationClient returns a client for the LessonConfirmation from the given config.
func NewLessonConfirmationClient(c config) *LessonConfirmationClient {
	return &LessonConfirmationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lessonconfirmation.Hooks(f(g(h())))`.
func (c *LessonConfirmationClient) Use(hooks ...Hook) {
	c.hooks.LessonConfirmation = append(c.hooks.LessonConfirmation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lessonconfirmation.Intercept(f(g(h())))`.
func (c *LessonConfirmationClient) Intercept(interceptors ...Interceptor) {
	c.inters.LessonConfirmation = append(c.inters.LessonConfirmation, interceptors...)
}

// Create returns a builder for creating a LessonConfirmation entity.
func (c *LessonConfirmationClient) Create() *LessonConfirmationCreate {
	mutation := newLessonConfirmationMutation(c.config, OpCreate)
	return &LessonConfirmationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LessonConfirmation entities.
func (c *LessonConfirmationClient) CreateBulk(builders ...*LessonConfirmationCreate) *LessonConfirmationCreateBulk {
	return &LessonConfirmationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LessonConfirmationClient) MapCreateBulk(slice any, setFunc func(*LessonConfirmationCreate, int)) *LessonConfirmationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LessonConfirmationCreateBulk{err: fmt.Errorf("calling to LessonConfirmationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LessonConfirmationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LessonConfirmationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LessonConfirmation.
func (c *LessonConfirmationClient) Update() *LessonConfirmationUpdate {
	mutation := newLessonConfirmationMutation(c.config, OpUpdate)
	return &LessonConfirmationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LessonConfirmationClient) UpdateOne(lc *LessonConfirmation) *LessonConfirmationUpdateOne {
	mutation := newLessonConfirmationMutation(c.config, OpUpdateOne, withLessonConfirmation(lc))
	return &LessonConfirmationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LessonConfirmationClient) UpdateOneID(id int) *LessonConfirmationUpdateOne {
	mutation := newLessonConfirmationMutation(c.config, OpUpdateOne, withLessonConfirmationID(id))
	return &LessonConfirmationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LessonConfirmation.
func (c *LessonConfirmationClient) Delete() *LessonConfirmationDelete {
	mutation := newLessonConfirmationMutation(c.config, OpDelete)
	return &LessonConfirmationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LessonConfirmationClient) DeleteOne(lc *LessonConfirmation) *LessonConfirmationDeleteOne {
	return c.DeleteOneID(lc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LessonConfirmationClient) DeleteOneID(id int) *LessonConfirmationDeleteOne {
	builder := c.Delete().Where(lessonconfirmation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LessonConfirmationDeleteOne{builder}
}

// Query returns a query builder for LessonConfirmation.
func (c *LessonConfirmationClient) Query() *LessonConfirmationQuery {
	return &LessonConfirmationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLessonConfirmation},
		inters: c.Interceptors(),
	}
}

// Get returns a LessonConfirmation entity by its id.
func (c *LessonConfirmationClient) Get(ctx context.Context, id int) (*LessonConfirmation, error) {
	return c.Query().Where(lessonconfirmation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LessonConfirmationClient) GetX(ctx context.Context, id int) *LessonConfirmation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonReservation queries the lesson_reservation edge of a LessonConfirmation.
func (c *LessonConfirmationClient) QueryLessonReservation(lc *LessonConfirmation) *LessonReservationQuery {
	query := (&LessonReservationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonconfirmation.Table, lessonconfirmation.FieldID, id),
			sqlgraph.To(lessonreservation.Table, lessonreservation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonconfirmation.LessonReservationTable, lessonconfirmation.LessonReservationColumn),
		)
		fromV = sqlgraph.Neighbors(lc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LessonConfirmationClient) Hooks() []Hook {
	return c.hooks.LessonConfirmation
}

// Interceptors returns the client interceptors.
func (c *LessonConfirmationClient) Interceptors() []Interceptor {
	return c.inters.LessonConfirmation
}

func (c *LessonConfirmationClient) mutate(ctx context.Context, m *LessonConfirmationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LessonConfirmationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LessonConfirmationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LessonConfirmationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LessonConfirmationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LessonConfirmation mutation op: %q", m.Op())
	}
}

// LessonPlanClient is a client for the LessonPlan schema.
type LessonPlanClient struct {
	config
}

// NewLessonPlanClient returns a client for the LessonPlan from the given config.
func NewLessonPlanClient(c config) *LessonPlanClient {
	return &LessonPlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lessonplan.Hooks(f(g(h())))`.
func (c *LessonPlanClient) Use(hooks ...Hook) {
	c.hooks.LessonPlan = append(c.hooks.LessonPlan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lessonplan.Intercept(f(g(h())))`.
func (c *LessonPlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.LessonPlan = append(c.inters.LessonPlan, interceptors...)
}

// Create returns a builder for creating a LessonPlan entity.
func (c *LessonPlanClient) Create() *LessonPlanCreate {
	mutation := newLessonPlanMutation(c.config, OpCreate)
	return &LessonPlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LessonPlan entities.
func (c *LessonPlanClient) CreateBulk(builders ...*LessonPlanCreate) *LessonPlanCreateBulk {
	return &LessonPlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LessonPlanClient) MapCreateBulk(slice any, setFunc func(*LessonPlanCreate, int)) *LessonPlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LessonPlanCreateBulk{err: fmt.Errorf("calling to LessonPlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LessonPlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LessonPlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LessonPlan.
func (c *LessonPlanClient) Update() *LessonPlanUpdate {
	mutation := newLessonPlanMutation(c.config, OpUpdate)
	return &LessonPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LessonPlanClient) UpdateOne(lp *LessonPlan) *LessonPlanUpdateOne {
	mutation := newLessonPlanMutation(c.config, OpUpdateOne, withLessonPlan(lp))
	return &LessonPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LessonPlanClient) UpdateOneID(id int) *LessonPlanUpdateOne {
	mutation := newLessonPlanMutation(c.config, OpUpdateOne, withLessonPlanID(id))
	return &LessonPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LessonPlan.
func (c *LessonPlanClient) Delete() *LessonPlanDelete {
	mutation := newLessonPlanMutation(c.config, OpDelete)
	return &LessonPlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LessonPlanClient) DeleteOne(lp *LessonPlan) *LessonPlanDeleteOne {
	return c.DeleteOneID(lp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LessonPlanClient) DeleteOneID(id int) *LessonPlanDeleteOne {
	builder := c.Delete().Where(lessonplan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LessonPlanDeleteOne{builder}
}

// Query returns a query builder for LessonPlan.
func (c *LessonPlanClient) Query() *LessonPlanQuery {
	return &LessonPlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLessonPlan},
		inters: c.Interceptors(),
	}
}

// Get returns a LessonPlan entity by its id.
func (c *LessonPlanClient) Get(ctx context.Context, id int) (*LessonPlan, error) {
	return c.Query().Where(lessonplan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LessonPlanClient) GetX(ctx context.Context, id int) *LessonPlan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompany queries the company edge of a LessonPlan.
func (c *LessonPlanClient) QueryCompany(lp *LessonPlan) *CompanyQuery {
	query := (&CompanyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonplan.CompanyTable, lessonplan.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchedules queries the schedules edge of a LessonPlan.
func (c *LessonPlanClient) QuerySchedules(lp *LessonPlan) *LessonScheduleQuery {
	query := (&LessonScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, id),
			sqlgraph.To(lessonschedule.Table, lessonschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonplan.SchedulesTable, lessonplan.SchedulesColumn),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrades queries the grades edge of a LessonPlan.
func (c *LessonPlanClient) QueryGrades(lp *LessonPlan) *GradeQuery {
	query := (&GradeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, id),
			sqlgraph.To(grade.Table, grade.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lessonplan.GradesTable, lessonplan.GradesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubjects queries the subjects edge of a LessonPlan.
func (c *LessonPlanClient) QuerySubjects(lp *LessonPlan) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lessonplan.SubjectsTable, lessonplan.SubjectsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducationCategories queries the education_categories edge of a LessonPlan.
func (c *LessonPlanClient) QueryEducationCategories(lp *LessonPlan) *EducationCategoryQuery {
	query := (&EducationCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, id),
			sqlgraph.To(educationcategory.Table, educationcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lessonplan.EducationCategoriesTable, lessonplan.EducationCategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUploadFiles queries the upload_files edge of a LessonPlan.
func (c *LessonPlanClient) QueryUploadFiles(lp *LessonPlan) *UploadFileQuery {
	query := (&UploadFileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, id),
			sqlgraph.To(uploadfile.Table, uploadfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonplan.UploadFilesTable, lessonplan.UploadFilesColumn),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LessonPlanClient) Hooks() []Hook {
	return c.hooks.LessonPlan
}

// Interceptors returns the client interceptors.
func (c *LessonPlanClient) Interceptors() []Interceptor {
	return c.inters.LessonPlan
}

func (c *LessonPlanClient) mutate(ctx context.Context, m *LessonPlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LessonPlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LessonPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LessonPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LessonPlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LessonPlan mutation op: %q", m.Op())
	}
}

// LessonReservationClient is a client for the LessonReservation schema.
type LessonReservationClient struct {
	config
}

// NewLessonReservationClient returns a client for the LessonReservation from the given config.
func NewLessonReservationClient(c config) *LessonReservationClient {
	return &LessonReservationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lessonreservation.Hooks(f(g(h())))`.
func (c *LessonReservationClient) Use(hooks ...Hook) {
	c.hooks.LessonReservation = append(c.hooks.LessonReservation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lessonreservation.Intercept(f(g(h())))`.
func (c *LessonReservationClient) Intercept(interceptors ...Interceptor) {
	c.inters.LessonReservation = append(c.inters.LessonReservation, interceptors...)
}

// Create returns a builder for creating a LessonReservation entity.
func (c *LessonReservationClient) Create() *LessonReservationCreate {
	mutation := newLessonReservationMutation(c.config, OpCreate)
	return &LessonReservationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LessonReservation entities.
func (c *LessonReservationClient) CreateBulk(builders ...*LessonReservationCreate) *LessonReservationCreateBulk {
	return &LessonReservationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LessonReservationClient) MapCreateBulk(slice any, setFunc func(*LessonReservationCreate, int)) *LessonReservationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LessonReservationCreateBulk{err: fmt.Errorf("calling to LessonReservationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LessonReservationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LessonReservationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LessonReservation.
func (c *LessonReservationClient) Update() *LessonReservationUpdate {
	mutation := newLessonReservationMutation(c.config, OpUpdate)
	return &LessonReservationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LessonReservationClient) UpdateOne(lr *LessonReservation) *LessonReservationUpdateOne {
	mutation := newLessonReservationMutation(c.config, OpUpdateOne, withLessonReservation(lr))
	return &LessonReservationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LessonReservationClient) UpdateOneID(id int) *LessonReservationUpdateOne {
	mutation := newLessonReservationMutation(c.config, OpUpdateOne, withLessonReservationID(id))
	return &LessonReservationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LessonReservation.
func (c *LessonReservationClient) Delete() *LessonReservationDelete {
	mutation := newLessonReservationMutation(c.config, OpDelete)
	return &LessonReservationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LessonReservationClient) DeleteOne(lr *LessonReservation) *LessonReservationDeleteOne {
	return c.DeleteOneID(lr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LessonReservationClient) DeleteOneID(id int) *LessonReservationDeleteOne {
	builder := c.Delete().Where(lessonreservation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LessonReservationDeleteOne{builder}
}

// Query returns a query builder for LessonReservation.
func (c *LessonReservationClient) Query() *LessonReservationQuery {
	return &LessonReservationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLessonReservation},
		inters: c.Interceptors(),
	}
}

// Get returns a LessonReservation entity by its id.
func (c *LessonReservationClient) Get(ctx context.Context, id int) (*LessonReservation, error) {
	return c.Query().Where(lessonreservation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LessonReservationClient) GetX(ctx context.Context, id int) *LessonReservation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonSchedule queries the lesson_schedule edge of a LessonReservation.
func (c *LessonReservationClient) QueryLessonSchedule(lr *LessonReservation) *LessonScheduleQuery {
	query := (&LessonScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, id),
			sqlgraph.To(lessonschedule.Table, lessonschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservation.LessonScheduleTable, lessonreservation.LessonScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(lr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchool queries the school edge of a LessonReservation.
func (c *LessonReservationClient) QuerySchool(lr *LessonReservation) *SchoolQuery {
	query := (&SchoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, id),
			sqlgraph.To(school.Table, school.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservation.SchoolTable, lessonreservation.SchoolColumn),
		)
		fromV = sqlgraph.Neighbors(lr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a LessonReservation.
func (c *LessonReservationClient) QueryUser(lr *LessonReservation) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservation.UserTable, lessonreservation.UserColumn),
		)
		fromV = sqlgraph.Neighbors(lr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLessonReservationPreferredDates queries the lesson_reservation_preferred_dates edge of a LessonReservation.
func (c *LessonReservationClient) QueryLessonReservationPreferredDates(lr *LessonReservation) *LessonReservationPreferredDateQuery {
	query := (&LessonReservationPreferredDateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, id),
			sqlgraph.To(lessonreservationpreferreddate.Table, lessonreservationpreferreddate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonreservation.LessonReservationPreferredDatesTable, lessonreservation.LessonReservationPreferredDatesColumn),
		)
		fromV = sqlgraph.Neighbors(lr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLessonConfirmation queries the lesson_confirmation edge of a LessonReservation.
func (c *LessonReservationClient) QueryLessonConfirmation(lr *LessonReservation) *LessonConfirmationQuery {
	query := (&LessonConfirmationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, id),
			sqlgraph.To(lessonconfirmation.Table, lessonconfirmation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonreservation.LessonConfirmationTable, lessonreservation.LessonConfirmationColumn),
		)
		fromV = sqlgraph.Neighbors(lr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LessonReservationClient) Hooks() []Hook {
	return c.hooks.LessonReservation
}

// Interceptors returns the client interceptors.
func (c *LessonReservationClient) Interceptors() []Interceptor {
	return c.inters.LessonReservation
}

func (c *LessonReservationClient) mutate(ctx context.Context, m *LessonReservationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LessonReservationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LessonReservationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LessonReservationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LessonReservationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LessonReservation mutation op: %q", m.Op())
	}
}

// LessonReservationPreferredDateClient is a client for the LessonReservationPreferredDate schema.
type LessonReservationPreferredDateClient struct {
	config
}

// NewLessonReservationPreferredDateClient returns a client for the LessonReservationPreferredDate from the given config.
func NewLessonReservationPreferredDateClient(c config) *LessonReservationPreferredDateClient {
	return &LessonReservationPreferredDateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lessonreservationpreferreddate.Hooks(f(g(h())))`.
func (c *LessonReservationPreferredDateClient) Use(hooks ...Hook) {
	c.hooks.LessonReservationPreferredDate = append(c.hooks.LessonReservationPreferredDate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lessonreservationpreferreddate.Intercept(f(g(h())))`.
func (c *LessonReservationPreferredDateClient) Intercept(interceptors ...Interceptor) {
	c.inters.LessonReservationPreferredDate = append(c.inters.LessonReservationPreferredDate, interceptors...)
}

// Create returns a builder for creating a LessonReservationPreferredDate entity.
func (c *LessonReservationPreferredDateClient) Create() *LessonReservationPreferredDateCreate {
	mutation := newLessonReservationPreferredDateMutation(c.config, OpCreate)
	return &LessonReservationPreferredDateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LessonReservationPreferredDate entities.
func (c *LessonReservationPreferredDateClient) CreateBulk(builders ...*LessonReservationPreferredDateCreate) *LessonReservationPreferredDateCreateBulk {
	return &LessonReservationPreferredDateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LessonReservationPreferredDateClient) MapCreateBulk(slice any, setFunc func(*LessonReservationPreferredDateCreate, int)) *LessonReservationPreferredDateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LessonReservationPreferredDateCreateBulk{err: fmt.Errorf("calling to LessonReservationPreferredDateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LessonReservationPreferredDateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LessonReservationPreferredDateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LessonReservationPreferredDate.
func (c *LessonReservationPreferredDateClient) Update() *LessonReservationPreferredDateUpdate {
	mutation := newLessonReservationPreferredDateMutation(c.config, OpUpdate)
	return &LessonReservationPreferredDateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LessonReservationPreferredDateClient) UpdateOne(lrpd *LessonReservationPreferredDate) *LessonReservationPreferredDateUpdateOne {
	mutation := newLessonReservationPreferredDateMutation(c.config, OpUpdateOne, withLessonReservationPreferredDate(lrpd))
	return &LessonReservationPreferredDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LessonReservationPreferredDateClient) UpdateOneID(id int) *LessonReservationPreferredDateUpdateOne {
	mutation := newLessonReservationPreferredDateMutation(c.config, OpUpdateOne, withLessonReservationPreferredDateID(id))
	return &LessonReservationPreferredDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LessonReservationPreferredDate.
func (c *LessonReservationPreferredDateClient) Delete() *LessonReservationPreferredDateDelete {
	mutation := newLessonReservationPreferredDateMutation(c.config, OpDelete)
	return &LessonReservationPreferredDateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LessonReservationPreferredDateClient) DeleteOne(lrpd *LessonReservationPreferredDate) *LessonReservationPreferredDateDeleteOne {
	return c.DeleteOneID(lrpd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LessonReservationPreferredDateClient) DeleteOneID(id int) *LessonReservationPreferredDateDeleteOne {
	builder := c.Delete().Where(lessonreservationpreferreddate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LessonReservationPreferredDateDeleteOne{builder}
}

// Query returns a query builder for LessonReservationPreferredDate.
func (c *LessonReservationPreferredDateClient) Query() *LessonReservationPreferredDateQuery {
	return &LessonReservationPreferredDateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLessonReservationPreferredDate},
		inters: c.Interceptors(),
	}
}

// Get returns a LessonReservationPreferredDate entity by its id.
func (c *LessonReservationPreferredDateClient) Get(ctx context.Context, id int) (*LessonReservationPreferredDate, error) {
	return c.Query().Where(lessonreservationpreferreddate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LessonReservationPreferredDateClient) GetX(ctx context.Context, id int) *LessonReservationPreferredDate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonReservations queries the lessonReservations edge of a LessonReservationPreferredDate.
func (c *LessonReservationPreferredDateClient) QueryLessonReservations(lrpd *LessonReservationPreferredDate) *LessonReservationQuery {
	query := (&LessonReservationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lrpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservationpreferreddate.Table, lessonreservationpreferreddate.FieldID, id),
			sqlgraph.To(lessonreservation.Table, lessonreservation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservationpreferreddate.LessonReservationsTable, lessonreservationpreferreddate.LessonReservationsColumn),
		)
		fromV = sqlgraph.Neighbors(lrpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LessonReservationPreferredDateClient) Hooks() []Hook {
	return c.hooks.LessonReservationPreferredDate
}

// Interceptors returns the client interceptors.
func (c *LessonReservationPreferredDateClient) Interceptors() []Interceptor {
	return c.inters.LessonReservationPreferredDate
}

func (c *LessonReservationPreferredDateClient) mutate(ctx context.Context, m *LessonReservationPreferredDateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LessonReservationPreferredDateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LessonReservationPreferredDateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LessonReservationPreferredDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LessonReservationPreferredDateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LessonReservationPreferredDate mutation op: %q", m.Op())
	}
}

// LessonScheduleClient is a client for the LessonSchedule schema.
type LessonScheduleClient struct {
	config
}

// NewLessonScheduleClient returns a client for the LessonSchedule from the given config.
func NewLessonScheduleClient(c config) *LessonScheduleClient {
	return &LessonScheduleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lessonschedule.Hooks(f(g(h())))`.
func (c *LessonScheduleClient) Use(hooks ...Hook) {
	c.hooks.LessonSchedule = append(c.hooks.LessonSchedule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lessonschedule.Intercept(f(g(h())))`.
func (c *LessonScheduleClient) Intercept(interceptors ...Interceptor) {
	c.inters.LessonSchedule = append(c.inters.LessonSchedule, interceptors...)
}

// Create returns a builder for creating a LessonSchedule entity.
func (c *LessonScheduleClient) Create() *LessonScheduleCreate {
	mutation := newLessonScheduleMutation(c.config, OpCreate)
	return &LessonScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LessonSchedule entities.
func (c *LessonScheduleClient) CreateBulk(builders ...*LessonScheduleCreate) *LessonScheduleCreateBulk {
	return &LessonScheduleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LessonScheduleClient) MapCreateBulk(slice any, setFunc func(*LessonScheduleCreate, int)) *LessonScheduleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LessonScheduleCreateBulk{err: fmt.Errorf("calling to LessonScheduleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LessonScheduleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LessonScheduleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LessonSchedule.
func (c *LessonScheduleClient) Update() *LessonScheduleUpdate {
	mutation := newLessonScheduleMutation(c.config, OpUpdate)
	return &LessonScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LessonScheduleClient) UpdateOne(ls *LessonSchedule) *LessonScheduleUpdateOne {
	mutation := newLessonScheduleMutation(c.config, OpUpdateOne, withLessonSchedule(ls))
	return &LessonScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LessonScheduleClient) UpdateOneID(id int) *LessonScheduleUpdateOne {
	mutation := newLessonScheduleMutation(c.config, OpUpdateOne, withLessonScheduleID(id))
	return &LessonScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LessonSchedule.
func (c *LessonScheduleClient) Delete() *LessonScheduleDelete {
	mutation := newLessonScheduleMutation(c.config, OpDelete)
	return &LessonScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LessonScheduleClient) DeleteOne(ls *LessonSchedule) *LessonScheduleDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LessonScheduleClient) DeleteOneID(id int) *LessonScheduleDeleteOne {
	builder := c.Delete().Where(lessonschedule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LessonScheduleDeleteOne{builder}
}

// Query returns a query builder for LessonSchedule.
func (c *LessonScheduleClient) Query() *LessonScheduleQuery {
	return &LessonScheduleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLessonSchedule},
		inters: c.Interceptors(),
	}
}

// Get returns a LessonSchedule entity by its id.
func (c *LessonScheduleClient) Get(ctx context.Context, id int) (*LessonSchedule, error) {
	return c.Query().Where(lessonschedule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LessonScheduleClient) GetX(ctx context.Context, id int) *LessonSchedule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a LessonSchedule.
func (c *LessonScheduleClient) QueryPlan(ls *LessonSchedule) *LessonPlanQuery {
	query := (&LessonPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonschedule.Table, lessonschedule.FieldID, id),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonschedule.PlanTable, lessonschedule.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(ls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrades queries the grades edge of a LessonSchedule.
func (c *LessonScheduleClient) QueryGrades(ls *LessonSchedule) *GradeQuery {
	query := (&GradeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonschedule.Table, lessonschedule.FieldID, id),
			sqlgraph.To(grade.Table, grade.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonschedule.GradesTable, lessonschedule.GradesColumn),
		)
		fromV = sqlgraph.Neighbors(ls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubjects queries the subjects edge of a LessonSchedule.
func (c *LessonScheduleClient) QuerySubjects(ls *LessonSchedule) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonschedule.Table, lessonschedule.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonschedule.SubjectsTable, lessonschedule.SubjectsColumn),
		)
		fromV = sqlgraph.Neighbors(ls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducationCategories queries the education_categories edge of a LessonSchedule.
func (c *LessonScheduleClient) QueryEducationCategories(ls *LessonSchedule) *EducationCategoryQuery {
	query := (&EducationCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonschedule.Table, lessonschedule.FieldID, id),
			sqlgraph.To(educationcategory.Table, educationcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonschedule.EducationCategoriesTable, lessonschedule.EducationCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(ls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLessonReservations queries the lesson_reservations edge of a LessonSchedule.
func (c *LessonScheduleClient) QueryLessonReservations(ls *LessonSchedule) *LessonReservationQuery {
	query := (&LessonReservationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonschedule.Table, lessonschedule.FieldID, id),
			sqlgraph.To(lessonreservation.Table, lessonreservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonschedule.LessonReservationsTable, lessonschedule.LessonReservationsColumn),
		)
		fromV = sqlgraph.Neighbors(ls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LessonScheduleClient) Hooks() []Hook {
	return c.hooks.LessonSchedule
}

// Interceptors returns the client interceptors.
func (c *LessonScheduleClient) Interceptors() []Interceptor {
	return c.inters.LessonSchedule
}

func (c *LessonScheduleClient) mutate(ctx context.Context, m *LessonScheduleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LessonScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LessonScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LessonScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LessonScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LessonSchedule mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductClient) MapCreateBulk(slice any, setFunc func(*ProductCreate, int)) *ProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCreateBulk{err: fmt.Errorf("calling to ProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// SchoolClient is a client for the School schema.
type SchoolClient struct {
	config
}

// NewSchoolClient returns a client for the School from the given config.
func NewSchoolClient(c config) *SchoolClient {
	return &SchoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `school.Hooks(f(g(h())))`.
func (c *SchoolClient) Use(hooks ...Hook) {
	c.hooks.School = append(c.hooks.School, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `school.Intercept(f(g(h())))`.
func (c *SchoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.School = append(c.inters.School, interceptors...)
}

// Create returns a builder for creating a School entity.
func (c *SchoolClient) Create() *SchoolCreate {
	mutation := newSchoolMutation(c.config, OpCreate)
	return &SchoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of School entities.
func (c *SchoolClient) CreateBulk(builders ...*SchoolCreate) *SchoolCreateBulk {
	return &SchoolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SchoolClient) MapCreateBulk(slice any, setFunc func(*SchoolCreate, int)) *SchoolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SchoolCreateBulk{err: fmt.Errorf("calling to SchoolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SchoolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SchoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for School.
func (c *SchoolClient) Update() *SchoolUpdate {
	mutation := newSchoolMutation(c.config, OpUpdate)
	return &SchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchoolClient) UpdateOne(s *School) *SchoolUpdateOne {
	mutation := newSchoolMutation(c.config, OpUpdateOne, withSchool(s))
	return &SchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchoolClient) UpdateOneID(id int) *SchoolUpdateOne {
	mutation := newSchoolMutation(c.config, OpUpdateOne, withSchoolID(id))
	return &SchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for School.
func (c *SchoolClient) Delete() *SchoolDelete {
	mutation := newSchoolMutation(c.config, OpDelete)
	return &SchoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SchoolClient) DeleteOne(s *School) *SchoolDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SchoolClient) DeleteOneID(id int) *SchoolDeleteOne {
	builder := c.Delete().Where(school.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchoolDeleteOne{builder}
}

// Query returns a query builder for School.
func (c *SchoolClient) Query() *SchoolQuery {
	return &SchoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSchool},
		inters: c.Interceptors(),
	}
}

// Get returns a School entity by its id.
func (c *SchoolClient) Get(ctx context.Context, id int) (*School, error) {
	return c.Query().Where(school.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchoolClient) GetX(ctx context.Context, id int) *School {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeachers queries the teachers edge of a School.
func (c *SchoolClient) QueryTeachers(s *School) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(school.Table, school.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, school.TeachersTable, school.TeachersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLessonReservations queries the lesson_reservations edge of a School.
func (c *SchoolClient) QueryLessonReservations(s *School) *LessonReservationQuery {
	query := (&LessonReservationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(school.Table, school.FieldID, id),
			sqlgraph.To(lessonreservation.Table, lessonreservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, school.LessonReservationsTable, school.LessonReservationsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SchoolClient) Hooks() []Hook {
	return c.hooks.School
}

// Interceptors returns the client interceptors.
func (c *SchoolClient) Interceptors() []Interceptor {
	return c.inters.School
}

func (c *SchoolClient) mutate(ctx context.Context, m *SchoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SchoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SchoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown School mutation op: %q", m.Op())
	}
}

// SubjectClient is a client for the Subject schema.
type SubjectClient struct {
	config
}

// NewSubjectClient returns a client for the Subject from the given config.
func NewSubjectClient(c config) *SubjectClient {
	return &SubjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subject.Hooks(f(g(h())))`.
func (c *SubjectClient) Use(hooks ...Hook) {
	c.hooks.Subject = append(c.hooks.Subject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subject.Intercept(f(g(h())))`.
func (c *SubjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subject = append(c.inters.Subject, interceptors...)
}

// Create returns a builder for creating a Subject entity.
func (c *SubjectClient) Create() *SubjectCreate {
	mutation := newSubjectMutation(c.config, OpCreate)
	return &SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subject entities.
func (c *SubjectClient) CreateBulk(builders ...*SubjectCreate) *SubjectCreateBulk {
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubjectClient) MapCreateBulk(slice any, setFunc func(*SubjectCreate, int)) *SubjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubjectCreateBulk{err: fmt.Errorf("calling to SubjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subject.
func (c *SubjectClient) Update() *SubjectUpdate {
	mutation := newSubjectMutation(c.config, OpUpdate)
	return &SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubjectClient) UpdateOne(s *Subject) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubject(s))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubjectClient) UpdateOneID(id int) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubjectID(id))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subject.
func (c *SubjectClient) Delete() *SubjectDelete {
	mutation := newSubjectMutation(c.config, OpDelete)
	return &SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubjectClient) DeleteOne(s *Subject) *SubjectDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubjectClient) DeleteOneID(id int) *SubjectDeleteOne {
	builder := c.Delete().Where(subject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubjectDeleteOne{builder}
}

// Query returns a query builder for Subject.
func (c *SubjectClient) Query() *SubjectQuery {
	return &SubjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubject},
		inters: c.Interceptors(),
	}
}

// Get returns a Subject entity by its id.
func (c *SubjectClient) Get(ctx context.Context, id int) (*Subject, error) {
	return c.Query().Where(subject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubjectClient) GetX(ctx context.Context, id int) *Subject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonPlans queries the lesson_plans edge of a Subject.
func (c *SubjectClient) QueryLessonPlans(s *Subject) *LessonPlanQuery {
	query := (&LessonPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, subject.LessonPlansTable, subject.LessonPlansPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubjectClient) Hooks() []Hook {
	return c.hooks.Subject
}

// Interceptors returns the client interceptors.
func (c *SubjectClient) Interceptors() []Interceptor {
	return c.inters.Subject
}

func (c *SubjectClient) mutate(ctx context.Context, m *SubjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subject mutation op: %q", m.Op())
	}
}

// UploadFileClient is a client for the UploadFile schema.
type UploadFileClient struct {
	config
}

// NewUploadFileClient returns a client for the UploadFile from the given config.
func NewUploadFileClient(c config) *UploadFileClient {
	return &UploadFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uploadfile.Hooks(f(g(h())))`.
func (c *UploadFileClient) Use(hooks ...Hook) {
	c.hooks.UploadFile = append(c.hooks.UploadFile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `uploadfile.Intercept(f(g(h())))`.
func (c *UploadFileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UploadFile = append(c.inters.UploadFile, interceptors...)
}

// Create returns a builder for creating a UploadFile entity.
func (c *UploadFileClient) Create() *UploadFileCreate {
	mutation := newUploadFileMutation(c.config, OpCreate)
	return &UploadFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UploadFile entities.
func (c *UploadFileClient) CreateBulk(builders ...*UploadFileCreate) *UploadFileCreateBulk {
	return &UploadFileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UploadFileClient) MapCreateBulk(slice any, setFunc func(*UploadFileCreate, int)) *UploadFileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UploadFileCreateBulk{err: fmt.Errorf("calling to UploadFileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UploadFileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UploadFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UploadFile.
func (c *UploadFileClient) Update() *UploadFileUpdate {
	mutation := newUploadFileMutation(c.config, OpUpdate)
	return &UploadFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UploadFileClient) UpdateOne(uf *UploadFile) *UploadFileUpdateOne {
	mutation := newUploadFileMutation(c.config, OpUpdateOne, withUploadFile(uf))
	return &UploadFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UploadFileClient) UpdateOneID(id int) *UploadFileUpdateOne {
	mutation := newUploadFileMutation(c.config, OpUpdateOne, withUploadFileID(id))
	return &UploadFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UploadFile.
func (c *UploadFileClient) Delete() *UploadFileDelete {
	mutation := newUploadFileMutation(c.config, OpDelete)
	return &UploadFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UploadFileClient) DeleteOne(uf *UploadFile) *UploadFileDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UploadFileClient) DeleteOneID(id int) *UploadFileDeleteOne {
	builder := c.Delete().Where(uploadfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UploadFileDeleteOne{builder}
}

// Query returns a query builder for UploadFile.
func (c *UploadFileClient) Query() *UploadFileQuery {
	return &UploadFileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUploadFile},
		inters: c.Interceptors(),
	}
}

// Get returns a UploadFile entity by its id.
func (c *UploadFileClient) Get(ctx context.Context, id int) (*UploadFile, error) {
	return c.Query().Where(uploadfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UploadFileClient) GetX(ctx context.Context, id int) *UploadFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessonPlan queries the LessonPlan edge of a UploadFile.
func (c *UploadFileClient) QueryLessonPlan(uf *UploadFile) *LessonPlanQuery {
	query := (&LessonPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uploadfile.Table, uploadfile.FieldID, id),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, uploadfile.LessonPlanTable, uploadfile.LessonPlanColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UploadFileClient) Hooks() []Hook {
	return c.hooks.UploadFile
}

// Interceptors returns the client interceptors.
func (c *UploadFileClient) Interceptors() []Interceptor {
	return c.inters.UploadFile
}

func (c *UploadFileClient) mutate(ctx context.Context, m *UploadFileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UploadFileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UploadFileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UploadFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UploadFileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UploadFile mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySchool queries the school edge of a User.
func (c *UserClient) QuerySchool(u *User) *SchoolQuery {
	query := (&SchoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(school.Table, school.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.SchoolTable, user.SchoolColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompany queries the company edge of a User.
func (c *UserClient) QueryCompany(u *User) *CompanyQuery {
	query := (&CompanyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.CompanyTable, user.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInquiries queries the inquiries edge of a User.
func (c *UserClient) QueryInquiries(u *User) *InquiryQuery {
	query := (&InquiryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(inquiry.Table, inquiry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InquiriesTable, user.InquiriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLessonReservations queries the lesson_reservations edge of a User.
func (c *UserClient) QueryLessonReservations(u *User) *LessonReservationQuery {
	query := (&LessonReservationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(lessonreservation.Table, lessonreservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LessonReservationsTable, user.LessonReservationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Company, EducationCategory, EmailVerification, Grade, Inquiry,
		LessonConfirmation, LessonPlan, LessonReservation,
		LessonReservationPreferredDate, LessonSchedule, Product, School, Subject,
		UploadFile, User []ent.Hook
	}
	inters struct {
		Company, EducationCategory, EmailVerification, Grade, Inquiry,
		LessonConfirmation, LessonPlan, LessonReservation,
		LessonReservationPreferredDate, LessonSchedule, Product, School, Subject,
		UploadFile, User []ent.Interceptor
	}
)
