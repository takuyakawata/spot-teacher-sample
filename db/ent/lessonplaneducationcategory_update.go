// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplaneducationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonPlanEducationCategoryUpdate is the builder for updating LessonPlanEducationCategory entities.
type LessonPlanEducationCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *LessonPlanEducationCategoryMutation
}

// Where appends a list predicates to the LessonPlanEducationCategoryUpdate builder.
func (lpecu *LessonPlanEducationCategoryUpdate) Where(ps ...predicate.LessonPlanEducationCategory) *LessonPlanEducationCategoryUpdate {
	lpecu.mutation.Where(ps...)
	return lpecu
}

// SetUpdatedAt sets the "updated_at" field.
func (lpecu *LessonPlanEducationCategoryUpdate) SetUpdatedAt(t time.Time) *LessonPlanEducationCategoryUpdate {
	lpecu.mutation.SetUpdatedAt(t)
	return lpecu
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpecu *LessonPlanEducationCategoryUpdate) SetLessonPlanID(i int64) *LessonPlanEducationCategoryUpdate {
	lpecu.mutation.SetLessonPlanID(i)
	return lpecu
}

// SetNillableLessonPlanID sets the "lesson_plan_id" field if the given value is not nil.
func (lpecu *LessonPlanEducationCategoryUpdate) SetNillableLessonPlanID(i *int64) *LessonPlanEducationCategoryUpdate {
	if i != nil {
		lpecu.SetLessonPlanID(*i)
	}
	return lpecu
}

// SetEducationCategoryID sets the "education_category_id" field.
func (lpecu *LessonPlanEducationCategoryUpdate) SetEducationCategoryID(i int64) *LessonPlanEducationCategoryUpdate {
	lpecu.mutation.SetEducationCategoryID(i)
	return lpecu
}

// SetNillableEducationCategoryID sets the "education_category_id" field if the given value is not nil.
func (lpecu *LessonPlanEducationCategoryUpdate) SetNillableEducationCategoryID(i *int64) *LessonPlanEducationCategoryUpdate {
	if i != nil {
		lpecu.SetEducationCategoryID(*i)
	}
	return lpecu
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpecu *LessonPlanEducationCategoryUpdate) SetLessonPlan(l *LessonPlan) *LessonPlanEducationCategoryUpdate {
	return lpecu.SetLessonPlanID(l.ID)
}

// SetEducationCategory sets the "education_category" edge to the EducationCategory entity.
func (lpecu *LessonPlanEducationCategoryUpdate) SetEducationCategory(e *EducationCategory) *LessonPlanEducationCategoryUpdate {
	return lpecu.SetEducationCategoryID(e.ID)
}

// Mutation returns the LessonPlanEducationCategoryMutation object of the builder.
func (lpecu *LessonPlanEducationCategoryUpdate) Mutation() *LessonPlanEducationCategoryMutation {
	return lpecu.mutation
}

// ClearLessonPlan clears the "lesson_plan" edge to the LessonPlan entity.
func (lpecu *LessonPlanEducationCategoryUpdate) ClearLessonPlan() *LessonPlanEducationCategoryUpdate {
	lpecu.mutation.ClearLessonPlan()
	return lpecu
}

// ClearEducationCategory clears the "education_category" edge to the EducationCategory entity.
func (lpecu *LessonPlanEducationCategoryUpdate) ClearEducationCategory() *LessonPlanEducationCategoryUpdate {
	lpecu.mutation.ClearEducationCategory()
	return lpecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpecu *LessonPlanEducationCategoryUpdate) Save(ctx context.Context) (int, error) {
	lpecu.defaults()
	return withHooks(ctx, lpecu.sqlSave, lpecu.mutation, lpecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpecu *LessonPlanEducationCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := lpecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpecu *LessonPlanEducationCategoryUpdate) Exec(ctx context.Context) error {
	_, err := lpecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpecu *LessonPlanEducationCategoryUpdate) ExecX(ctx context.Context) {
	if err := lpecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpecu *LessonPlanEducationCategoryUpdate) defaults() {
	if _, ok := lpecu.mutation.UpdatedAt(); !ok {
		v := lessonplaneducationcategory.UpdateDefaultUpdatedAt()
		lpecu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpecu *LessonPlanEducationCategoryUpdate) check() error {
	if lpecu.mutation.LessonPlanCleared() && len(lpecu.mutation.LessonPlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanEducationCategory.lesson_plan"`)
	}
	if lpecu.mutation.EducationCategoryCleared() && len(lpecu.mutation.EducationCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanEducationCategory.education_category"`)
	}
	return nil
}

func (lpecu *LessonPlanEducationCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lpecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonplaneducationcategory.Table, lessonplaneducationcategory.Columns, sqlgraph.NewFieldSpec(lessonplaneducationcategory.FieldID, field.TypeInt64))
	if ps := lpecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpecu.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplaneducationcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpecu.mutation.LessonPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.LessonPlanTable,
			Columns: []string{lessonplaneducationcategory.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpecu.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.LessonPlanTable,
			Columns: []string{lessonplaneducationcategory.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpecu.mutation.EducationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.EducationCategoryTable,
			Columns: []string{lessonplaneducationcategory.EducationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationcategory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpecu.mutation.EducationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.EducationCategoryTable,
			Columns: []string{lessonplaneducationcategory.EducationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationcategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonplaneducationcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpecu.mutation.done = true
	return n, nil
}

// LessonPlanEducationCategoryUpdateOne is the builder for updating a single LessonPlanEducationCategory entity.
type LessonPlanEducationCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonPlanEducationCategoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SetUpdatedAt(t time.Time) *LessonPlanEducationCategoryUpdateOne {
	lpecuo.mutation.SetUpdatedAt(t)
	return lpecuo
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SetLessonPlanID(i int64) *LessonPlanEducationCategoryUpdateOne {
	lpecuo.mutation.SetLessonPlanID(i)
	return lpecuo
}

// SetNillableLessonPlanID sets the "lesson_plan_id" field if the given value is not nil.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SetNillableLessonPlanID(i *int64) *LessonPlanEducationCategoryUpdateOne {
	if i != nil {
		lpecuo.SetLessonPlanID(*i)
	}
	return lpecuo
}

// SetEducationCategoryID sets the "education_category_id" field.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SetEducationCategoryID(i int64) *LessonPlanEducationCategoryUpdateOne {
	lpecuo.mutation.SetEducationCategoryID(i)
	return lpecuo
}

// SetNillableEducationCategoryID sets the "education_category_id" field if the given value is not nil.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SetNillableEducationCategoryID(i *int64) *LessonPlanEducationCategoryUpdateOne {
	if i != nil {
		lpecuo.SetEducationCategoryID(*i)
	}
	return lpecuo
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SetLessonPlan(l *LessonPlan) *LessonPlanEducationCategoryUpdateOne {
	return lpecuo.SetLessonPlanID(l.ID)
}

// SetEducationCategory sets the "education_category" edge to the EducationCategory entity.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SetEducationCategory(e *EducationCategory) *LessonPlanEducationCategoryUpdateOne {
	return lpecuo.SetEducationCategoryID(e.ID)
}

// Mutation returns the LessonPlanEducationCategoryMutation object of the builder.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) Mutation() *LessonPlanEducationCategoryMutation {
	return lpecuo.mutation
}

// ClearLessonPlan clears the "lesson_plan" edge to the LessonPlan entity.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) ClearLessonPlan() *LessonPlanEducationCategoryUpdateOne {
	lpecuo.mutation.ClearLessonPlan()
	return lpecuo
}

// ClearEducationCategory clears the "education_category" edge to the EducationCategory entity.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) ClearEducationCategory() *LessonPlanEducationCategoryUpdateOne {
	lpecuo.mutation.ClearEducationCategory()
	return lpecuo
}

// Where appends a list predicates to the LessonPlanEducationCategoryUpdate builder.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) Where(ps ...predicate.LessonPlanEducationCategory) *LessonPlanEducationCategoryUpdateOne {
	lpecuo.mutation.Where(ps...)
	return lpecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) Select(field string, fields ...string) *LessonPlanEducationCategoryUpdateOne {
	lpecuo.fields = append([]string{field}, fields...)
	return lpecuo
}

// Save executes the query and returns the updated LessonPlanEducationCategory entity.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) Save(ctx context.Context) (*LessonPlanEducationCategory, error) {
	lpecuo.defaults()
	return withHooks(ctx, lpecuo.sqlSave, lpecuo.mutation, lpecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) SaveX(ctx context.Context) *LessonPlanEducationCategory {
	node, err := lpecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := lpecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := lpecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) defaults() {
	if _, ok := lpecuo.mutation.UpdatedAt(); !ok {
		v := lessonplaneducationcategory.UpdateDefaultUpdatedAt()
		lpecuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpecuo *LessonPlanEducationCategoryUpdateOne) check() error {
	if lpecuo.mutation.LessonPlanCleared() && len(lpecuo.mutation.LessonPlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanEducationCategory.lesson_plan"`)
	}
	if lpecuo.mutation.EducationCategoryCleared() && len(lpecuo.mutation.EducationCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanEducationCategory.education_category"`)
	}
	return nil
}

func (lpecuo *LessonPlanEducationCategoryUpdateOne) sqlSave(ctx context.Context) (_node *LessonPlanEducationCategory, err error) {
	if err := lpecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonplaneducationcategory.Table, lessonplaneducationcategory.Columns, sqlgraph.NewFieldSpec(lessonplaneducationcategory.FieldID, field.TypeInt64))
	id, ok := lpecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LessonPlanEducationCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonplaneducationcategory.FieldID)
		for _, f := range fields {
			if !lessonplaneducationcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lessonplaneducationcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpecuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplaneducationcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpecuo.mutation.LessonPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.LessonPlanTable,
			Columns: []string{lessonplaneducationcategory.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpecuo.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.LessonPlanTable,
			Columns: []string{lessonplaneducationcategory.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpecuo.mutation.EducationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.EducationCategoryTable,
			Columns: []string{lessonplaneducationcategory.EducationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationcategory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpecuo.mutation.EducationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.EducationCategoryTable,
			Columns: []string{lessonplaneducationcategory.EducationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationcategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LessonPlanEducationCategory{config: lpecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonplaneducationcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpecuo.mutation.done = true
	return _node, nil
}
