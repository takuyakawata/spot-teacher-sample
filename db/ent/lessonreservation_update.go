// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonconfirmation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// LessonReservationUpdate is the builder for updating LessonReservation entities.
type LessonReservationUpdate struct {
	config
	hooks    []Hook
	mutation *LessonReservationMutation
}

// Where appends a list predicates to the LessonReservationUpdate builder.
func (lru *LessonReservationUpdate) Where(ps ...predicate.LessonReservation) *LessonReservationUpdate {
	lru.mutation.Where(ps...)
	return lru
}

// SetUpdatedAt sets the "updated_at" field.
func (lru *LessonReservationUpdate) SetUpdatedAt(t time.Time) *LessonReservationUpdate {
	lru.mutation.SetUpdatedAt(t)
	return lru
}

// SetLessonScheduleID sets the "lesson_schedule_id" field.
func (lru *LessonReservationUpdate) SetLessonScheduleID(i int64) *LessonReservationUpdate {
	lru.mutation.SetLessonScheduleID(i)
	return lru
}

// SetNillableLessonScheduleID sets the "lesson_schedule_id" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableLessonScheduleID(i *int64) *LessonReservationUpdate {
	if i != nil {
		lru.SetLessonScheduleID(*i)
	}
	return lru
}

// SetSchoolID sets the "school_id" field.
func (lru *LessonReservationUpdate) SetSchoolID(i int64) *LessonReservationUpdate {
	lru.mutation.SetSchoolID(i)
	return lru
}

// SetNillableSchoolID sets the "school_id" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableSchoolID(i *int64) *LessonReservationUpdate {
	if i != nil {
		lru.SetSchoolID(*i)
	}
	return lru
}

// SetUserID sets the "user_id" field.
func (lru *LessonReservationUpdate) SetUserID(i int64) *LessonReservationUpdate {
	lru.mutation.SetUserID(i)
	return lru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableUserID(i *int64) *LessonReservationUpdate {
	if i != nil {
		lru.SetUserID(*i)
	}
	return lru
}

// SetReservationStatus sets the "reservation_status" field.
func (lru *LessonReservationUpdate) SetReservationStatus(ls lessonreservation.ReservationStatus) *LessonReservationUpdate {
	lru.mutation.SetReservationStatus(ls)
	return lru
}

// SetNillableReservationStatus sets the "reservation_status" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableReservationStatus(ls *lessonreservation.ReservationStatus) *LessonReservationUpdate {
	if ls != nil {
		lru.SetReservationStatus(*ls)
	}
	return lru
}

// SetCountStudent sets the "count_student" field.
func (lru *LessonReservationUpdate) SetCountStudent(s string) *LessonReservationUpdate {
	lru.mutation.SetCountStudent(s)
	return lru
}

// SetNillableCountStudent sets the "count_student" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableCountStudent(s *string) *LessonReservationUpdate {
	if s != nil {
		lru.SetCountStudent(*s)
	}
	return lru
}

// SetGraduate sets the "graduate" field.
func (lru *LessonReservationUpdate) SetGraduate(s string) *LessonReservationUpdate {
	lru.mutation.SetGraduate(s)
	return lru
}

// SetNillableGraduate sets the "graduate" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableGraduate(s *string) *LessonReservationUpdate {
	if s != nil {
		lru.SetGraduate(*s)
	}
	return lru
}

// SetSubject sets the "subject" field.
func (lru *LessonReservationUpdate) SetSubject(s string) *LessonReservationUpdate {
	lru.mutation.SetSubject(s)
	return lru
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableSubject(s *string) *LessonReservationUpdate {
	if s != nil {
		lru.SetSubject(*s)
	}
	return lru
}

// SetRemarks sets the "remarks" field.
func (lru *LessonReservationUpdate) SetRemarks(s string) *LessonReservationUpdate {
	lru.mutation.SetRemarks(s)
	return lru
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableRemarks(s *string) *LessonReservationUpdate {
	if s != nil {
		lru.SetRemarks(*s)
	}
	return lru
}

// ClearRemarks clears the value of the "remarks" field.
func (lru *LessonReservationUpdate) ClearRemarks() *LessonReservationUpdate {
	lru.mutation.ClearRemarks()
	return lru
}

// SetReservationConfirmAt sets the "reservation_confirm_at" field.
func (lru *LessonReservationUpdate) SetReservationConfirmAt(t time.Time) *LessonReservationUpdate {
	lru.mutation.SetReservationConfirmAt(t)
	return lru
}

// SetNillableReservationConfirmAt sets the "reservation_confirm_at" field if the given value is not nil.
func (lru *LessonReservationUpdate) SetNillableReservationConfirmAt(t *time.Time) *LessonReservationUpdate {
	if t != nil {
		lru.SetReservationConfirmAt(*t)
	}
	return lru
}

// ClearReservationConfirmAt clears the value of the "reservation_confirm_at" field.
func (lru *LessonReservationUpdate) ClearReservationConfirmAt() *LessonReservationUpdate {
	lru.mutation.ClearReservationConfirmAt()
	return lru
}

// SetLessonSchedule sets the "lesson_schedule" edge to the LessonSchedule entity.
func (lru *LessonReservationUpdate) SetLessonSchedule(l *LessonSchedule) *LessonReservationUpdate {
	return lru.SetLessonScheduleID(l.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (lru *LessonReservationUpdate) SetSchool(s *School) *LessonReservationUpdate {
	return lru.SetSchoolID(s.ID)
}

// SetUser sets the "user" edge to the User entity.
func (lru *LessonReservationUpdate) SetUser(u *User) *LessonReservationUpdate {
	return lru.SetUserID(u.ID)
}

// AddLessonReservationPreferredDateIDs adds the "lesson_reservation_preferred_dates" edge to the LessonReservationPreferredDate entity by IDs.
func (lru *LessonReservationUpdate) AddLessonReservationPreferredDateIDs(ids ...int64) *LessonReservationUpdate {
	lru.mutation.AddLessonReservationPreferredDateIDs(ids...)
	return lru
}

// AddLessonReservationPreferredDates adds the "lesson_reservation_preferred_dates" edges to the LessonReservationPreferredDate entity.
func (lru *LessonReservationUpdate) AddLessonReservationPreferredDates(l ...*LessonReservationPreferredDate) *LessonReservationUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lru.AddLessonReservationPreferredDateIDs(ids...)
}

// AddLessonConfirmationIDs adds the "lesson_confirmation" edge to the LessonConfirmation entity by IDs.
func (lru *LessonReservationUpdate) AddLessonConfirmationIDs(ids ...int64) *LessonReservationUpdate {
	lru.mutation.AddLessonConfirmationIDs(ids...)
	return lru
}

// AddLessonConfirmation adds the "lesson_confirmation" edges to the LessonConfirmation entity.
func (lru *LessonReservationUpdate) AddLessonConfirmation(l ...*LessonConfirmation) *LessonReservationUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lru.AddLessonConfirmationIDs(ids...)
}

// Mutation returns the LessonReservationMutation object of the builder.
func (lru *LessonReservationUpdate) Mutation() *LessonReservationMutation {
	return lru.mutation
}

// ClearLessonSchedule clears the "lesson_schedule" edge to the LessonSchedule entity.
func (lru *LessonReservationUpdate) ClearLessonSchedule() *LessonReservationUpdate {
	lru.mutation.ClearLessonSchedule()
	return lru
}

// ClearSchool clears the "school" edge to the School entity.
func (lru *LessonReservationUpdate) ClearSchool() *LessonReservationUpdate {
	lru.mutation.ClearSchool()
	return lru
}

// ClearUser clears the "user" edge to the User entity.
func (lru *LessonReservationUpdate) ClearUser() *LessonReservationUpdate {
	lru.mutation.ClearUser()
	return lru
}

// ClearLessonReservationPreferredDates clears all "lesson_reservation_preferred_dates" edges to the LessonReservationPreferredDate entity.
func (lru *LessonReservationUpdate) ClearLessonReservationPreferredDates() *LessonReservationUpdate {
	lru.mutation.ClearLessonReservationPreferredDates()
	return lru
}

// RemoveLessonReservationPreferredDateIDs removes the "lesson_reservation_preferred_dates" edge to LessonReservationPreferredDate entities by IDs.
func (lru *LessonReservationUpdate) RemoveLessonReservationPreferredDateIDs(ids ...int64) *LessonReservationUpdate {
	lru.mutation.RemoveLessonReservationPreferredDateIDs(ids...)
	return lru
}

// RemoveLessonReservationPreferredDates removes "lesson_reservation_preferred_dates" edges to LessonReservationPreferredDate entities.
func (lru *LessonReservationUpdate) RemoveLessonReservationPreferredDates(l ...*LessonReservationPreferredDate) *LessonReservationUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lru.RemoveLessonReservationPreferredDateIDs(ids...)
}

// ClearLessonConfirmation clears all "lesson_confirmation" edges to the LessonConfirmation entity.
func (lru *LessonReservationUpdate) ClearLessonConfirmation() *LessonReservationUpdate {
	lru.mutation.ClearLessonConfirmation()
	return lru
}

// RemoveLessonConfirmationIDs removes the "lesson_confirmation" edge to LessonConfirmation entities by IDs.
func (lru *LessonReservationUpdate) RemoveLessonConfirmationIDs(ids ...int64) *LessonReservationUpdate {
	lru.mutation.RemoveLessonConfirmationIDs(ids...)
	return lru
}

// RemoveLessonConfirmation removes "lesson_confirmation" edges to LessonConfirmation entities.
func (lru *LessonReservationUpdate) RemoveLessonConfirmation(l ...*LessonConfirmation) *LessonReservationUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lru.RemoveLessonConfirmationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lru *LessonReservationUpdate) Save(ctx context.Context) (int, error) {
	lru.defaults()
	return withHooks(ctx, lru.sqlSave, lru.mutation, lru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lru *LessonReservationUpdate) SaveX(ctx context.Context) int {
	affected, err := lru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lru *LessonReservationUpdate) Exec(ctx context.Context) error {
	_, err := lru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lru *LessonReservationUpdate) ExecX(ctx context.Context) {
	if err := lru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lru *LessonReservationUpdate) defaults() {
	if _, ok := lru.mutation.UpdatedAt(); !ok {
		v := lessonreservation.UpdateDefaultUpdatedAt()
		lru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lru *LessonReservationUpdate) check() error {
	if v, ok := lru.mutation.LessonScheduleID(); ok {
		if err := lessonreservation.LessonScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_schedule_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.lesson_schedule_id": %w`, err)}
		}
	}
	if v, ok := lru.mutation.SchoolID(); ok {
		if err := lessonreservation.SchoolIDValidator(v); err != nil {
			return &ValidationError{Name: "school_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.school_id": %w`, err)}
		}
	}
	if v, ok := lru.mutation.UserID(); ok {
		if err := lessonreservation.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.user_id": %w`, err)}
		}
	}
	if v, ok := lru.mutation.ReservationStatus(); ok {
		if err := lessonreservation.ReservationStatusValidator(v); err != nil {
			return &ValidationError{Name: "reservation_status", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.reservation_status": %w`, err)}
		}
	}
	if lru.mutation.LessonScheduleCleared() && len(lru.mutation.LessonScheduleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservation.lesson_schedule"`)
	}
	if lru.mutation.SchoolCleared() && len(lru.mutation.SchoolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservation.school"`)
	}
	if lru.mutation.UserCleared() && len(lru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservation.user"`)
	}
	return nil
}

func (lru *LessonReservationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonreservation.Table, lessonreservation.Columns, sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt64))
	if ps := lru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lru.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonreservation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lru.mutation.ReservationStatus(); ok {
		_spec.SetField(lessonreservation.FieldReservationStatus, field.TypeEnum, value)
	}
	if value, ok := lru.mutation.CountStudent(); ok {
		_spec.SetField(lessonreservation.FieldCountStudent, field.TypeString, value)
	}
	if value, ok := lru.mutation.Graduate(); ok {
		_spec.SetField(lessonreservation.FieldGraduate, field.TypeString, value)
	}
	if value, ok := lru.mutation.Subject(); ok {
		_spec.SetField(lessonreservation.FieldSubject, field.TypeString, value)
	}
	if value, ok := lru.mutation.Remarks(); ok {
		_spec.SetField(lessonreservation.FieldRemarks, field.TypeString, value)
	}
	if lru.mutation.RemarksCleared() {
		_spec.ClearField(lessonreservation.FieldRemarks, field.TypeString)
	}
	if value, ok := lru.mutation.ReservationConfirmAt(); ok {
		_spec.SetField(lessonreservation.FieldReservationConfirmAt, field.TypeTime, value)
	}
	if lru.mutation.ReservationConfirmAtCleared() {
		_spec.ClearField(lessonreservation.FieldReservationConfirmAt, field.TypeTime)
	}
	if lru.mutation.LessonScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.LessonScheduleTable,
			Columns: []string{lessonreservation.LessonScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonschedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.LessonScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.LessonScheduleTable,
			Columns: []string{lessonreservation.LessonScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonschedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.SchoolTable,
			Columns: []string{lessonreservation.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.SchoolTable,
			Columns: []string{lessonreservation.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.UserTable,
			Columns: []string{lessonreservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.UserTable,
			Columns: []string{lessonreservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.LessonReservationPreferredDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonReservationPreferredDatesTable,
			Columns: []string{lessonreservation.LessonReservationPreferredDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.RemovedLessonReservationPreferredDatesIDs(); len(nodes) > 0 && !lru.mutation.LessonReservationPreferredDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonReservationPreferredDatesTable,
			Columns: []string{lessonreservation.LessonReservationPreferredDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.LessonReservationPreferredDatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonReservationPreferredDatesTable,
			Columns: []string{lessonreservation.LessonReservationPreferredDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.LessonConfirmationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonConfirmationTable,
			Columns: []string{lessonreservation.LessonConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.RemovedLessonConfirmationIDs(); len(nodes) > 0 && !lru.mutation.LessonConfirmationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonConfirmationTable,
			Columns: []string{lessonreservation.LessonConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.LessonConfirmationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonConfirmationTable,
			Columns: []string{lessonreservation.LessonConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonreservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lru.mutation.done = true
	return n, nil
}

// LessonReservationUpdateOne is the builder for updating a single LessonReservation entity.
type LessonReservationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonReservationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lruo *LessonReservationUpdateOne) SetUpdatedAt(t time.Time) *LessonReservationUpdateOne {
	lruo.mutation.SetUpdatedAt(t)
	return lruo
}

// SetLessonScheduleID sets the "lesson_schedule_id" field.
func (lruo *LessonReservationUpdateOne) SetLessonScheduleID(i int64) *LessonReservationUpdateOne {
	lruo.mutation.SetLessonScheduleID(i)
	return lruo
}

// SetNillableLessonScheduleID sets the "lesson_schedule_id" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableLessonScheduleID(i *int64) *LessonReservationUpdateOne {
	if i != nil {
		lruo.SetLessonScheduleID(*i)
	}
	return lruo
}

// SetSchoolID sets the "school_id" field.
func (lruo *LessonReservationUpdateOne) SetSchoolID(i int64) *LessonReservationUpdateOne {
	lruo.mutation.SetSchoolID(i)
	return lruo
}

// SetNillableSchoolID sets the "school_id" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableSchoolID(i *int64) *LessonReservationUpdateOne {
	if i != nil {
		lruo.SetSchoolID(*i)
	}
	return lruo
}

// SetUserID sets the "user_id" field.
func (lruo *LessonReservationUpdateOne) SetUserID(i int64) *LessonReservationUpdateOne {
	lruo.mutation.SetUserID(i)
	return lruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableUserID(i *int64) *LessonReservationUpdateOne {
	if i != nil {
		lruo.SetUserID(*i)
	}
	return lruo
}

// SetReservationStatus sets the "reservation_status" field.
func (lruo *LessonReservationUpdateOne) SetReservationStatus(ls lessonreservation.ReservationStatus) *LessonReservationUpdateOne {
	lruo.mutation.SetReservationStatus(ls)
	return lruo
}

// SetNillableReservationStatus sets the "reservation_status" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableReservationStatus(ls *lessonreservation.ReservationStatus) *LessonReservationUpdateOne {
	if ls != nil {
		lruo.SetReservationStatus(*ls)
	}
	return lruo
}

// SetCountStudent sets the "count_student" field.
func (lruo *LessonReservationUpdateOne) SetCountStudent(s string) *LessonReservationUpdateOne {
	lruo.mutation.SetCountStudent(s)
	return lruo
}

// SetNillableCountStudent sets the "count_student" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableCountStudent(s *string) *LessonReservationUpdateOne {
	if s != nil {
		lruo.SetCountStudent(*s)
	}
	return lruo
}

// SetGraduate sets the "graduate" field.
func (lruo *LessonReservationUpdateOne) SetGraduate(s string) *LessonReservationUpdateOne {
	lruo.mutation.SetGraduate(s)
	return lruo
}

// SetNillableGraduate sets the "graduate" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableGraduate(s *string) *LessonReservationUpdateOne {
	if s != nil {
		lruo.SetGraduate(*s)
	}
	return lruo
}

// SetSubject sets the "subject" field.
func (lruo *LessonReservationUpdateOne) SetSubject(s string) *LessonReservationUpdateOne {
	lruo.mutation.SetSubject(s)
	return lruo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableSubject(s *string) *LessonReservationUpdateOne {
	if s != nil {
		lruo.SetSubject(*s)
	}
	return lruo
}

// SetRemarks sets the "remarks" field.
func (lruo *LessonReservationUpdateOne) SetRemarks(s string) *LessonReservationUpdateOne {
	lruo.mutation.SetRemarks(s)
	return lruo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableRemarks(s *string) *LessonReservationUpdateOne {
	if s != nil {
		lruo.SetRemarks(*s)
	}
	return lruo
}

// ClearRemarks clears the value of the "remarks" field.
func (lruo *LessonReservationUpdateOne) ClearRemarks() *LessonReservationUpdateOne {
	lruo.mutation.ClearRemarks()
	return lruo
}

// SetReservationConfirmAt sets the "reservation_confirm_at" field.
func (lruo *LessonReservationUpdateOne) SetReservationConfirmAt(t time.Time) *LessonReservationUpdateOne {
	lruo.mutation.SetReservationConfirmAt(t)
	return lruo
}

// SetNillableReservationConfirmAt sets the "reservation_confirm_at" field if the given value is not nil.
func (lruo *LessonReservationUpdateOne) SetNillableReservationConfirmAt(t *time.Time) *LessonReservationUpdateOne {
	if t != nil {
		lruo.SetReservationConfirmAt(*t)
	}
	return lruo
}

// ClearReservationConfirmAt clears the value of the "reservation_confirm_at" field.
func (lruo *LessonReservationUpdateOne) ClearReservationConfirmAt() *LessonReservationUpdateOne {
	lruo.mutation.ClearReservationConfirmAt()
	return lruo
}

// SetLessonSchedule sets the "lesson_schedule" edge to the LessonSchedule entity.
func (lruo *LessonReservationUpdateOne) SetLessonSchedule(l *LessonSchedule) *LessonReservationUpdateOne {
	return lruo.SetLessonScheduleID(l.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (lruo *LessonReservationUpdateOne) SetSchool(s *School) *LessonReservationUpdateOne {
	return lruo.SetSchoolID(s.ID)
}

// SetUser sets the "user" edge to the User entity.
func (lruo *LessonReservationUpdateOne) SetUser(u *User) *LessonReservationUpdateOne {
	return lruo.SetUserID(u.ID)
}

// AddLessonReservationPreferredDateIDs adds the "lesson_reservation_preferred_dates" edge to the LessonReservationPreferredDate entity by IDs.
func (lruo *LessonReservationUpdateOne) AddLessonReservationPreferredDateIDs(ids ...int64) *LessonReservationUpdateOne {
	lruo.mutation.AddLessonReservationPreferredDateIDs(ids...)
	return lruo
}

// AddLessonReservationPreferredDates adds the "lesson_reservation_preferred_dates" edges to the LessonReservationPreferredDate entity.
func (lruo *LessonReservationUpdateOne) AddLessonReservationPreferredDates(l ...*LessonReservationPreferredDate) *LessonReservationUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lruo.AddLessonReservationPreferredDateIDs(ids...)
}

// AddLessonConfirmationIDs adds the "lesson_confirmation" edge to the LessonConfirmation entity by IDs.
func (lruo *LessonReservationUpdateOne) AddLessonConfirmationIDs(ids ...int64) *LessonReservationUpdateOne {
	lruo.mutation.AddLessonConfirmationIDs(ids...)
	return lruo
}

// AddLessonConfirmation adds the "lesson_confirmation" edges to the LessonConfirmation entity.
func (lruo *LessonReservationUpdateOne) AddLessonConfirmation(l ...*LessonConfirmation) *LessonReservationUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lruo.AddLessonConfirmationIDs(ids...)
}

// Mutation returns the LessonReservationMutation object of the builder.
func (lruo *LessonReservationUpdateOne) Mutation() *LessonReservationMutation {
	return lruo.mutation
}

// ClearLessonSchedule clears the "lesson_schedule" edge to the LessonSchedule entity.
func (lruo *LessonReservationUpdateOne) ClearLessonSchedule() *LessonReservationUpdateOne {
	lruo.mutation.ClearLessonSchedule()
	return lruo
}

// ClearSchool clears the "school" edge to the School entity.
func (lruo *LessonReservationUpdateOne) ClearSchool() *LessonReservationUpdateOne {
	lruo.mutation.ClearSchool()
	return lruo
}

// ClearUser clears the "user" edge to the User entity.
func (lruo *LessonReservationUpdateOne) ClearUser() *LessonReservationUpdateOne {
	lruo.mutation.ClearUser()
	return lruo
}

// ClearLessonReservationPreferredDates clears all "lesson_reservation_preferred_dates" edges to the LessonReservationPreferredDate entity.
func (lruo *LessonReservationUpdateOne) ClearLessonReservationPreferredDates() *LessonReservationUpdateOne {
	lruo.mutation.ClearLessonReservationPreferredDates()
	return lruo
}

// RemoveLessonReservationPreferredDateIDs removes the "lesson_reservation_preferred_dates" edge to LessonReservationPreferredDate entities by IDs.
func (lruo *LessonReservationUpdateOne) RemoveLessonReservationPreferredDateIDs(ids ...int64) *LessonReservationUpdateOne {
	lruo.mutation.RemoveLessonReservationPreferredDateIDs(ids...)
	return lruo
}

// RemoveLessonReservationPreferredDates removes "lesson_reservation_preferred_dates" edges to LessonReservationPreferredDate entities.
func (lruo *LessonReservationUpdateOne) RemoveLessonReservationPreferredDates(l ...*LessonReservationPreferredDate) *LessonReservationUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lruo.RemoveLessonReservationPreferredDateIDs(ids...)
}

// ClearLessonConfirmation clears all "lesson_confirmation" edges to the LessonConfirmation entity.
func (lruo *LessonReservationUpdateOne) ClearLessonConfirmation() *LessonReservationUpdateOne {
	lruo.mutation.ClearLessonConfirmation()
	return lruo
}

// RemoveLessonConfirmationIDs removes the "lesson_confirmation" edge to LessonConfirmation entities by IDs.
func (lruo *LessonReservationUpdateOne) RemoveLessonConfirmationIDs(ids ...int64) *LessonReservationUpdateOne {
	lruo.mutation.RemoveLessonConfirmationIDs(ids...)
	return lruo
}

// RemoveLessonConfirmation removes "lesson_confirmation" edges to LessonConfirmation entities.
func (lruo *LessonReservationUpdateOne) RemoveLessonConfirmation(l ...*LessonConfirmation) *LessonReservationUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lruo.RemoveLessonConfirmationIDs(ids...)
}

// Where appends a list predicates to the LessonReservationUpdate builder.
func (lruo *LessonReservationUpdateOne) Where(ps ...predicate.LessonReservation) *LessonReservationUpdateOne {
	lruo.mutation.Where(ps...)
	return lruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lruo *LessonReservationUpdateOne) Select(field string, fields ...string) *LessonReservationUpdateOne {
	lruo.fields = append([]string{field}, fields...)
	return lruo
}

// Save executes the query and returns the updated LessonReservation entity.
func (lruo *LessonReservationUpdateOne) Save(ctx context.Context) (*LessonReservation, error) {
	lruo.defaults()
	return withHooks(ctx, lruo.sqlSave, lruo.mutation, lruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lruo *LessonReservationUpdateOne) SaveX(ctx context.Context) *LessonReservation {
	node, err := lruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lruo *LessonReservationUpdateOne) Exec(ctx context.Context) error {
	_, err := lruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lruo *LessonReservationUpdateOne) ExecX(ctx context.Context) {
	if err := lruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lruo *LessonReservationUpdateOne) defaults() {
	if _, ok := lruo.mutation.UpdatedAt(); !ok {
		v := lessonreservation.UpdateDefaultUpdatedAt()
		lruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lruo *LessonReservationUpdateOne) check() error {
	if v, ok := lruo.mutation.LessonScheduleID(); ok {
		if err := lessonreservation.LessonScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_schedule_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.lesson_schedule_id": %w`, err)}
		}
	}
	if v, ok := lruo.mutation.SchoolID(); ok {
		if err := lessonreservation.SchoolIDValidator(v); err != nil {
			return &ValidationError{Name: "school_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.school_id": %w`, err)}
		}
	}
	if v, ok := lruo.mutation.UserID(); ok {
		if err := lessonreservation.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.user_id": %w`, err)}
		}
	}
	if v, ok := lruo.mutation.ReservationStatus(); ok {
		if err := lessonreservation.ReservationStatusValidator(v); err != nil {
			return &ValidationError{Name: "reservation_status", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.reservation_status": %w`, err)}
		}
	}
	if lruo.mutation.LessonScheduleCleared() && len(lruo.mutation.LessonScheduleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservation.lesson_schedule"`)
	}
	if lruo.mutation.SchoolCleared() && len(lruo.mutation.SchoolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservation.school"`)
	}
	if lruo.mutation.UserCleared() && len(lruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservation.user"`)
	}
	return nil
}

func (lruo *LessonReservationUpdateOne) sqlSave(ctx context.Context) (_node *LessonReservation, err error) {
	if err := lruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonreservation.Table, lessonreservation.Columns, sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt64))
	id, ok := lruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LessonReservation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonreservation.FieldID)
		for _, f := range fields {
			if !lessonreservation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lessonreservation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lruo.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonreservation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lruo.mutation.ReservationStatus(); ok {
		_spec.SetField(lessonreservation.FieldReservationStatus, field.TypeEnum, value)
	}
	if value, ok := lruo.mutation.CountStudent(); ok {
		_spec.SetField(lessonreservation.FieldCountStudent, field.TypeString, value)
	}
	if value, ok := lruo.mutation.Graduate(); ok {
		_spec.SetField(lessonreservation.FieldGraduate, field.TypeString, value)
	}
	if value, ok := lruo.mutation.Subject(); ok {
		_spec.SetField(lessonreservation.FieldSubject, field.TypeString, value)
	}
	if value, ok := lruo.mutation.Remarks(); ok {
		_spec.SetField(lessonreservation.FieldRemarks, field.TypeString, value)
	}
	if lruo.mutation.RemarksCleared() {
		_spec.ClearField(lessonreservation.FieldRemarks, field.TypeString)
	}
	if value, ok := lruo.mutation.ReservationConfirmAt(); ok {
		_spec.SetField(lessonreservation.FieldReservationConfirmAt, field.TypeTime, value)
	}
	if lruo.mutation.ReservationConfirmAtCleared() {
		_spec.ClearField(lessonreservation.FieldReservationConfirmAt, field.TypeTime)
	}
	if lruo.mutation.LessonScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.LessonScheduleTable,
			Columns: []string{lessonreservation.LessonScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonschedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.LessonScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.LessonScheduleTable,
			Columns: []string{lessonreservation.LessonScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonschedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.SchoolTable,
			Columns: []string{lessonreservation.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.SchoolTable,
			Columns: []string{lessonreservation.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.UserTable,
			Columns: []string{lessonreservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.UserTable,
			Columns: []string{lessonreservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.LessonReservationPreferredDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonReservationPreferredDatesTable,
			Columns: []string{lessonreservation.LessonReservationPreferredDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.RemovedLessonReservationPreferredDatesIDs(); len(nodes) > 0 && !lruo.mutation.LessonReservationPreferredDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonReservationPreferredDatesTable,
			Columns: []string{lessonreservation.LessonReservationPreferredDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.LessonReservationPreferredDatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonReservationPreferredDatesTable,
			Columns: []string{lessonreservation.LessonReservationPreferredDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.LessonConfirmationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonConfirmationTable,
			Columns: []string{lessonreservation.LessonConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.RemovedLessonConfirmationIDs(); len(nodes) > 0 && !lruo.mutation.LessonConfirmationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonConfirmationTable,
			Columns: []string{lessonreservation.LessonConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.LessonConfirmationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonConfirmationTable,
			Columns: []string{lessonreservation.LessonConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LessonReservation{config: lruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonreservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lruo.mutation.done = true
	return _node, nil
}
