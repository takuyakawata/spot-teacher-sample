// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// UploadFileCreate is the builder for creating a UploadFile entity.
type UploadFileCreate struct {
	config
	mutation *UploadFileMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ufc *UploadFileCreate) SetCreateTime(t time.Time) *UploadFileCreate {
	ufc.mutation.SetCreateTime(t)
	return ufc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ufc *UploadFileCreate) SetNillableCreateTime(t *time.Time) *UploadFileCreate {
	if t != nil {
		ufc.SetCreateTime(*t)
	}
	return ufc
}

// SetUpdateTime sets the "update_time" field.
func (ufc *UploadFileCreate) SetUpdateTime(t time.Time) *UploadFileCreate {
	ufc.mutation.SetUpdateTime(t)
	return ufc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ufc *UploadFileCreate) SetNillableUpdateTime(t *time.Time) *UploadFileCreate {
	if t != nil {
		ufc.SetUpdateTime(*t)
	}
	return ufc
}

// SetPhotoKey sets the "photo_key" field.
func (ufc *UploadFileCreate) SetPhotoKey(s string) *UploadFileCreate {
	ufc.mutation.SetPhotoKey(s)
	return ufc
}

// SetUserID sets the "user_id" field.
func (ufc *UploadFileCreate) SetUserID(i int64) *UploadFileCreate {
	ufc.mutation.SetUserID(i)
	return ufc
}

// Mutation returns the UploadFileMutation object of the builder.
func (ufc *UploadFileCreate) Mutation() *UploadFileMutation {
	return ufc.mutation
}

// Save creates the UploadFile in the database.
func (ufc *UploadFileCreate) Save(ctx context.Context) (*UploadFile, error) {
	ufc.defaults()
	return withHooks(ctx, ufc.sqlSave, ufc.mutation, ufc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufc *UploadFileCreate) SaveX(ctx context.Context) *UploadFile {
	v, err := ufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufc *UploadFileCreate) Exec(ctx context.Context) error {
	_, err := ufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufc *UploadFileCreate) ExecX(ctx context.Context) {
	if err := ufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufc *UploadFileCreate) defaults() {
	if _, ok := ufc.mutation.CreateTime(); !ok {
		v := uploadfile.DefaultCreateTime()
		ufc.mutation.SetCreateTime(v)
	}
	if _, ok := ufc.mutation.UpdateTime(); !ok {
		v := uploadfile.DefaultUpdateTime()
		ufc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufc *UploadFileCreate) check() error {
	if _, ok := ufc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UploadFile.create_time"`)}
	}
	if _, ok := ufc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UploadFile.update_time"`)}
	}
	if _, ok := ufc.mutation.PhotoKey(); !ok {
		return &ValidationError{Name: "photo_key", err: errors.New(`ent: missing required field "UploadFile.photo_key"`)}
	}
	if v, ok := ufc.mutation.PhotoKey(); ok {
		if err := uploadfile.PhotoKeyValidator(v); err != nil {
			return &ValidationError{Name: "photo_key", err: fmt.Errorf(`ent: validator failed for field "UploadFile.photo_key": %w`, err)}
		}
	}
	if _, ok := ufc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UploadFile.user_id"`)}
	}
	if v, ok := ufc.mutation.UserID(); ok {
		if err := uploadfile.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UploadFile.user_id": %w`, err)}
		}
	}
	return nil
}

func (ufc *UploadFileCreate) sqlSave(ctx context.Context) (*UploadFile, error) {
	if err := ufc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ufc.mutation.id = &_node.ID
	ufc.mutation.done = true
	return _node, nil
}

func (ufc *UploadFileCreate) createSpec() (*UploadFile, *sqlgraph.CreateSpec) {
	var (
		_node = &UploadFile{config: ufc.config}
		_spec = sqlgraph.NewCreateSpec(uploadfile.Table, sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt))
	)
	if value, ok := ufc.mutation.CreateTime(); ok {
		_spec.SetField(uploadfile.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ufc.mutation.UpdateTime(); ok {
		_spec.SetField(uploadfile.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ufc.mutation.PhotoKey(); ok {
		_spec.SetField(uploadfile.FieldPhotoKey, field.TypeString, value)
		_node.PhotoKey = value
	}
	if value, ok := ufc.mutation.UserID(); ok {
		_spec.SetField(uploadfile.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	return _node, _spec
}

// UploadFileCreateBulk is the builder for creating many UploadFile entities in bulk.
type UploadFileCreateBulk struct {
	config
	err      error
	builders []*UploadFileCreate
}

// Save creates the UploadFile entities in the database.
func (ufcb *UploadFileCreateBulk) Save(ctx context.Context) ([]*UploadFile, error) {
	if ufcb.err != nil {
		return nil, ufcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufcb.builders))
	nodes := make([]*UploadFile, len(ufcb.builders))
	mutators := make([]Mutator, len(ufcb.builders))
	for i := range ufcb.builders {
		func(i int, root context.Context) {
			builder := ufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UploadFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufcb *UploadFileCreateBulk) SaveX(ctx context.Context) []*UploadFile {
	v, err := ufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufcb *UploadFileCreateBulk) Exec(ctx context.Context) error {
	_, err := ufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufcb *UploadFileCreateBulk) ExecX(ctx context.Context) {
	if err := ufcb.Exec(ctx); err != nil {
		panic(err)
	}
}
