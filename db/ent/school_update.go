// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// SchoolUpdate is the builder for updating School entities.
type SchoolUpdate struct {
	config
	hooks    []Hook
	mutation *SchoolMutation
}

// Where appends a list predicates to the SchoolUpdate builder.
func (su *SchoolUpdate) Where(ps ...predicate.School) *SchoolUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSchoolType sets the "school_type" field.
func (su *SchoolUpdate) SetSchoolType(st school.SchoolType) *SchoolUpdate {
	su.mutation.SetSchoolType(st)
	return su
}

// SetNillableSchoolType sets the "school_type" field if the given value is not nil.
func (su *SchoolUpdate) SetNillableSchoolType(st *school.SchoolType) *SchoolUpdate {
	if st != nil {
		su.SetSchoolType(*st)
	}
	return su
}

// SetName sets the "name" field.
func (su *SchoolUpdate) SetName(s string) *SchoolUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SchoolUpdate) SetNillableName(s *string) *SchoolUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetEmail sets the "email" field.
func (su *SchoolUpdate) SetEmail(s string) *SchoolUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (su *SchoolUpdate) SetNillableEmail(s *string) *SchoolUpdate {
	if s != nil {
		su.SetEmail(*s)
	}
	return su
}

// ClearEmail clears the value of the "email" field.
func (su *SchoolUpdate) ClearEmail() *SchoolUpdate {
	su.mutation.ClearEmail()
	return su
}

// SetPhoneNumber sets the "phone_number" field.
func (su *SchoolUpdate) SetPhoneNumber(s string) *SchoolUpdate {
	su.mutation.SetPhoneNumber(s)
	return su
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (su *SchoolUpdate) SetNillablePhoneNumber(s *string) *SchoolUpdate {
	if s != nil {
		su.SetPhoneNumber(*s)
	}
	return su
}

// SetPrefecture sets the "prefecture" field.
func (su *SchoolUpdate) SetPrefecture(i int) *SchoolUpdate {
	su.mutation.ResetPrefecture()
	su.mutation.SetPrefecture(i)
	return su
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (su *SchoolUpdate) SetNillablePrefecture(i *int) *SchoolUpdate {
	if i != nil {
		su.SetPrefecture(*i)
	}
	return su
}

// AddPrefecture adds i to the "prefecture" field.
func (su *SchoolUpdate) AddPrefecture(i int) *SchoolUpdate {
	su.mutation.AddPrefecture(i)
	return su
}

// SetCity sets the "city" field.
func (su *SchoolUpdate) SetCity(s string) *SchoolUpdate {
	su.mutation.SetCity(s)
	return su
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (su *SchoolUpdate) SetNillableCity(s *string) *SchoolUpdate {
	if s != nil {
		su.SetCity(*s)
	}
	return su
}

// SetStreet sets the "street" field.
func (su *SchoolUpdate) SetStreet(s string) *SchoolUpdate {
	su.mutation.SetStreet(s)
	return su
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (su *SchoolUpdate) SetNillableStreet(s *string) *SchoolUpdate {
	if s != nil {
		su.SetStreet(*s)
	}
	return su
}

// ClearStreet clears the value of the "street" field.
func (su *SchoolUpdate) ClearStreet() *SchoolUpdate {
	su.mutation.ClearStreet()
	return su
}

// SetPostCode sets the "post_code" field.
func (su *SchoolUpdate) SetPostCode(s string) *SchoolUpdate {
	su.mutation.SetPostCode(s)
	return su
}

// SetNillablePostCode sets the "post_code" field if the given value is not nil.
func (su *SchoolUpdate) SetNillablePostCode(s *string) *SchoolUpdate {
	if s != nil {
		su.SetPostCode(*s)
	}
	return su
}

// SetURL sets the "url" field.
func (su *SchoolUpdate) SetURL(s string) *SchoolUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SchoolUpdate) SetNillableURL(s *string) *SchoolUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// ClearURL clears the value of the "url" field.
func (su *SchoolUpdate) ClearURL() *SchoolUpdate {
	su.mutation.ClearURL()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SchoolUpdate) SetUpdatedAt(t time.Time) *SchoolUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// AddTeacherIDs adds the "teachers" edge to the User entity by IDs.
func (su *SchoolUpdate) AddTeacherIDs(ids ...int64) *SchoolUpdate {
	su.mutation.AddTeacherIDs(ids...)
	return su
}

// AddTeachers adds the "teachers" edges to the User entity.
func (su *SchoolUpdate) AddTeachers(u ...*User) *SchoolUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddTeacherIDs(ids...)
}

// Mutation returns the SchoolMutation object of the builder.
func (su *SchoolUpdate) Mutation() *SchoolMutation {
	return su.mutation
}

// ClearTeachers clears all "teachers" edges to the User entity.
func (su *SchoolUpdate) ClearTeachers() *SchoolUpdate {
	su.mutation.ClearTeachers()
	return su
}

// RemoveTeacherIDs removes the "teachers" edge to User entities by IDs.
func (su *SchoolUpdate) RemoveTeacherIDs(ids ...int64) *SchoolUpdate {
	su.mutation.RemoveTeacherIDs(ids...)
	return su
}

// RemoveTeachers removes "teachers" edges to User entities.
func (su *SchoolUpdate) RemoveTeachers(u ...*User) *SchoolUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveTeacherIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SchoolUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SchoolUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SchoolUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SchoolUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SchoolUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := school.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SchoolUpdate) check() error {
	if v, ok := su.mutation.SchoolType(); ok {
		if err := school.SchoolTypeValidator(v); err != nil {
			return &ValidationError{Name: "school_type", err: fmt.Errorf(`ent: validator failed for field "School.school_type": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := school.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "School.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Email(); ok {
		if err := school.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "School.email": %w`, err)}
		}
	}
	if v, ok := su.mutation.PhoneNumber(); ok {
		if err := school.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "School.phone_number": %w`, err)}
		}
	}
	if v, ok := su.mutation.Prefecture(); ok {
		if err := school.PrefectureValidator(v); err != nil {
			return &ValidationError{Name: "prefecture", err: fmt.Errorf(`ent: validator failed for field "School.prefecture": %w`, err)}
		}
	}
	if v, ok := su.mutation.City(); ok {
		if err := school.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "School.city": %w`, err)}
		}
	}
	if v, ok := su.mutation.PostCode(); ok {
		if err := school.PostCodeValidator(v); err != nil {
			return &ValidationError{Name: "post_code", err: fmt.Errorf(`ent: validator failed for field "School.post_code": %w`, err)}
		}
	}
	return nil
}

func (su *SchoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(school.Table, school.Columns, sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SchoolType(); ok {
		_spec.SetField(school.FieldSchoolType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(school.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(school.FieldEmail, field.TypeString, value)
	}
	if su.mutation.EmailCleared() {
		_spec.ClearField(school.FieldEmail, field.TypeString)
	}
	if value, ok := su.mutation.PhoneNumber(); ok {
		_spec.SetField(school.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := su.mutation.Prefecture(); ok {
		_spec.SetField(school.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedPrefecture(); ok {
		_spec.AddField(school.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := su.mutation.City(); ok {
		_spec.SetField(school.FieldCity, field.TypeString, value)
	}
	if value, ok := su.mutation.Street(); ok {
		_spec.SetField(school.FieldStreet, field.TypeString, value)
	}
	if su.mutation.StreetCleared() {
		_spec.ClearField(school.FieldStreet, field.TypeString)
	}
	if value, ok := su.mutation.PostCode(); ok {
		_spec.SetField(school.FieldPostCode, field.TypeString, value)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(school.FieldURL, field.TypeString, value)
	}
	if su.mutation.URLCleared() {
		_spec.ClearField(school.FieldURL, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(school.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.TeachersTable,
			Columns: []string{school.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !su.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.TeachersTable,
			Columns: []string{school.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.TeachersTable,
			Columns: []string{school.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{school.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SchoolUpdateOne is the builder for updating a single School entity.
type SchoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SchoolMutation
}

// SetSchoolType sets the "school_type" field.
func (suo *SchoolUpdateOne) SetSchoolType(st school.SchoolType) *SchoolUpdateOne {
	suo.mutation.SetSchoolType(st)
	return suo
}

// SetNillableSchoolType sets the "school_type" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableSchoolType(st *school.SchoolType) *SchoolUpdateOne {
	if st != nil {
		suo.SetSchoolType(*st)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SchoolUpdateOne) SetName(s string) *SchoolUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableName(s *string) *SchoolUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetEmail sets the "email" field.
func (suo *SchoolUpdateOne) SetEmail(s string) *SchoolUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableEmail(s *string) *SchoolUpdateOne {
	if s != nil {
		suo.SetEmail(*s)
	}
	return suo
}

// ClearEmail clears the value of the "email" field.
func (suo *SchoolUpdateOne) ClearEmail() *SchoolUpdateOne {
	suo.mutation.ClearEmail()
	return suo
}

// SetPhoneNumber sets the "phone_number" field.
func (suo *SchoolUpdateOne) SetPhoneNumber(s string) *SchoolUpdateOne {
	suo.mutation.SetPhoneNumber(s)
	return suo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillablePhoneNumber(s *string) *SchoolUpdateOne {
	if s != nil {
		suo.SetPhoneNumber(*s)
	}
	return suo
}

// SetPrefecture sets the "prefecture" field.
func (suo *SchoolUpdateOne) SetPrefecture(i int) *SchoolUpdateOne {
	suo.mutation.ResetPrefecture()
	suo.mutation.SetPrefecture(i)
	return suo
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillablePrefecture(i *int) *SchoolUpdateOne {
	if i != nil {
		suo.SetPrefecture(*i)
	}
	return suo
}

// AddPrefecture adds i to the "prefecture" field.
func (suo *SchoolUpdateOne) AddPrefecture(i int) *SchoolUpdateOne {
	suo.mutation.AddPrefecture(i)
	return suo
}

// SetCity sets the "city" field.
func (suo *SchoolUpdateOne) SetCity(s string) *SchoolUpdateOne {
	suo.mutation.SetCity(s)
	return suo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableCity(s *string) *SchoolUpdateOne {
	if s != nil {
		suo.SetCity(*s)
	}
	return suo
}

// SetStreet sets the "street" field.
func (suo *SchoolUpdateOne) SetStreet(s string) *SchoolUpdateOne {
	suo.mutation.SetStreet(s)
	return suo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableStreet(s *string) *SchoolUpdateOne {
	if s != nil {
		suo.SetStreet(*s)
	}
	return suo
}

// ClearStreet clears the value of the "street" field.
func (suo *SchoolUpdateOne) ClearStreet() *SchoolUpdateOne {
	suo.mutation.ClearStreet()
	return suo
}

// SetPostCode sets the "post_code" field.
func (suo *SchoolUpdateOne) SetPostCode(s string) *SchoolUpdateOne {
	suo.mutation.SetPostCode(s)
	return suo
}

// SetNillablePostCode sets the "post_code" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillablePostCode(s *string) *SchoolUpdateOne {
	if s != nil {
		suo.SetPostCode(*s)
	}
	return suo
}

// SetURL sets the "url" field.
func (suo *SchoolUpdateOne) SetURL(s string) *SchoolUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableURL(s *string) *SchoolUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// ClearURL clears the value of the "url" field.
func (suo *SchoolUpdateOne) ClearURL() *SchoolUpdateOne {
	suo.mutation.ClearURL()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SchoolUpdateOne) SetUpdatedAt(t time.Time) *SchoolUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// AddTeacherIDs adds the "teachers" edge to the User entity by IDs.
func (suo *SchoolUpdateOne) AddTeacherIDs(ids ...int64) *SchoolUpdateOne {
	suo.mutation.AddTeacherIDs(ids...)
	return suo
}

// AddTeachers adds the "teachers" edges to the User entity.
func (suo *SchoolUpdateOne) AddTeachers(u ...*User) *SchoolUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddTeacherIDs(ids...)
}

// Mutation returns the SchoolMutation object of the builder.
func (suo *SchoolUpdateOne) Mutation() *SchoolMutation {
	return suo.mutation
}

// ClearTeachers clears all "teachers" edges to the User entity.
func (suo *SchoolUpdateOne) ClearTeachers() *SchoolUpdateOne {
	suo.mutation.ClearTeachers()
	return suo
}

// RemoveTeacherIDs removes the "teachers" edge to User entities by IDs.
func (suo *SchoolUpdateOne) RemoveTeacherIDs(ids ...int64) *SchoolUpdateOne {
	suo.mutation.RemoveTeacherIDs(ids...)
	return suo
}

// RemoveTeachers removes "teachers" edges to User entities.
func (suo *SchoolUpdateOne) RemoveTeachers(u ...*User) *SchoolUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveTeacherIDs(ids...)
}

// Where appends a list predicates to the SchoolUpdate builder.
func (suo *SchoolUpdateOne) Where(ps ...predicate.School) *SchoolUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SchoolUpdateOne) Select(field string, fields ...string) *SchoolUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated School entity.
func (suo *SchoolUpdateOne) Save(ctx context.Context) (*School, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SchoolUpdateOne) SaveX(ctx context.Context) *School {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SchoolUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SchoolUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SchoolUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := school.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SchoolUpdateOne) check() error {
	if v, ok := suo.mutation.SchoolType(); ok {
		if err := school.SchoolTypeValidator(v); err != nil {
			return &ValidationError{Name: "school_type", err: fmt.Errorf(`ent: validator failed for field "School.school_type": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := school.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "School.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Email(); ok {
		if err := school.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "School.email": %w`, err)}
		}
	}
	if v, ok := suo.mutation.PhoneNumber(); ok {
		if err := school.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "School.phone_number": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Prefecture(); ok {
		if err := school.PrefectureValidator(v); err != nil {
			return &ValidationError{Name: "prefecture", err: fmt.Errorf(`ent: validator failed for field "School.prefecture": %w`, err)}
		}
	}
	if v, ok := suo.mutation.City(); ok {
		if err := school.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "School.city": %w`, err)}
		}
	}
	if v, ok := suo.mutation.PostCode(); ok {
		if err := school.PostCodeValidator(v); err != nil {
			return &ValidationError{Name: "post_code", err: fmt.Errorf(`ent: validator failed for field "School.post_code": %w`, err)}
		}
	}
	return nil
}

func (suo *SchoolUpdateOne) sqlSave(ctx context.Context) (_node *School, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(school.Table, school.Columns, sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "School.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, school.FieldID)
		for _, f := range fields {
			if !school.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != school.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SchoolType(); ok {
		_spec.SetField(school.FieldSchoolType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(school.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(school.FieldEmail, field.TypeString, value)
	}
	if suo.mutation.EmailCleared() {
		_spec.ClearField(school.FieldEmail, field.TypeString)
	}
	if value, ok := suo.mutation.PhoneNumber(); ok {
		_spec.SetField(school.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := suo.mutation.Prefecture(); ok {
		_spec.SetField(school.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedPrefecture(); ok {
		_spec.AddField(school.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := suo.mutation.City(); ok {
		_spec.SetField(school.FieldCity, field.TypeString, value)
	}
	if value, ok := suo.mutation.Street(); ok {
		_spec.SetField(school.FieldStreet, field.TypeString, value)
	}
	if suo.mutation.StreetCleared() {
		_spec.ClearField(school.FieldStreet, field.TypeString)
	}
	if value, ok := suo.mutation.PostCode(); ok {
		_spec.SetField(school.FieldPostCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(school.FieldURL, field.TypeString, value)
	}
	if suo.mutation.URLCleared() {
		_spec.ClearField(school.FieldURL, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(school.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.TeachersTable,
			Columns: []string{school.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !suo.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.TeachersTable,
			Columns: []string{school.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.TeachersTable,
			Columns: []string{school.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &School{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{school.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
