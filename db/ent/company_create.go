// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/company"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// CompanyCreate is the builder for creating a Company entity.
type CompanyCreate struct {
	config
	mutation *CompanyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CompanyCreate) SetName(s string) *CompanyCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetPrefecture sets the "prefecture" field.
func (cc *CompanyCreate) SetPrefecture(i int) *CompanyCreate {
	cc.mutation.SetPrefecture(i)
	return cc
}

// SetCity sets the "city" field.
func (cc *CompanyCreate) SetCity(s string) *CompanyCreate {
	cc.mutation.SetCity(s)
	return cc
}

// SetStreet sets the "street" field.
func (cc *CompanyCreate) SetStreet(s string) *CompanyCreate {
	cc.mutation.SetStreet(s)
	return cc
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableStreet(s *string) *CompanyCreate {
	if s != nil {
		cc.SetStreet(*s)
	}
	return cc
}

// SetPostCode sets the "post_code" field.
func (cc *CompanyCreate) SetPostCode(s string) *CompanyCreate {
	cc.mutation.SetPostCode(s)
	return cc
}

// SetPhoneNumber sets the "phone_number" field.
func (cc *CompanyCreate) SetPhoneNumber(s string) *CompanyCreate {
	cc.mutation.SetPhoneNumber(s)
	return cc
}

// SetURL sets the "url" field.
func (cc *CompanyCreate) SetURL(s string) *CompanyCreate {
	cc.mutation.SetURL(s)
	return cc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableURL(s *string) *CompanyCreate {
	if s != nil {
		cc.SetURL(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CompanyCreate) SetCreatedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableCreatedAt(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CompanyCreate) SetUpdatedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableUpdatedAt(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CompanyCreate) SetID(i int64) *CompanyCreate {
	cc.mutation.SetID(i)
	return cc
}

// AddLessonPlanIDs adds the "lesson_plans" edge to the LessonPlan entity by IDs.
func (cc *CompanyCreate) AddLessonPlanIDs(ids ...int64) *CompanyCreate {
	cc.mutation.AddLessonPlanIDs(ids...)
	return cc
}

// AddLessonPlans adds the "lesson_plans" edges to the LessonPlan entity.
func (cc *CompanyCreate) AddLessonPlans(l ...*LessonPlan) *CompanyCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cc.AddLessonPlanIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (cc *CompanyCreate) AddMemberIDs(ids ...int64) *CompanyCreate {
	cc.mutation.AddMemberIDs(ids...)
	return cc
}

// AddMembers adds the "members" edges to the User entity.
func (cc *CompanyCreate) AddMembers(u ...*User) *CompanyCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddMemberIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cc *CompanyCreate) Mutation() *CompanyMutation {
	return cc.mutation
}

// Save creates the Company in the database.
func (cc *CompanyCreate) Save(ctx context.Context) (*Company, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompanyCreate) SaveX(ctx context.Context) *Company {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompanyCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompanyCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompanyCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := company.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := company.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompanyCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Company.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Prefecture(); !ok {
		return &ValidationError{Name: "prefecture", err: errors.New(`ent: missing required field "Company.prefecture"`)}
	}
	if v, ok := cc.mutation.Prefecture(); ok {
		if err := company.PrefectureValidator(v); err != nil {
			return &ValidationError{Name: "prefecture", err: fmt.Errorf(`ent: validator failed for field "Company.prefecture": %w`, err)}
		}
	}
	if _, ok := cc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Company.city"`)}
	}
	if v, ok := cc.mutation.City(); ok {
		if err := company.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Company.city": %w`, err)}
		}
	}
	if _, ok := cc.mutation.PostCode(); !ok {
		return &ValidationError{Name: "post_code", err: errors.New(`ent: missing required field "Company.post_code"`)}
	}
	if v, ok := cc.mutation.PostCode(); ok {
		if err := company.PostCodeValidator(v); err != nil {
			return &ValidationError{Name: "post_code", err: fmt.Errorf(`ent: validator failed for field "Company.post_code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Company.phone_number"`)}
	}
	if v, ok := cc.mutation.PhoneNumber(); ok {
		if err := company.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Company.phone_number": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Company.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Company.updated_at"`)}
	}
	return nil
}

func (cc *CompanyCreate) sqlSave(ctx context.Context) (*Company, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompanyCreate) createSpec() (*Company, *sqlgraph.CreateSpec) {
	var (
		_node = &Company{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(company.Table, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt64))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Prefecture(); ok {
		_spec.SetField(company.FieldPrefecture, field.TypeInt, value)
		_node.Prefecture = value
	}
	if value, ok := cc.mutation.City(); ok {
		_spec.SetField(company.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := cc.mutation.Street(); ok {
		_spec.SetField(company.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := cc.mutation.PostCode(); ok {
		_spec.SetField(company.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := cc.mutation.PhoneNumber(); ok {
		_spec.SetField(company.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := cc.mutation.URL(); ok {
		_spec.SetField(company.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(company.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.LessonPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LessonPlansTable,
			Columns: []string{company.LessonPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MembersTable,
			Columns: []string{company.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyCreateBulk is the builder for creating many Company entities in bulk.
type CompanyCreateBulk struct {
	config
	err      error
	builders []*CompanyCreate
}

// Save creates the Company entities in the database.
func (ccb *CompanyCreateBulk) Save(ctx context.Context) ([]*Company, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Company, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompanyCreateBulk) SaveX(ctx context.Context) []*Company {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompanyCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompanyCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
