// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonconfirmation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// LessonReservationQuery is the builder for querying LessonReservation entities.
type LessonReservationQuery struct {
	config
	ctx                                 *QueryContext
	order                               []lessonreservation.OrderOption
	inters                              []Interceptor
	predicates                          []predicate.LessonReservation
	withLessonSchedule                  *LessonScheduleQuery
	withSchool                          *SchoolQuery
	withUser                            *UserQuery
	withLessonReservationPreferredDates *LessonReservationPreferredDateQuery
	withLessonConfirmation              *LessonConfirmationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LessonReservationQuery builder.
func (lrq *LessonReservationQuery) Where(ps ...predicate.LessonReservation) *LessonReservationQuery {
	lrq.predicates = append(lrq.predicates, ps...)
	return lrq
}

// Limit the number of records to be returned by this query.
func (lrq *LessonReservationQuery) Limit(limit int) *LessonReservationQuery {
	lrq.ctx.Limit = &limit
	return lrq
}

// Offset to start from.
func (lrq *LessonReservationQuery) Offset(offset int) *LessonReservationQuery {
	lrq.ctx.Offset = &offset
	return lrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lrq *LessonReservationQuery) Unique(unique bool) *LessonReservationQuery {
	lrq.ctx.Unique = &unique
	return lrq
}

// Order specifies how the records should be ordered.
func (lrq *LessonReservationQuery) Order(o ...lessonreservation.OrderOption) *LessonReservationQuery {
	lrq.order = append(lrq.order, o...)
	return lrq
}

// QueryLessonSchedule chains the current query on the "lesson_schedule" edge.
func (lrq *LessonReservationQuery) QueryLessonSchedule() *LessonScheduleQuery {
	query := (&LessonScheduleClient{config: lrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, selector),
			sqlgraph.To(lessonschedule.Table, lessonschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservation.LessonScheduleTable, lessonreservation.LessonScheduleColumn),
		)
		fromU = sqlgraph.SetNeighbors(lrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchool chains the current query on the "school" edge.
func (lrq *LessonReservationQuery) QuerySchool() *SchoolQuery {
	query := (&SchoolClient{config: lrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, selector),
			sqlgraph.To(school.Table, school.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservation.SchoolTable, lessonreservation.SchoolColumn),
		)
		fromU = sqlgraph.SetNeighbors(lrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (lrq *LessonReservationQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: lrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonreservation.UserTable, lessonreservation.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(lrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLessonReservationPreferredDates chains the current query on the "lesson_reservation_preferred_dates" edge.
func (lrq *LessonReservationQuery) QueryLessonReservationPreferredDates() *LessonReservationPreferredDateQuery {
	query := (&LessonReservationPreferredDateClient{config: lrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, selector),
			sqlgraph.To(lessonreservationpreferreddate.Table, lessonreservationpreferreddate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonreservation.LessonReservationPreferredDatesTable, lessonreservation.LessonReservationPreferredDatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLessonConfirmation chains the current query on the "lesson_confirmation" edge.
func (lrq *LessonReservationQuery) QueryLessonConfirmation() *LessonConfirmationQuery {
	query := (&LessonConfirmationClient{config: lrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonreservation.Table, lessonreservation.FieldID, selector),
			sqlgraph.To(lessonconfirmation.Table, lessonconfirmation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonreservation.LessonConfirmationTable, lessonreservation.LessonConfirmationColumn),
		)
		fromU = sqlgraph.SetNeighbors(lrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LessonReservation entity from the query.
// Returns a *NotFoundError when no LessonReservation was found.
func (lrq *LessonReservationQuery) First(ctx context.Context) (*LessonReservation, error) {
	nodes, err := lrq.Limit(1).All(setContextOp(ctx, lrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lessonreservation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lrq *LessonReservationQuery) FirstX(ctx context.Context) *LessonReservation {
	node, err := lrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LessonReservation ID from the query.
// Returns a *NotFoundError when no LessonReservation ID was found.
func (lrq *LessonReservationQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lrq.Limit(1).IDs(setContextOp(ctx, lrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lessonreservation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lrq *LessonReservationQuery) FirstIDX(ctx context.Context) int64 {
	id, err := lrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LessonReservation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LessonReservation entity is found.
// Returns a *NotFoundError when no LessonReservation entities are found.
func (lrq *LessonReservationQuery) Only(ctx context.Context) (*LessonReservation, error) {
	nodes, err := lrq.Limit(2).All(setContextOp(ctx, lrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lessonreservation.Label}
	default:
		return nil, &NotSingularError{lessonreservation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lrq *LessonReservationQuery) OnlyX(ctx context.Context) *LessonReservation {
	node, err := lrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LessonReservation ID in the query.
// Returns a *NotSingularError when more than one LessonReservation ID is found.
// Returns a *NotFoundError when no entities are found.
func (lrq *LessonReservationQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lrq.Limit(2).IDs(setContextOp(ctx, lrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lessonreservation.Label}
	default:
		err = &NotSingularError{lessonreservation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lrq *LessonReservationQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := lrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LessonReservations.
func (lrq *LessonReservationQuery) All(ctx context.Context) ([]*LessonReservation, error) {
	ctx = setContextOp(ctx, lrq.ctx, ent.OpQueryAll)
	if err := lrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LessonReservation, *LessonReservationQuery]()
	return withInterceptors[[]*LessonReservation](ctx, lrq, qr, lrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lrq *LessonReservationQuery) AllX(ctx context.Context) []*LessonReservation {
	nodes, err := lrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LessonReservation IDs.
func (lrq *LessonReservationQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if lrq.ctx.Unique == nil && lrq.path != nil {
		lrq.Unique(true)
	}
	ctx = setContextOp(ctx, lrq.ctx, ent.OpQueryIDs)
	if err = lrq.Select(lessonreservation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lrq *LessonReservationQuery) IDsX(ctx context.Context) []int64 {
	ids, err := lrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lrq *LessonReservationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lrq.ctx, ent.OpQueryCount)
	if err := lrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lrq, querierCount[*LessonReservationQuery](), lrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lrq *LessonReservationQuery) CountX(ctx context.Context) int {
	count, err := lrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lrq *LessonReservationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lrq.ctx, ent.OpQueryExist)
	switch _, err := lrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lrq *LessonReservationQuery) ExistX(ctx context.Context) bool {
	exist, err := lrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LessonReservationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lrq *LessonReservationQuery) Clone() *LessonReservationQuery {
	if lrq == nil {
		return nil
	}
	return &LessonReservationQuery{
		config:                              lrq.config,
		ctx:                                 lrq.ctx.Clone(),
		order:                               append([]lessonreservation.OrderOption{}, lrq.order...),
		inters:                              append([]Interceptor{}, lrq.inters...),
		predicates:                          append([]predicate.LessonReservation{}, lrq.predicates...),
		withLessonSchedule:                  lrq.withLessonSchedule.Clone(),
		withSchool:                          lrq.withSchool.Clone(),
		withUser:                            lrq.withUser.Clone(),
		withLessonReservationPreferredDates: lrq.withLessonReservationPreferredDates.Clone(),
		withLessonConfirmation:              lrq.withLessonConfirmation.Clone(),
		// clone intermediate query.
		sql:  lrq.sql.Clone(),
		path: lrq.path,
	}
}

// WithLessonSchedule tells the query-builder to eager-load the nodes that are connected to
// the "lesson_schedule" edge. The optional arguments are used to configure the query builder of the edge.
func (lrq *LessonReservationQuery) WithLessonSchedule(opts ...func(*LessonScheduleQuery)) *LessonReservationQuery {
	query := (&LessonScheduleClient{config: lrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lrq.withLessonSchedule = query
	return lrq
}

// WithSchool tells the query-builder to eager-load the nodes that are connected to
// the "school" edge. The optional arguments are used to configure the query builder of the edge.
func (lrq *LessonReservationQuery) WithSchool(opts ...func(*SchoolQuery)) *LessonReservationQuery {
	query := (&SchoolClient{config: lrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lrq.withSchool = query
	return lrq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (lrq *LessonReservationQuery) WithUser(opts ...func(*UserQuery)) *LessonReservationQuery {
	query := (&UserClient{config: lrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lrq.withUser = query
	return lrq
}

// WithLessonReservationPreferredDates tells the query-builder to eager-load the nodes that are connected to
// the "lesson_reservation_preferred_dates" edge. The optional arguments are used to configure the query builder of the edge.
func (lrq *LessonReservationQuery) WithLessonReservationPreferredDates(opts ...func(*LessonReservationPreferredDateQuery)) *LessonReservationQuery {
	query := (&LessonReservationPreferredDateClient{config: lrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lrq.withLessonReservationPreferredDates = query
	return lrq
}

// WithLessonConfirmation tells the query-builder to eager-load the nodes that are connected to
// the "lesson_confirmation" edge. The optional arguments are used to configure the query builder of the edge.
func (lrq *LessonReservationQuery) WithLessonConfirmation(opts ...func(*LessonConfirmationQuery)) *LessonReservationQuery {
	query := (&LessonConfirmationClient{config: lrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lrq.withLessonConfirmation = query
	return lrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LessonReservation.Query().
//		GroupBy(lessonreservation.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lrq *LessonReservationQuery) GroupBy(field string, fields ...string) *LessonReservationGroupBy {
	lrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LessonReservationGroupBy{build: lrq}
	grbuild.flds = &lrq.ctx.Fields
	grbuild.label = lessonreservation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LessonReservation.Query().
//		Select(lessonreservation.FieldCreatedAt).
//		Scan(ctx, &v)
func (lrq *LessonReservationQuery) Select(fields ...string) *LessonReservationSelect {
	lrq.ctx.Fields = append(lrq.ctx.Fields, fields...)
	sbuild := &LessonReservationSelect{LessonReservationQuery: lrq}
	sbuild.label = lessonreservation.Label
	sbuild.flds, sbuild.scan = &lrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LessonReservationSelect configured with the given aggregations.
func (lrq *LessonReservationQuery) Aggregate(fns ...AggregateFunc) *LessonReservationSelect {
	return lrq.Select().Aggregate(fns...)
}

func (lrq *LessonReservationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lrq); err != nil {
				return err
			}
		}
	}
	for _, f := range lrq.ctx.Fields {
		if !lessonreservation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lrq.path != nil {
		prev, err := lrq.path(ctx)
		if err != nil {
			return err
		}
		lrq.sql = prev
	}
	return nil
}

func (lrq *LessonReservationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LessonReservation, error) {
	var (
		nodes       = []*LessonReservation{}
		_spec       = lrq.querySpec()
		loadedTypes = [5]bool{
			lrq.withLessonSchedule != nil,
			lrq.withSchool != nil,
			lrq.withUser != nil,
			lrq.withLessonReservationPreferredDates != nil,
			lrq.withLessonConfirmation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LessonReservation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LessonReservation{config: lrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lrq.withLessonSchedule; query != nil {
		if err := lrq.loadLessonSchedule(ctx, query, nodes, nil,
			func(n *LessonReservation, e *LessonSchedule) { n.Edges.LessonSchedule = e }); err != nil {
			return nil, err
		}
	}
	if query := lrq.withSchool; query != nil {
		if err := lrq.loadSchool(ctx, query, nodes, nil,
			func(n *LessonReservation, e *School) { n.Edges.School = e }); err != nil {
			return nil, err
		}
	}
	if query := lrq.withUser; query != nil {
		if err := lrq.loadUser(ctx, query, nodes, nil,
			func(n *LessonReservation, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := lrq.withLessonReservationPreferredDates; query != nil {
		if err := lrq.loadLessonReservationPreferredDates(ctx, query, nodes,
			func(n *LessonReservation) {
				n.Edges.LessonReservationPreferredDates = []*LessonReservationPreferredDate{}
			},
			func(n *LessonReservation, e *LessonReservationPreferredDate) {
				n.Edges.LessonReservationPreferredDates = append(n.Edges.LessonReservationPreferredDates, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := lrq.withLessonConfirmation; query != nil {
		if err := lrq.loadLessonConfirmation(ctx, query, nodes,
			func(n *LessonReservation) { n.Edges.LessonConfirmation = []*LessonConfirmation{} },
			func(n *LessonReservation, e *LessonConfirmation) {
				n.Edges.LessonConfirmation = append(n.Edges.LessonConfirmation, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lrq *LessonReservationQuery) loadLessonSchedule(ctx context.Context, query *LessonScheduleQuery, nodes []*LessonReservation, init func(*LessonReservation), assign func(*LessonReservation, *LessonSchedule)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonReservation)
	for i := range nodes {
		fk := nodes[i].LessonScheduleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lessonschedule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lesson_schedule_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lrq *LessonReservationQuery) loadSchool(ctx context.Context, query *SchoolQuery, nodes []*LessonReservation, init func(*LessonReservation), assign func(*LessonReservation, *School)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonReservation)
	for i := range nodes {
		fk := nodes[i].SchoolID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(school.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "school_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lrq *LessonReservationQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*LessonReservation, init func(*LessonReservation), assign func(*LessonReservation, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonReservation)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lrq *LessonReservationQuery) loadLessonReservationPreferredDates(ctx context.Context, query *LessonReservationPreferredDateQuery, nodes []*LessonReservation, init func(*LessonReservation), assign func(*LessonReservation, *LessonReservationPreferredDate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LessonReservation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lessonreservationpreferreddate.FieldLessonReservationID)
	}
	query.Where(predicate.LessonReservationPreferredDate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lessonreservation.LessonReservationPreferredDatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LessonReservationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lesson_reservation_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lrq *LessonReservationQuery) loadLessonConfirmation(ctx context.Context, query *LessonConfirmationQuery, nodes []*LessonReservation, init func(*LessonReservation), assign func(*LessonReservation, *LessonConfirmation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LessonReservation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lessonconfirmation.FieldLessonReservationID)
	}
	query.Where(predicate.LessonConfirmation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lessonreservation.LessonConfirmationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LessonReservationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lesson_reservation_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lrq *LessonReservationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lrq.querySpec()
	_spec.Node.Columns = lrq.ctx.Fields
	if len(lrq.ctx.Fields) > 0 {
		_spec.Unique = lrq.ctx.Unique != nil && *lrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lrq.driver, _spec)
}

func (lrq *LessonReservationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lessonreservation.Table, lessonreservation.Columns, sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt64))
	_spec.From = lrq.sql
	if unique := lrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lrq.path != nil {
		_spec.Unique = true
	}
	if fields := lrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonreservation.FieldID)
		for i := range fields {
			if fields[i] != lessonreservation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lrq.withLessonSchedule != nil {
			_spec.Node.AddColumnOnce(lessonreservation.FieldLessonScheduleID)
		}
		if lrq.withSchool != nil {
			_spec.Node.AddColumnOnce(lessonreservation.FieldSchoolID)
		}
		if lrq.withUser != nil {
			_spec.Node.AddColumnOnce(lessonreservation.FieldUserID)
		}
	}
	if ps := lrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lrq *LessonReservationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lrq.driver.Dialect())
	t1 := builder.Table(lessonreservation.Table)
	columns := lrq.ctx.Fields
	if len(columns) == 0 {
		columns = lessonreservation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lrq.sql != nil {
		selector = lrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lrq.ctx.Unique != nil && *lrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lrq.predicates {
		p(selector)
	}
	for _, p := range lrq.order {
		p(selector)
	}
	if offset := lrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LessonReservationGroupBy is the group-by builder for LessonReservation entities.
type LessonReservationGroupBy struct {
	selector
	build *LessonReservationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lrgb *LessonReservationGroupBy) Aggregate(fns ...AggregateFunc) *LessonReservationGroupBy {
	lrgb.fns = append(lrgb.fns, fns...)
	return lrgb
}

// Scan applies the selector query and scans the result into the given value.
func (lrgb *LessonReservationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lrgb.build.ctx, ent.OpQueryGroupBy)
	if err := lrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonReservationQuery, *LessonReservationGroupBy](ctx, lrgb.build, lrgb, lrgb.build.inters, v)
}

func (lrgb *LessonReservationGroupBy) sqlScan(ctx context.Context, root *LessonReservationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lrgb.fns))
	for _, fn := range lrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lrgb.flds)+len(lrgb.fns))
		for _, f := range *lrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LessonReservationSelect is the builder for selecting fields of LessonReservation entities.
type LessonReservationSelect struct {
	*LessonReservationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lrs *LessonReservationSelect) Aggregate(fns ...AggregateFunc) *LessonReservationSelect {
	lrs.fns = append(lrs.fns, fns...)
	return lrs
}

// Scan applies the selector query and scans the result into the given value.
func (lrs *LessonReservationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lrs.ctx, ent.OpQuerySelect)
	if err := lrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonReservationQuery, *LessonReservationSelect](ctx, lrs.LessonReservationQuery, lrs, lrs.inters, v)
}

func (lrs *LessonReservationSelect) sqlScan(ctx context.Context, root *LessonReservationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lrs.fns))
	for _, fn := range lrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
