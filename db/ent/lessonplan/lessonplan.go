// Code generated by ent, DO NOT EDIT.

package lessonplan

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lessonplan type in the database.
	Label = "lesson_plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldLessonType holds the string denoting the lesson_type field in the database.
	FieldLessonType = "lesson_type"
	// FieldAnnualMaxExecutions holds the string denoting the annual_max_executions field in the database.
	FieldAnnualMaxExecutions = "annual_max_executions"
	// FieldStartMonth holds the string denoting the start_month field in the database.
	FieldStartMonth = "start_month"
	// FieldStartDay holds the string denoting the start_day field in the database.
	FieldStartDay = "start_day"
	// FieldEndMonth holds the string denoting the end_month field in the database.
	FieldEndMonth = "end_month"
	// FieldEndDay holds the string denoting the end_day field in the database.
	FieldEndDay = "end_day"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSchedules holds the string denoting the schedules edge name in mutations.
	EdgeSchedules = "schedules"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeGrades holds the string denoting the grades edge name in mutations.
	EdgeGrades = "grades"
	// EdgeSubjects holds the string denoting the subjects edge name in mutations.
	EdgeSubjects = "subjects"
	// EdgeEducationCategories holds the string denoting the education_categories edge name in mutations.
	EdgeEducationCategories = "education_categories"
	// Table holds the table name of the lessonplan in the database.
	Table = "lesson_plans"
	// SchedulesTable is the table that holds the schedules relation/edge.
	SchedulesTable = "lesson_schedules"
	// SchedulesInverseTable is the table name for the LessonSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "lessonschedule" package.
	SchedulesInverseTable = "lesson_schedules"
	// SchedulesColumn is the table column denoting the schedules relation/edge.
	SchedulesColumn = "lesson_plan_id"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "lesson_plans"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_id"
	// GradesTable is the table that holds the grades relation/edge. The primary key declared below.
	GradesTable = "lesson_plan_grades"
	// GradesInverseTable is the table name for the Grade entity.
	// It exists in this package in order to avoid circular dependency with the "grade" package.
	GradesInverseTable = "grades"
	// SubjectsTable is the table that holds the subjects relation/edge. The primary key declared below.
	SubjectsTable = "lesson_plan_subjects"
	// SubjectsInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectsInverseTable = "subjects"
	// EducationCategoriesTable is the table that holds the education_categories relation/edge. The primary key declared below.
	EducationCategoriesTable = "lesson_plan_education_categories"
	// EducationCategoriesInverseTable is the table name for the EducationCategory entity.
	// It exists in this package in order to avoid circular dependency with the "educationcategory" package.
	EducationCategoriesInverseTable = "education_categories"
)

// Columns holds all SQL columns for lessonplan fields.
var Columns = []string{
	FieldID,
	FieldCompanyID,
	FieldTitle,
	FieldDescription,
	FieldLocation,
	FieldLessonType,
	FieldAnnualMaxExecutions,
	FieldStartMonth,
	FieldStartDay,
	FieldEndMonth,
	FieldEndDay,
	FieldStartTime,
	FieldEndTime,
	FieldUpdatedAt,
	FieldCreatedAt,
}

var (
	// GradesPrimaryKey and GradesColumn2 are the table columns denoting the
	// primary key for the grades relation (M2M).
	GradesPrimaryKey = []string{"lesson_plan_id", "grade_id"}
	// SubjectsPrimaryKey and SubjectsColumn2 are the table columns denoting the
	// primary key for the subjects relation (M2M).
	SubjectsPrimaryKey = []string{"lesson_plan_id", "subject_id"}
	// EducationCategoriesPrimaryKey and EducationCategoriesColumn2 are the table columns denoting the
	// primary key for the education_categories relation (M2M).
	EducationCategoriesPrimaryKey = []string{"lesson_plan_id", "education_category_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CompanyIDValidator is a validator for the "company_id" field. It is called by the builders before save.
	CompanyIDValidator func(int64) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// AnnualMaxExecutionsValidator is a validator for the "annual_max_executions" field. It is called by the builders before save.
	AnnualMaxExecutionsValidator func(int) error
	// StartMonthValidator is a validator for the "start_month" field. It is called by the builders before save.
	StartMonthValidator func(int) error
	// StartDayValidator is a validator for the "start_day" field. It is called by the builders before save.
	StartDayValidator func(int) error
	// EndMonthValidator is a validator for the "end_month" field. It is called by the builders before save.
	EndMonthValidator func(int) error
	// EndDayValidator is a validator for the "end_day" field. It is called by the builders before save.
	EndDayValidator func(int) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// LessonType defines the type for the "lesson_type" enum field.
type LessonType string

// LessonType values.
const (
	LessonTypeOnline           LessonType = "online"
	LessonTypeOffline          LessonType = "offline"
	LessonTypeOnlineAndOffline LessonType = "online_and_offline"
)

func (lt LessonType) String() string {
	return string(lt)
}

// LessonTypeValidator is a validator for the "lesson_type" field enum values. It is called by the builders before save.
func LessonTypeValidator(lt LessonType) error {
	switch lt {
	case LessonTypeOnline, LessonTypeOffline, LessonTypeOnlineAndOffline:
		return nil
	default:
		return fmt.Errorf("lessonplan: invalid enum value for lesson_type field: %q", lt)
	}
}

// OrderOption defines the ordering options for the LessonPlan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByLessonType orders the results by the lesson_type field.
func ByLessonType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonType, opts...).ToFunc()
}

// ByAnnualMaxExecutions orders the results by the annual_max_executions field.
func ByAnnualMaxExecutions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnnualMaxExecutions, opts...).ToFunc()
}

// ByStartMonth orders the results by the start_month field.
func ByStartMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartMonth, opts...).ToFunc()
}

// ByStartDay orders the results by the start_day field.
func ByStartDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDay, opts...).ToFunc()
}

// ByEndMonth orders the results by the end_month field.
func ByEndMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndMonth, opts...).ToFunc()
}

// ByEndDay orders the results by the end_day field.
func ByEndDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDay, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySchedulesCount orders the results by schedules count.
func BySchedulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSchedulesStep(), opts...)
	}
}

// BySchedules orders the results by schedules terms.
func BySchedules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchedulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByGradesCount orders the results by grades count.
func ByGradesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGradesStep(), opts...)
	}
}

// ByGrades orders the results by grades terms.
func ByGrades(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGradesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubjectsCount orders the results by subjects count.
func BySubjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubjectsStep(), opts...)
	}
}

// BySubjects orders the results by subjects terms.
func BySubjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEducationCategoriesCount orders the results by education_categories count.
func ByEducationCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationCategoriesStep(), opts...)
	}
}

// ByEducationCategories orders the results by education_categories terms.
func ByEducationCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSchedulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchedulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SchedulesTable, SchedulesColumn),
	)
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newGradesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GradesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GradesTable, GradesPrimaryKey...),
	)
}
func newSubjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SubjectsTable, SubjectsPrimaryKey...),
	)
}
func newEducationCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EducationCategoriesTable, EducationCategoriesPrimaryKey...),
	)
}
