// Code generated by ent, DO NOT EDIT.

package lessonschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldID, id))
}

// LessonPlanID applies equality check predicate on the "lesson_plan_id" field. It's identical to LessonPlanIDEQ.
func LessonPlanID(v int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldLessonPlanID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldDescription, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldLocation, v))
}

// AnnualMaxExecutions applies equality check predicate on the "annual_max_executions" field. It's identical to AnnualMaxExecutionsEQ.
func AnnualMaxExecutions(v int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldAnnualMaxExecutions, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldEndDate, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldEndTime, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldCreatedAt, v))
}

// LessonPlanIDEQ applies the EQ predicate on the "lesson_plan_id" field.
func LessonPlanIDEQ(v int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldLessonPlanID, v))
}

// LessonPlanIDNEQ applies the NEQ predicate on the "lesson_plan_id" field.
func LessonPlanIDNEQ(v int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldLessonPlanID, v))
}

// LessonPlanIDIn applies the In predicate on the "lesson_plan_id" field.
func LessonPlanIDIn(vs ...int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldLessonPlanID, vs...))
}

// LessonPlanIDNotIn applies the NotIn predicate on the "lesson_plan_id" field.
func LessonPlanIDNotIn(vs ...int64) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldLessonPlanID, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldContainsFold(FieldDescription, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldContainsFold(FieldLocation, v))
}

// LessonTypeEQ applies the EQ predicate on the "lesson_type" field.
func LessonTypeEQ(v LessonType) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldLessonType, v))
}

// LessonTypeNEQ applies the NEQ predicate on the "lesson_type" field.
func LessonTypeNEQ(v LessonType) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldLessonType, v))
}

// LessonTypeIn applies the In predicate on the "lesson_type" field.
func LessonTypeIn(vs ...LessonType) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldLessonType, vs...))
}

// LessonTypeNotIn applies the NotIn predicate on the "lesson_type" field.
func LessonTypeNotIn(vs ...LessonType) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldLessonType, vs...))
}

// AnnualMaxExecutionsEQ applies the EQ predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsEQ(v int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldAnnualMaxExecutions, v))
}

// AnnualMaxExecutionsNEQ applies the NEQ predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsNEQ(v int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldAnnualMaxExecutions, v))
}

// AnnualMaxExecutionsIn applies the In predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsIn(vs ...int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldAnnualMaxExecutions, vs...))
}

// AnnualMaxExecutionsNotIn applies the NotIn predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsNotIn(vs ...int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldAnnualMaxExecutions, vs...))
}

// AnnualMaxExecutionsGT applies the GT predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsGT(v int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldAnnualMaxExecutions, v))
}

// AnnualMaxExecutionsGTE applies the GTE predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsGTE(v int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldAnnualMaxExecutions, v))
}

// AnnualMaxExecutionsLT applies the LT predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsLT(v int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldAnnualMaxExecutions, v))
}

// AnnualMaxExecutionsLTE applies the LTE predicate on the "annual_max_executions" field.
func AnnualMaxExecutionsLTE(v int) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldAnnualMaxExecutions, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldEndDate, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldEndTime, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPlan applies the HasEdge predicate on the "plan" edge.
func HasPlan() predicate.LessonSchedule {
	return predicate.LessonSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanWith applies the HasEdge predicate on the "plan" edge with a given conditions (other predicates).
func HasPlanWith(preds ...predicate.LessonPlan) predicate.LessonSchedule {
	return predicate.LessonSchedule(func(s *sql.Selector) {
		step := newPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LessonSchedule) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LessonSchedule) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LessonSchedule) predicate.LessonSchedule {
	return predicate.LessonSchedule(sql.NotPredicates(p))
}
