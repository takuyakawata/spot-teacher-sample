// Code generated by ent, DO NOT EDIT.

package lessonschedule

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lessonschedule type in the database.
	Label = "lesson_schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLessonPlanID holds the string denoting the lesson_plan_id field in the database.
	FieldLessonPlanID = "lesson_plan_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldLessonType holds the string denoting the lesson_type field in the database.
	FieldLessonType = "lesson_type"
	// FieldAnnualMaxExecutions holds the string denoting the annual_max_executions field in the database.
	FieldAnnualMaxExecutions = "annual_max_executions"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// Table holds the table name of the lessonschedule in the database.
	Table = "lesson_schedules"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "lesson_schedules"
	// PlanInverseTable is the table name for the LessonPlan entity.
	// It exists in this package in order to avoid circular dependency with the "lessonplan" package.
	PlanInverseTable = "lesson_plans"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "lesson_plan_id"
)

// Columns holds all SQL columns for lessonschedule fields.
var Columns = []string{
	FieldID,
	FieldLessonPlanID,
	FieldTitle,
	FieldDescription,
	FieldLocation,
	FieldLessonType,
	FieldAnnualMaxExecutions,
	FieldStartDate,
	FieldEndDate,
	FieldStartTime,
	FieldEndTime,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LessonPlanIDValidator is a validator for the "lesson_plan_id" field. It is called by the builders before save.
	LessonPlanIDValidator func(int64) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// AnnualMaxExecutionsValidator is a validator for the "annual_max_executions" field. It is called by the builders before save.
	AnnualMaxExecutionsValidator func(int) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// LessonType defines the type for the "lesson_type" enum field.
type LessonType string

// LessonType values.
const (
	LessonTypeOnline           LessonType = "online"
	LessonTypeOffline          LessonType = "offline"
	LessonTypeOnlineAndOffline LessonType = "online_and_offline"
)

func (lt LessonType) String() string {
	return string(lt)
}

// LessonTypeValidator is a validator for the "lesson_type" field enum values. It is called by the builders before save.
func LessonTypeValidator(lt LessonType) error {
	switch lt {
	case LessonTypeOnline, LessonTypeOffline, LessonTypeOnlineAndOffline:
		return nil
	default:
		return fmt.Errorf("lessonschedule: invalid enum value for lesson_type field: %q", lt)
	}
}

// OrderOption defines the ordering options for the LessonSchedule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLessonPlanID orders the results by the lesson_plan_id field.
func ByLessonPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonPlanID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByLessonType orders the results by the lesson_type field.
func ByLessonType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonType, opts...).ToFunc()
}

// ByAnnualMaxExecutions orders the results by the annual_max_executions field.
func ByAnnualMaxExecutions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnnualMaxExecutions, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPlanField orders the results by plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
	)
}
