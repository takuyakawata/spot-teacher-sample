// Code generated by ent, DO NOT EDIT.

package lessonreservationpreferreddate

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lessonreservationpreferreddate type in the database.
	Label = "lesson_reservation_preferred_date"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLessonReservationID holds the string denoting the lesson_reservation_id field in the database.
	FieldLessonReservationID = "lesson_reservation_id"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// EdgeLessonReservations holds the string denoting the lessonreservations edge name in mutations.
	EdgeLessonReservations = "lessonReservations"
	// Table holds the table name of the lessonreservationpreferreddate in the database.
	Table = "lesson_reservation_preferred_dates"
	// LessonReservationsTable is the table that holds the lessonReservations relation/edge.
	LessonReservationsTable = "lesson_reservation_preferred_dates"
	// LessonReservationsInverseTable is the table name for the LessonReservation entity.
	// It exists in this package in order to avoid circular dependency with the "lessonreservation" package.
	LessonReservationsInverseTable = "lesson_reservations"
	// LessonReservationsColumn is the table column denoting the lessonReservations relation/edge.
	LessonReservationsColumn = "lesson_reservation_id"
)

// Columns holds all SQL columns for lessonreservationpreferreddate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLessonReservationID,
	FieldPriority,
	FieldDate,
	FieldStartTime,
	FieldEndTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// LessonReservationIDValidator is a validator for the "lesson_reservation_id" field. It is called by the builders before save.
	LessonReservationIDValidator func(int) error
)

// Priority defines the type for the "priority" enum field.
type Priority string

// Priority values.
const (
	PriorityFIRST  Priority = "FIRST"
	PrioritySECOND Priority = "SECOND"
	PriorityTHIRD  Priority = "THIRD"
	PriorityFOURTH Priority = "FOURTH"
	PriorityFIFTH  Priority = "FIFTH"
)

func (pr Priority) String() string {
	return string(pr)
}

// PriorityValidator is a validator for the "priority" field enum values. It is called by the builders before save.
func PriorityValidator(pr Priority) error {
	switch pr {
	case PriorityFIRST, PrioritySECOND, PriorityTHIRD, PriorityFOURTH, PriorityFIFTH:
		return nil
	default:
		return fmt.Errorf("lessonreservationpreferreddate: invalid enum value for priority field: %q", pr)
	}
}

// OrderOption defines the ordering options for the LessonReservationPreferredDate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLessonReservationID orders the results by the lesson_reservation_id field.
func ByLessonReservationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonReservationID, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByLessonReservationsField orders the results by lessonReservations field.
func ByLessonReservationsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonReservationsStep(), sql.OrderByField(field, opts...))
	}
}
func newLessonReservationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonReservationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LessonReservationsTable, LessonReservationsColumn),
	)
}
