// Code generated by ent, DO NOT EDIT.

package lessonreservationpreferreddate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldUpdatedAt, v))
}

// LessonReservationID applies equality check predicate on the "lesson_reservation_id" field. It's identical to LessonReservationIDEQ.
func LessonReservationID(v int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldLessonReservationID, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldDate, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldEndTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLTE(FieldUpdatedAt, v))
}

// LessonReservationIDEQ applies the EQ predicate on the "lesson_reservation_id" field.
func LessonReservationIDEQ(v int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldLessonReservationID, v))
}

// LessonReservationIDNEQ applies the NEQ predicate on the "lesson_reservation_id" field.
func LessonReservationIDNEQ(v int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldLessonReservationID, v))
}

// LessonReservationIDIn applies the In predicate on the "lesson_reservation_id" field.
func LessonReservationIDIn(vs ...int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldLessonReservationID, vs...))
}

// LessonReservationIDNotIn applies the NotIn predicate on the "lesson_reservation_id" field.
func LessonReservationIDNotIn(vs ...int64) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldLessonReservationID, vs...))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v Priority) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v Priority) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...Priority) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...Priority) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldPriority, vs...))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLTE(FieldDate, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.FieldLTE(FieldEndTime, v))
}

// HasLessonReservations applies the HasEdge predicate on the "lessonReservations" edge.
func HasLessonReservations() predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LessonReservationsTable, LessonReservationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonReservationsWith applies the HasEdge predicate on the "lessonReservations" edge with a given conditions (other predicates).
func HasLessonReservationsWith(preds ...predicate.LessonReservation) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(func(s *sql.Selector) {
		step := newLessonReservationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LessonReservationPreferredDate) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LessonReservationPreferredDate) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LessonReservationPreferredDate) predicate.LessonReservationPreferredDate {
	return predicate.LessonReservationPreferredDate(sql.NotPredicates(p))
}
