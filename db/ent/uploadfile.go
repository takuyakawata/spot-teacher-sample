// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// UploadFile is the model entity for the UploadFile schema.
type UploadFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ファイルのユニークキー
	PhotoKey string `json:"photo_key,omitempty"`
	// 写真をアップロードしたユーザーのID
	UserID       int64 `json:"user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UploadFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uploadfile.FieldID, uploadfile.FieldUserID:
			values[i] = new(sql.NullInt64)
		case uploadfile.FieldPhotoKey:
			values[i] = new(sql.NullString)
		case uploadfile.FieldCreateTime, uploadfile.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UploadFile fields.
func (uf *UploadFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uploadfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uf.ID = int(value.Int64)
		case uploadfile.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				uf.CreateTime = value.Time
			}
		case uploadfile.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				uf.UpdateTime = value.Time
			}
		case uploadfile.FieldPhotoKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_key", values[i])
			} else if value.Valid {
				uf.PhotoKey = value.String
			}
		case uploadfile.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uf.UserID = value.Int64
			}
		default:
			uf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UploadFile.
// This includes values selected through modifiers, order, etc.
func (uf *UploadFile) Value(name string) (ent.Value, error) {
	return uf.selectValues.Get(name)
}

// Update returns a builder for updating this UploadFile.
// Note that you need to call UploadFile.Unwrap() before calling this method if this UploadFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (uf *UploadFile) Update() *UploadFileUpdateOne {
	return NewUploadFileClient(uf.config).UpdateOne(uf)
}

// Unwrap unwraps the UploadFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uf *UploadFile) Unwrap() *UploadFile {
	_tx, ok := uf.config.driver.(*txDriver)
	if !ok {
		panic("ent: UploadFile is not a transactional entity")
	}
	uf.config.driver = _tx.drv
	return uf
}

// String implements the fmt.Stringer.
func (uf *UploadFile) String() string {
	var builder strings.Builder
	builder.WriteString("UploadFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uf.ID))
	builder.WriteString("create_time=")
	builder.WriteString(uf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(uf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("photo_key=")
	builder.WriteString(uf.PhotoKey)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uf.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UploadFiles is a parsable slice of UploadFile.
type UploadFiles []*UploadFile
