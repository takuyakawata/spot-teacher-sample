// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// UploadFile is the model entity for the UploadFile schema.
type UploadFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ファイルのユニークキー
	PhotoKey string `json:"photo_key,omitempty"`
	// 写真をアップロードしたユーザーのID
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UploadFileQuery when eager-loading is set.
	Edges                    UploadFileEdges `json:"edges"`
	lesson_plan_upload_files *int
	selectValues             sql.SelectValues
}

// UploadFileEdges holds the relations/edges for other nodes in the graph.
type UploadFileEdges struct {
	// LessonPlan holds the value of the LessonPlan edge.
	LessonPlan *LessonPlan `json:"LessonPlan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LessonPlanOrErr returns the LessonPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UploadFileEdges) LessonPlanOrErr() (*LessonPlan, error) {
	if e.LessonPlan != nil {
		return e.LessonPlan, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonplan.Label}
	}
	return nil, &NotLoadedError{edge: "LessonPlan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UploadFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uploadfile.FieldID, uploadfile.FieldUserID:
			values[i] = new(sql.NullInt64)
		case uploadfile.FieldPhotoKey:
			values[i] = new(sql.NullString)
		case uploadfile.FieldCreatedAt, uploadfile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case uploadfile.ForeignKeys[0]: // lesson_plan_upload_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UploadFile fields.
func (uf *UploadFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uploadfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uf.ID = int(value.Int64)
		case uploadfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uf.CreatedAt = value.Time
			}
		case uploadfile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uf.UpdatedAt = value.Time
			}
		case uploadfile.FieldPhotoKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_key", values[i])
			} else if value.Valid {
				uf.PhotoKey = value.String
			}
		case uploadfile.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uf.UserID = int(value.Int64)
			}
		case uploadfile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field lesson_plan_upload_files", value)
			} else if value.Valid {
				uf.lesson_plan_upload_files = new(int)
				*uf.lesson_plan_upload_files = int(value.Int64)
			}
		default:
			uf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UploadFile.
// This includes values selected through modifiers, order, etc.
func (uf *UploadFile) Value(name string) (ent.Value, error) {
	return uf.selectValues.Get(name)
}

// QueryLessonPlan queries the "LessonPlan" edge of the UploadFile entity.
func (uf *UploadFile) QueryLessonPlan() *LessonPlanQuery {
	return NewUploadFileClient(uf.config).QueryLessonPlan(uf)
}

// Update returns a builder for updating this UploadFile.
// Note that you need to call UploadFile.Unwrap() before calling this method if this UploadFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (uf *UploadFile) Update() *UploadFileUpdateOne {
	return NewUploadFileClient(uf.config).UpdateOne(uf)
}

// Unwrap unwraps the UploadFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uf *UploadFile) Unwrap() *UploadFile {
	_tx, ok := uf.config.driver.(*txDriver)
	if !ok {
		panic("ent: UploadFile is not a transactional entity")
	}
	uf.config.driver = _tx.drv
	return uf
}

// String implements the fmt.Stringer.
func (uf *UploadFile) String() string {
	var builder strings.Builder
	builder.WriteString("UploadFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("photo_key=")
	builder.WriteString(uf.PhotoKey)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uf.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UploadFiles is a parsable slice of UploadFile.
type UploadFiles []*UploadFile
