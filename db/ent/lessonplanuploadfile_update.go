// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplanuploadfile"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// LessonPlanUploadFileUpdate is the builder for updating LessonPlanUploadFile entities.
type LessonPlanUploadFileUpdate struct {
	config
	hooks    []Hook
	mutation *LessonPlanUploadFileMutation
}

// Where appends a list predicates to the LessonPlanUploadFileUpdate builder.
func (lpufu *LessonPlanUploadFileUpdate) Where(ps ...predicate.LessonPlanUploadFile) *LessonPlanUploadFileUpdate {
	lpufu.mutation.Where(ps...)
	return lpufu
}

// SetUpdatedAt sets the "updated_at" field.
func (lpufu *LessonPlanUploadFileUpdate) SetUpdatedAt(t time.Time) *LessonPlanUploadFileUpdate {
	lpufu.mutation.SetUpdatedAt(t)
	return lpufu
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpufu *LessonPlanUploadFileUpdate) SetLessonPlanID(i int64) *LessonPlanUploadFileUpdate {
	lpufu.mutation.SetLessonPlanID(i)
	return lpufu
}

// SetNillableLessonPlanID sets the "lesson_plan_id" field if the given value is not nil.
func (lpufu *LessonPlanUploadFileUpdate) SetNillableLessonPlanID(i *int64) *LessonPlanUploadFileUpdate {
	if i != nil {
		lpufu.SetLessonPlanID(*i)
	}
	return lpufu
}

// SetUploadFileID sets the "upload_file_id" field.
func (lpufu *LessonPlanUploadFileUpdate) SetUploadFileID(i int64) *LessonPlanUploadFileUpdate {
	lpufu.mutation.SetUploadFileID(i)
	return lpufu
}

// SetNillableUploadFileID sets the "upload_file_id" field if the given value is not nil.
func (lpufu *LessonPlanUploadFileUpdate) SetNillableUploadFileID(i *int64) *LessonPlanUploadFileUpdate {
	if i != nil {
		lpufu.SetUploadFileID(*i)
	}
	return lpufu
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpufu *LessonPlanUploadFileUpdate) SetLessonPlan(l *LessonPlan) *LessonPlanUploadFileUpdate {
	return lpufu.SetLessonPlanID(l.ID)
}

// SetUploadFile sets the "upload_file" edge to the UploadFile entity.
func (lpufu *LessonPlanUploadFileUpdate) SetUploadFile(u *UploadFile) *LessonPlanUploadFileUpdate {
	return lpufu.SetUploadFileID(u.ID)
}

// Mutation returns the LessonPlanUploadFileMutation object of the builder.
func (lpufu *LessonPlanUploadFileUpdate) Mutation() *LessonPlanUploadFileMutation {
	return lpufu.mutation
}

// ClearLessonPlan clears the "lesson_plan" edge to the LessonPlan entity.
func (lpufu *LessonPlanUploadFileUpdate) ClearLessonPlan() *LessonPlanUploadFileUpdate {
	lpufu.mutation.ClearLessonPlan()
	return lpufu
}

// ClearUploadFile clears the "upload_file" edge to the UploadFile entity.
func (lpufu *LessonPlanUploadFileUpdate) ClearUploadFile() *LessonPlanUploadFileUpdate {
	lpufu.mutation.ClearUploadFile()
	return lpufu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpufu *LessonPlanUploadFileUpdate) Save(ctx context.Context) (int, error) {
	lpufu.defaults()
	return withHooks(ctx, lpufu.sqlSave, lpufu.mutation, lpufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpufu *LessonPlanUploadFileUpdate) SaveX(ctx context.Context) int {
	affected, err := lpufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpufu *LessonPlanUploadFileUpdate) Exec(ctx context.Context) error {
	_, err := lpufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpufu *LessonPlanUploadFileUpdate) ExecX(ctx context.Context) {
	if err := lpufu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpufu *LessonPlanUploadFileUpdate) defaults() {
	if _, ok := lpufu.mutation.UpdatedAt(); !ok {
		v := lessonplanuploadfile.UpdateDefaultUpdatedAt()
		lpufu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpufu *LessonPlanUploadFileUpdate) check() error {
	if lpufu.mutation.LessonPlanCleared() && len(lpufu.mutation.LessonPlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanUploadFile.lesson_plan"`)
	}
	if lpufu.mutation.UploadFileCleared() && len(lpufu.mutation.UploadFileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanUploadFile.upload_file"`)
	}
	return nil
}

func (lpufu *LessonPlanUploadFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lpufu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonplanuploadfile.Table, lessonplanuploadfile.Columns, sqlgraph.NewFieldSpec(lessonplanuploadfile.FieldID, field.TypeInt64))
	if ps := lpufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpufu.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplanuploadfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpufu.mutation.LessonPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.LessonPlanTable,
			Columns: []string{lessonplanuploadfile.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpufu.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.LessonPlanTable,
			Columns: []string{lessonplanuploadfile.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpufu.mutation.UploadFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.UploadFileTable,
			Columns: []string{lessonplanuploadfile.UploadFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpufu.mutation.UploadFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.UploadFileTable,
			Columns: []string{lessonplanuploadfile.UploadFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonplanuploadfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpufu.mutation.done = true
	return n, nil
}

// LessonPlanUploadFileUpdateOne is the builder for updating a single LessonPlanUploadFile entity.
type LessonPlanUploadFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonPlanUploadFileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lpufuo *LessonPlanUploadFileUpdateOne) SetUpdatedAt(t time.Time) *LessonPlanUploadFileUpdateOne {
	lpufuo.mutation.SetUpdatedAt(t)
	return lpufuo
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpufuo *LessonPlanUploadFileUpdateOne) SetLessonPlanID(i int64) *LessonPlanUploadFileUpdateOne {
	lpufuo.mutation.SetLessonPlanID(i)
	return lpufuo
}

// SetNillableLessonPlanID sets the "lesson_plan_id" field if the given value is not nil.
func (lpufuo *LessonPlanUploadFileUpdateOne) SetNillableLessonPlanID(i *int64) *LessonPlanUploadFileUpdateOne {
	if i != nil {
		lpufuo.SetLessonPlanID(*i)
	}
	return lpufuo
}

// SetUploadFileID sets the "upload_file_id" field.
func (lpufuo *LessonPlanUploadFileUpdateOne) SetUploadFileID(i int64) *LessonPlanUploadFileUpdateOne {
	lpufuo.mutation.SetUploadFileID(i)
	return lpufuo
}

// SetNillableUploadFileID sets the "upload_file_id" field if the given value is not nil.
func (lpufuo *LessonPlanUploadFileUpdateOne) SetNillableUploadFileID(i *int64) *LessonPlanUploadFileUpdateOne {
	if i != nil {
		lpufuo.SetUploadFileID(*i)
	}
	return lpufuo
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpufuo *LessonPlanUploadFileUpdateOne) SetLessonPlan(l *LessonPlan) *LessonPlanUploadFileUpdateOne {
	return lpufuo.SetLessonPlanID(l.ID)
}

// SetUploadFile sets the "upload_file" edge to the UploadFile entity.
func (lpufuo *LessonPlanUploadFileUpdateOne) SetUploadFile(u *UploadFile) *LessonPlanUploadFileUpdateOne {
	return lpufuo.SetUploadFileID(u.ID)
}

// Mutation returns the LessonPlanUploadFileMutation object of the builder.
func (lpufuo *LessonPlanUploadFileUpdateOne) Mutation() *LessonPlanUploadFileMutation {
	return lpufuo.mutation
}

// ClearLessonPlan clears the "lesson_plan" edge to the LessonPlan entity.
func (lpufuo *LessonPlanUploadFileUpdateOne) ClearLessonPlan() *LessonPlanUploadFileUpdateOne {
	lpufuo.mutation.ClearLessonPlan()
	return lpufuo
}

// ClearUploadFile clears the "upload_file" edge to the UploadFile entity.
func (lpufuo *LessonPlanUploadFileUpdateOne) ClearUploadFile() *LessonPlanUploadFileUpdateOne {
	lpufuo.mutation.ClearUploadFile()
	return lpufuo
}

// Where appends a list predicates to the LessonPlanUploadFileUpdate builder.
func (lpufuo *LessonPlanUploadFileUpdateOne) Where(ps ...predicate.LessonPlanUploadFile) *LessonPlanUploadFileUpdateOne {
	lpufuo.mutation.Where(ps...)
	return lpufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpufuo *LessonPlanUploadFileUpdateOne) Select(field string, fields ...string) *LessonPlanUploadFileUpdateOne {
	lpufuo.fields = append([]string{field}, fields...)
	return lpufuo
}

// Save executes the query and returns the updated LessonPlanUploadFile entity.
func (lpufuo *LessonPlanUploadFileUpdateOne) Save(ctx context.Context) (*LessonPlanUploadFile, error) {
	lpufuo.defaults()
	return withHooks(ctx, lpufuo.sqlSave, lpufuo.mutation, lpufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpufuo *LessonPlanUploadFileUpdateOne) SaveX(ctx context.Context) *LessonPlanUploadFile {
	node, err := lpufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpufuo *LessonPlanUploadFileUpdateOne) Exec(ctx context.Context) error {
	_, err := lpufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpufuo *LessonPlanUploadFileUpdateOne) ExecX(ctx context.Context) {
	if err := lpufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpufuo *LessonPlanUploadFileUpdateOne) defaults() {
	if _, ok := lpufuo.mutation.UpdatedAt(); !ok {
		v := lessonplanuploadfile.UpdateDefaultUpdatedAt()
		lpufuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpufuo *LessonPlanUploadFileUpdateOne) check() error {
	if lpufuo.mutation.LessonPlanCleared() && len(lpufuo.mutation.LessonPlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanUploadFile.lesson_plan"`)
	}
	if lpufuo.mutation.UploadFileCleared() && len(lpufuo.mutation.UploadFileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonPlanUploadFile.upload_file"`)
	}
	return nil
}

func (lpufuo *LessonPlanUploadFileUpdateOne) sqlSave(ctx context.Context) (_node *LessonPlanUploadFile, err error) {
	if err := lpufuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonplanuploadfile.Table, lessonplanuploadfile.Columns, sqlgraph.NewFieldSpec(lessonplanuploadfile.FieldID, field.TypeInt64))
	id, ok := lpufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LessonPlanUploadFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonplanuploadfile.FieldID)
		for _, f := range fields {
			if !lessonplanuploadfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lessonplanuploadfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpufuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplanuploadfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpufuo.mutation.LessonPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.LessonPlanTable,
			Columns: []string{lessonplanuploadfile.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpufuo.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.LessonPlanTable,
			Columns: []string{lessonplanuploadfile.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpufuo.mutation.UploadFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.UploadFileTable,
			Columns: []string{lessonplanuploadfile.UploadFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpufuo.mutation.UploadFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.UploadFileTable,
			Columns: []string{lessonplanuploadfile.UploadFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LessonPlanUploadFile{config: lpufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonplanuploadfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpufuo.mutation.done = true
	return _node, nil
}
