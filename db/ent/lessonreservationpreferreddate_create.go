// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
)

// LessonReservationPreferredDateCreate is the builder for creating a LessonReservationPreferredDate entity.
type LessonReservationPreferredDateCreate struct {
	config
	mutation *LessonReservationPreferredDateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetCreatedAt(t time.Time) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetCreatedAt(t)
	return lrpdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrpdc *LessonReservationPreferredDateCreate) SetNillableCreatedAt(t *time.Time) *LessonReservationPreferredDateCreate {
	if t != nil {
		lrpdc.SetCreatedAt(*t)
	}
	return lrpdc
}

// SetUpdatedAt sets the "updated_at" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetUpdatedAt(t time.Time) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetUpdatedAt(t)
	return lrpdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lrpdc *LessonReservationPreferredDateCreate) SetNillableUpdatedAt(t *time.Time) *LessonReservationPreferredDateCreate {
	if t != nil {
		lrpdc.SetUpdatedAt(*t)
	}
	return lrpdc
}

// SetLessonReservationID sets the "lesson_reservation_id" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetLessonReservationID(i int64) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetLessonReservationID(i)
	return lrpdc
}

// SetPriority sets the "priority" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetPriority(l lessonreservationpreferreddate.Priority) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetPriority(l)
	return lrpdc
}

// SetDate sets the "date" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetDate(t time.Time) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetDate(t)
	return lrpdc
}

// SetStartTime sets the "start_time" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetStartTime(t time.Time) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetStartTime(t)
	return lrpdc
}

// SetEndTime sets the "end_time" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetEndTime(t time.Time) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetEndTime(t)
	return lrpdc
}

// SetID sets the "id" field.
func (lrpdc *LessonReservationPreferredDateCreate) SetID(i int64) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetID(i)
	return lrpdc
}

// SetLessonReservationsID sets the "lessonReservations" edge to the LessonReservation entity by ID.
func (lrpdc *LessonReservationPreferredDateCreate) SetLessonReservationsID(id int64) *LessonReservationPreferredDateCreate {
	lrpdc.mutation.SetLessonReservationsID(id)
	return lrpdc
}

// SetLessonReservations sets the "lessonReservations" edge to the LessonReservation entity.
func (lrpdc *LessonReservationPreferredDateCreate) SetLessonReservations(l *LessonReservation) *LessonReservationPreferredDateCreate {
	return lrpdc.SetLessonReservationsID(l.ID)
}

// Mutation returns the LessonReservationPreferredDateMutation object of the builder.
func (lrpdc *LessonReservationPreferredDateCreate) Mutation() *LessonReservationPreferredDateMutation {
	return lrpdc.mutation
}

// Save creates the LessonReservationPreferredDate in the database.
func (lrpdc *LessonReservationPreferredDateCreate) Save(ctx context.Context) (*LessonReservationPreferredDate, error) {
	lrpdc.defaults()
	return withHooks(ctx, lrpdc.sqlSave, lrpdc.mutation, lrpdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrpdc *LessonReservationPreferredDateCreate) SaveX(ctx context.Context) *LessonReservationPreferredDate {
	v, err := lrpdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrpdc *LessonReservationPreferredDateCreate) Exec(ctx context.Context) error {
	_, err := lrpdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrpdc *LessonReservationPreferredDateCreate) ExecX(ctx context.Context) {
	if err := lrpdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrpdc *LessonReservationPreferredDateCreate) defaults() {
	if _, ok := lrpdc.mutation.CreatedAt(); !ok {
		v := lessonreservationpreferreddate.DefaultCreatedAt()
		lrpdc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrpdc.mutation.UpdatedAt(); !ok {
		v := lessonreservationpreferreddate.DefaultUpdatedAt()
		lrpdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrpdc *LessonReservationPreferredDateCreate) check() error {
	if _, ok := lrpdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonReservationPreferredDate.created_at"`)}
	}
	if _, ok := lrpdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonReservationPreferredDate.updated_at"`)}
	}
	if _, ok := lrpdc.mutation.LessonReservationID(); !ok {
		return &ValidationError{Name: "lesson_reservation_id", err: errors.New(`ent: missing required field "LessonReservationPreferredDate.lesson_reservation_id"`)}
	}
	if v, ok := lrpdc.mutation.LessonReservationID(); ok {
		if err := lessonreservationpreferreddate.LessonReservationIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_reservation_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservationPreferredDate.lesson_reservation_id": %w`, err)}
		}
	}
	if _, ok := lrpdc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "LessonReservationPreferredDate.priority"`)}
	}
	if v, ok := lrpdc.mutation.Priority(); ok {
		if err := lessonreservationpreferreddate.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "LessonReservationPreferredDate.priority": %w`, err)}
		}
	}
	if _, ok := lrpdc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "LessonReservationPreferredDate.date"`)}
	}
	if _, ok := lrpdc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "LessonReservationPreferredDate.start_time"`)}
	}
	if _, ok := lrpdc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "LessonReservationPreferredDate.end_time"`)}
	}
	if v, ok := lrpdc.mutation.ID(); ok {
		if err := lessonreservationpreferreddate.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LessonReservationPreferredDate.id": %w`, err)}
		}
	}
	if len(lrpdc.mutation.LessonReservationsIDs()) == 0 {
		return &ValidationError{Name: "lessonReservations", err: errors.New(`ent: missing required edge "LessonReservationPreferredDate.lessonReservations"`)}
	}
	return nil
}

func (lrpdc *LessonReservationPreferredDateCreate) sqlSave(ctx context.Context) (*LessonReservationPreferredDate, error) {
	if err := lrpdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrpdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrpdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lrpdc.mutation.id = &_node.ID
	lrpdc.mutation.done = true
	return _node, nil
}

func (lrpdc *LessonReservationPreferredDateCreate) createSpec() (*LessonReservationPreferredDate, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonReservationPreferredDate{config: lrpdc.config}
		_spec = sqlgraph.NewCreateSpec(lessonreservationpreferreddate.Table, sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64))
	)
	if id, ok := lrpdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lrpdc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrpdc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lrpdc.mutation.Priority(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldPriority, field.TypeEnum, value)
		_node.Priority = value
	}
	if value, ok := lrpdc.mutation.Date(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := lrpdc.mutation.StartTime(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := lrpdc.mutation.EndTime(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := lrpdc.mutation.LessonReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservationpreferreddate.LessonReservationsTable,
			Columns: []string{lessonreservationpreferreddate.LessonReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonReservationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonReservationPreferredDateCreateBulk is the builder for creating many LessonReservationPreferredDate entities in bulk.
type LessonReservationPreferredDateCreateBulk struct {
	config
	err      error
	builders []*LessonReservationPreferredDateCreate
}

// Save creates the LessonReservationPreferredDate entities in the database.
func (lrpdcb *LessonReservationPreferredDateCreateBulk) Save(ctx context.Context) ([]*LessonReservationPreferredDate, error) {
	if lrpdcb.err != nil {
		return nil, lrpdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lrpdcb.builders))
	nodes := make([]*LessonReservationPreferredDate, len(lrpdcb.builders))
	mutators := make([]Mutator, len(lrpdcb.builders))
	for i := range lrpdcb.builders {
		func(i int, root context.Context) {
			builder := lrpdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonReservationPreferredDateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrpdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrpdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrpdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrpdcb *LessonReservationPreferredDateCreateBulk) SaveX(ctx context.Context) []*LessonReservationPreferredDate {
	v, err := lrpdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrpdcb *LessonReservationPreferredDateCreateBulk) Exec(ctx context.Context) error {
	_, err := lrpdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrpdcb *LessonReservationPreferredDateCreateBulk) ExecX(ctx context.Context) {
	if err := lrpdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
