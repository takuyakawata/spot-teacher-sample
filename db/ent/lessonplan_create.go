// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/company"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/grade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/subject"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// LessonPlanCreate is the builder for creating a LessonPlan entity.
type LessonPlanCreate struct {
	config
	mutation *LessonPlanMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lpc *LessonPlanCreate) SetCreatedAt(t time.Time) *LessonPlanCreate {
	lpc.mutation.SetCreatedAt(t)
	return lpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpc *LessonPlanCreate) SetNillableCreatedAt(t *time.Time) *LessonPlanCreate {
	if t != nil {
		lpc.SetCreatedAt(*t)
	}
	return lpc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpc *LessonPlanCreate) SetUpdatedAt(t time.Time) *LessonPlanCreate {
	lpc.mutation.SetUpdatedAt(t)
	return lpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpc *LessonPlanCreate) SetNillableUpdatedAt(t *time.Time) *LessonPlanCreate {
	if t != nil {
		lpc.SetUpdatedAt(*t)
	}
	return lpc
}

// SetCompanyID sets the "company_id" field.
func (lpc *LessonPlanCreate) SetCompanyID(i int) *LessonPlanCreate {
	lpc.mutation.SetCompanyID(i)
	return lpc
}

// SetTitle sets the "title" field.
func (lpc *LessonPlanCreate) SetTitle(s string) *LessonPlanCreate {
	lpc.mutation.SetTitle(s)
	return lpc
}

// SetDescription sets the "description" field.
func (lpc *LessonPlanCreate) SetDescription(s string) *LessonPlanCreate {
	lpc.mutation.SetDescription(s)
	return lpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lpc *LessonPlanCreate) SetNillableDescription(s *string) *LessonPlanCreate {
	if s != nil {
		lpc.SetDescription(*s)
	}
	return lpc
}

// SetLocation sets the "location" field.
func (lpc *LessonPlanCreate) SetLocation(s string) *LessonPlanCreate {
	lpc.mutation.SetLocation(s)
	return lpc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (lpc *LessonPlanCreate) SetNillableLocation(s *string) *LessonPlanCreate {
	if s != nil {
		lpc.SetLocation(*s)
	}
	return lpc
}

// SetLessonType sets the "lesson_type" field.
func (lpc *LessonPlanCreate) SetLessonType(lt lessonplan.LessonType) *LessonPlanCreate {
	lpc.mutation.SetLessonType(lt)
	return lpc
}

// SetAnnualMaxExecutions sets the "annual_max_executions" field.
func (lpc *LessonPlanCreate) SetAnnualMaxExecutions(i int) *LessonPlanCreate {
	lpc.mutation.SetAnnualMaxExecutions(i)
	return lpc
}

// SetStartMonth sets the "start_month" field.
func (lpc *LessonPlanCreate) SetStartMonth(i int) *LessonPlanCreate {
	lpc.mutation.SetStartMonth(i)
	return lpc
}

// SetStartDay sets the "start_day" field.
func (lpc *LessonPlanCreate) SetStartDay(i int) *LessonPlanCreate {
	lpc.mutation.SetStartDay(i)
	return lpc
}

// SetEndMonth sets the "end_month" field.
func (lpc *LessonPlanCreate) SetEndMonth(i int) *LessonPlanCreate {
	lpc.mutation.SetEndMonth(i)
	return lpc
}

// SetEndDay sets the "end_day" field.
func (lpc *LessonPlanCreate) SetEndDay(i int) *LessonPlanCreate {
	lpc.mutation.SetEndDay(i)
	return lpc
}

// SetStartTime sets the "start_time" field.
func (lpc *LessonPlanCreate) SetStartTime(t time.Time) *LessonPlanCreate {
	lpc.mutation.SetStartTime(t)
	return lpc
}

// SetEndTime sets the "end_time" field.
func (lpc *LessonPlanCreate) SetEndTime(t time.Time) *LessonPlanCreate {
	lpc.mutation.SetEndTime(t)
	return lpc
}

// SetCompany sets the "company" edge to the Company entity.
func (lpc *LessonPlanCreate) SetCompany(c *Company) *LessonPlanCreate {
	return lpc.SetCompanyID(c.ID)
}

// AddScheduleIDs adds the "schedules" edge to the LessonSchedule entity by IDs.
func (lpc *LessonPlanCreate) AddScheduleIDs(ids ...int) *LessonPlanCreate {
	lpc.mutation.AddScheduleIDs(ids...)
	return lpc
}

// AddSchedules adds the "schedules" edges to the LessonSchedule entity.
func (lpc *LessonPlanCreate) AddSchedules(l ...*LessonSchedule) *LessonPlanCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpc.AddScheduleIDs(ids...)
}

// AddGradeIDs adds the "grades" edge to the Grade entity by IDs.
func (lpc *LessonPlanCreate) AddGradeIDs(ids ...int) *LessonPlanCreate {
	lpc.mutation.AddGradeIDs(ids...)
	return lpc
}

// AddGrades adds the "grades" edges to the Grade entity.
func (lpc *LessonPlanCreate) AddGrades(g ...*Grade) *LessonPlanCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return lpc.AddGradeIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (lpc *LessonPlanCreate) AddSubjectIDs(ids ...int) *LessonPlanCreate {
	lpc.mutation.AddSubjectIDs(ids...)
	return lpc
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (lpc *LessonPlanCreate) AddSubjects(s ...*Subject) *LessonPlanCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lpc.AddSubjectIDs(ids...)
}

// AddEducationCategoryIDs adds the "education_categories" edge to the EducationCategory entity by IDs.
func (lpc *LessonPlanCreate) AddEducationCategoryIDs(ids ...int) *LessonPlanCreate {
	lpc.mutation.AddEducationCategoryIDs(ids...)
	return lpc
}

// AddEducationCategories adds the "education_categories" edges to the EducationCategory entity.
func (lpc *LessonPlanCreate) AddEducationCategories(e ...*EducationCategory) *LessonPlanCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lpc.AddEducationCategoryIDs(ids...)
}

// AddUploadFileIDs adds the "upload_files" edge to the UploadFile entity by IDs.
func (lpc *LessonPlanCreate) AddUploadFileIDs(ids ...int) *LessonPlanCreate {
	lpc.mutation.AddUploadFileIDs(ids...)
	return lpc
}

// AddUploadFiles adds the "upload_files" edges to the UploadFile entity.
func (lpc *LessonPlanCreate) AddUploadFiles(u ...*UploadFile) *LessonPlanCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lpc.AddUploadFileIDs(ids...)
}

// Mutation returns the LessonPlanMutation object of the builder.
func (lpc *LessonPlanCreate) Mutation() *LessonPlanMutation {
	return lpc.mutation
}

// Save creates the LessonPlan in the database.
func (lpc *LessonPlanCreate) Save(ctx context.Context) (*LessonPlan, error) {
	lpc.defaults()
	return withHooks(ctx, lpc.sqlSave, lpc.mutation, lpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpc *LessonPlanCreate) SaveX(ctx context.Context) *LessonPlan {
	v, err := lpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpc *LessonPlanCreate) Exec(ctx context.Context) error {
	_, err := lpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpc *LessonPlanCreate) ExecX(ctx context.Context) {
	if err := lpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpc *LessonPlanCreate) defaults() {
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		v := lessonplan.DefaultCreatedAt()
		lpc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpc.mutation.UpdatedAt(); !ok {
		v := lessonplan.DefaultUpdatedAt()
		lpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpc *LessonPlanCreate) check() error {
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonPlan.created_at"`)}
	}
	if _, ok := lpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonPlan.updated_at"`)}
	}
	if _, ok := lpc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "LessonPlan.company_id"`)}
	}
	if v, ok := lpc.mutation.CompanyID(); ok {
		if err := lessonplan.CompanyIDValidator(v); err != nil {
			return &ValidationError{Name: "company_id", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.company_id": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "LessonPlan.title"`)}
	}
	if v, ok := lpc.mutation.Title(); ok {
		if err := lessonplan.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.title": %w`, err)}
		}
	}
	if v, ok := lpc.mutation.Description(); ok {
		if err := lessonplan.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.description": %w`, err)}
		}
	}
	if v, ok := lpc.mutation.Location(); ok {
		if err := lessonplan.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.location": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.LessonType(); !ok {
		return &ValidationError{Name: "lesson_type", err: errors.New(`ent: missing required field "LessonPlan.lesson_type"`)}
	}
	if v, ok := lpc.mutation.LessonType(); ok {
		if err := lessonplan.LessonTypeValidator(v); err != nil {
			return &ValidationError{Name: "lesson_type", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.lesson_type": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.AnnualMaxExecutions(); !ok {
		return &ValidationError{Name: "annual_max_executions", err: errors.New(`ent: missing required field "LessonPlan.annual_max_executions"`)}
	}
	if v, ok := lpc.mutation.AnnualMaxExecutions(); ok {
		if err := lessonplan.AnnualMaxExecutionsValidator(v); err != nil {
			return &ValidationError{Name: "annual_max_executions", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.annual_max_executions": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.StartMonth(); !ok {
		return &ValidationError{Name: "start_month", err: errors.New(`ent: missing required field "LessonPlan.start_month"`)}
	}
	if v, ok := lpc.mutation.StartMonth(); ok {
		if err := lessonplan.StartMonthValidator(v); err != nil {
			return &ValidationError{Name: "start_month", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.start_month": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.StartDay(); !ok {
		return &ValidationError{Name: "start_day", err: errors.New(`ent: missing required field "LessonPlan.start_day"`)}
	}
	if v, ok := lpc.mutation.StartDay(); ok {
		if err := lessonplan.StartDayValidator(v); err != nil {
			return &ValidationError{Name: "start_day", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.start_day": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.EndMonth(); !ok {
		return &ValidationError{Name: "end_month", err: errors.New(`ent: missing required field "LessonPlan.end_month"`)}
	}
	if v, ok := lpc.mutation.EndMonth(); ok {
		if err := lessonplan.EndMonthValidator(v); err != nil {
			return &ValidationError{Name: "end_month", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.end_month": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.EndDay(); !ok {
		return &ValidationError{Name: "end_day", err: errors.New(`ent: missing required field "LessonPlan.end_day"`)}
	}
	if v, ok := lpc.mutation.EndDay(); ok {
		if err := lessonplan.EndDayValidator(v); err != nil {
			return &ValidationError{Name: "end_day", err: fmt.Errorf(`ent: validator failed for field "LessonPlan.end_day": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "LessonPlan.start_time"`)}
	}
	if _, ok := lpc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "LessonPlan.end_time"`)}
	}
	if len(lpc.mutation.CompanyIDs()) == 0 {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "LessonPlan.company"`)}
	}
	return nil
}

func (lpc *LessonPlanCreate) sqlSave(ctx context.Context) (*LessonPlan, error) {
	if err := lpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lpc.mutation.id = &_node.ID
	lpc.mutation.done = true
	return _node, nil
}

func (lpc *LessonPlanCreate) createSpec() (*LessonPlan, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonPlan{config: lpc.config}
		_spec = sqlgraph.NewCreateSpec(lessonplan.Table, sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt))
	)
	if value, ok := lpc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonplan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lpc.mutation.Title(); ok {
		_spec.SetField(lessonplan.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := lpc.mutation.Description(); ok {
		_spec.SetField(lessonplan.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lpc.mutation.Location(); ok {
		_spec.SetField(lessonplan.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := lpc.mutation.LessonType(); ok {
		_spec.SetField(lessonplan.FieldLessonType, field.TypeEnum, value)
		_node.LessonType = value
	}
	if value, ok := lpc.mutation.AnnualMaxExecutions(); ok {
		_spec.SetField(lessonplan.FieldAnnualMaxExecutions, field.TypeInt, value)
		_node.AnnualMaxExecutions = value
	}
	if value, ok := lpc.mutation.StartMonth(); ok {
		_spec.SetField(lessonplan.FieldStartMonth, field.TypeInt, value)
		_node.StartMonth = value
	}
	if value, ok := lpc.mutation.StartDay(); ok {
		_spec.SetField(lessonplan.FieldStartDay, field.TypeInt, value)
		_node.StartDay = value
	}
	if value, ok := lpc.mutation.EndMonth(); ok {
		_spec.SetField(lessonplan.FieldEndMonth, field.TypeInt, value)
		_node.EndMonth = value
	}
	if value, ok := lpc.mutation.EndDay(); ok {
		_spec.SetField(lessonplan.FieldEndDay, field.TypeInt, value)
		_node.EndDay = value
	}
	if value, ok := lpc.mutation.StartTime(); ok {
		_spec.SetField(lessonplan.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := lpc.mutation.EndTime(); ok {
		_spec.SetField(lessonplan.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := lpc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonplan.CompanyTable,
			Columns: []string{lessonplan.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompanyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonplan.SchedulesTable,
			Columns: []string{lessonplan.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.GradesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lessonplan.GradesTable,
			Columns: lessonplan.GradesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grade.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lessonplan.SubjectsTable,
			Columns: lessonplan.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.EducationCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lessonplan.EducationCategoriesTable,
			Columns: lessonplan.EducationCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.UploadFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonplan.UploadFilesTable,
			Columns: []string{lessonplan.UploadFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonPlanCreateBulk is the builder for creating many LessonPlan entities in bulk.
type LessonPlanCreateBulk struct {
	config
	err      error
	builders []*LessonPlanCreate
}

// Save creates the LessonPlan entities in the database.
func (lpcb *LessonPlanCreateBulk) Save(ctx context.Context) ([]*LessonPlan, error) {
	if lpcb.err != nil {
		return nil, lpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpcb.builders))
	nodes := make([]*LessonPlan, len(lpcb.builders))
	mutators := make([]Mutator, len(lpcb.builders))
	for i := range lpcb.builders {
		func(i int, root context.Context) {
			builder := lpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonPlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpcb *LessonPlanCreateBulk) SaveX(ctx context.Context) []*LessonPlan {
	v, err := lpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpcb *LessonPlanCreateBulk) Exec(ctx context.Context) error {
	_, err := lpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpcb *LessonPlanCreateBulk) ExecX(ctx context.Context) {
	if err := lpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
