// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonconfirmation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonConfirmationUpdate is the builder for updating LessonConfirmation entities.
type LessonConfirmationUpdate struct {
	config
	hooks    []Hook
	mutation *LessonConfirmationMutation
}

// Where appends a list predicates to the LessonConfirmationUpdate builder.
func (lcu *LessonConfirmationUpdate) Where(ps ...predicate.LessonConfirmation) *LessonConfirmationUpdate {
	lcu.mutation.Where(ps...)
	return lcu
}

// SetLessonReservationID sets the "lesson_reservation_id" field.
func (lcu *LessonConfirmationUpdate) SetLessonReservationID(i int) *LessonConfirmationUpdate {
	lcu.mutation.SetLessonReservationID(i)
	return lcu
}

// SetNillableLessonReservationID sets the "lesson_reservation_id" field if the given value is not nil.
func (lcu *LessonConfirmationUpdate) SetNillableLessonReservationID(i *int) *LessonConfirmationUpdate {
	if i != nil {
		lcu.SetLessonReservationID(*i)
	}
	return lcu
}

// SetMatchingDate sets the "matching_date" field.
func (lcu *LessonConfirmationUpdate) SetMatchingDate(t time.Time) *LessonConfirmationUpdate {
	lcu.mutation.SetMatchingDate(t)
	return lcu
}

// SetNillableMatchingDate sets the "matching_date" field if the given value is not nil.
func (lcu *LessonConfirmationUpdate) SetNillableMatchingDate(t *time.Time) *LessonConfirmationUpdate {
	if t != nil {
		lcu.SetMatchingDate(*t)
	}
	return lcu
}

// SetStartTime sets the "start_time" field.
func (lcu *LessonConfirmationUpdate) SetStartTime(t time.Time) *LessonConfirmationUpdate {
	lcu.mutation.SetStartTime(t)
	return lcu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (lcu *LessonConfirmationUpdate) SetNillableStartTime(t *time.Time) *LessonConfirmationUpdate {
	if t != nil {
		lcu.SetStartTime(*t)
	}
	return lcu
}

// SetFinishTime sets the "finish_time" field.
func (lcu *LessonConfirmationUpdate) SetFinishTime(t time.Time) *LessonConfirmationUpdate {
	lcu.mutation.SetFinishTime(t)
	return lcu
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (lcu *LessonConfirmationUpdate) SetNillableFinishTime(t *time.Time) *LessonConfirmationUpdate {
	if t != nil {
		lcu.SetFinishTime(*t)
	}
	return lcu
}

// SetRemarks sets the "remarks" field.
func (lcu *LessonConfirmationUpdate) SetRemarks(s string) *LessonConfirmationUpdate {
	lcu.mutation.SetRemarks(s)
	return lcu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lcu *LessonConfirmationUpdate) SetNillableRemarks(s *string) *LessonConfirmationUpdate {
	if s != nil {
		lcu.SetRemarks(*s)
	}
	return lcu
}

// ClearRemarks clears the value of the "remarks" field.
func (lcu *LessonConfirmationUpdate) ClearRemarks() *LessonConfirmationUpdate {
	lcu.mutation.ClearRemarks()
	return lcu
}

// SetLessonReservation sets the "lesson_reservation" edge to the LessonReservation entity.
func (lcu *LessonConfirmationUpdate) SetLessonReservation(l *LessonReservation) *LessonConfirmationUpdate {
	return lcu.SetLessonReservationID(l.ID)
}

// Mutation returns the LessonConfirmationMutation object of the builder.
func (lcu *LessonConfirmationUpdate) Mutation() *LessonConfirmationMutation {
	return lcu.mutation
}

// ClearLessonReservation clears the "lesson_reservation" edge to the LessonReservation entity.
func (lcu *LessonConfirmationUpdate) ClearLessonReservation() *LessonConfirmationUpdate {
	lcu.mutation.ClearLessonReservation()
	return lcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lcu *LessonConfirmationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lcu.sqlSave, lcu.mutation, lcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcu *LessonConfirmationUpdate) SaveX(ctx context.Context) int {
	affected, err := lcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lcu *LessonConfirmationUpdate) Exec(ctx context.Context) error {
	_, err := lcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcu *LessonConfirmationUpdate) ExecX(ctx context.Context) {
	if err := lcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcu *LessonConfirmationUpdate) check() error {
	if v, ok := lcu.mutation.LessonReservationID(); ok {
		if err := lessonconfirmation.LessonReservationIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_reservation_id", err: fmt.Errorf(`ent: validator failed for field "LessonConfirmation.lesson_reservation_id": %w`, err)}
		}
	}
	if lcu.mutation.LessonReservationCleared() && len(lcu.mutation.LessonReservationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonConfirmation.lesson_reservation"`)
	}
	return nil
}

func (lcu *LessonConfirmationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonconfirmation.Table, lessonconfirmation.Columns, sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt))
	if ps := lcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcu.mutation.MatchingDate(); ok {
		_spec.SetField(lessonconfirmation.FieldMatchingDate, field.TypeTime, value)
	}
	if value, ok := lcu.mutation.StartTime(); ok {
		_spec.SetField(lessonconfirmation.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := lcu.mutation.FinishTime(); ok {
		_spec.SetField(lessonconfirmation.FieldFinishTime, field.TypeTime, value)
	}
	if value, ok := lcu.mutation.Remarks(); ok {
		_spec.SetField(lessonconfirmation.FieldRemarks, field.TypeString, value)
	}
	if lcu.mutation.RemarksCleared() {
		_spec.ClearField(lessonconfirmation.FieldRemarks, field.TypeString)
	}
	if lcu.mutation.LessonReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonconfirmation.LessonReservationTable,
			Columns: []string{lessonconfirmation.LessonReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcu.mutation.LessonReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonconfirmation.LessonReservationTable,
			Columns: []string{lessonconfirmation.LessonReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonconfirmation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lcu.mutation.done = true
	return n, nil
}

// LessonConfirmationUpdateOne is the builder for updating a single LessonConfirmation entity.
type LessonConfirmationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonConfirmationMutation
}

// SetLessonReservationID sets the "lesson_reservation_id" field.
func (lcuo *LessonConfirmationUpdateOne) SetLessonReservationID(i int) *LessonConfirmationUpdateOne {
	lcuo.mutation.SetLessonReservationID(i)
	return lcuo
}

// SetNillableLessonReservationID sets the "lesson_reservation_id" field if the given value is not nil.
func (lcuo *LessonConfirmationUpdateOne) SetNillableLessonReservationID(i *int) *LessonConfirmationUpdateOne {
	if i != nil {
		lcuo.SetLessonReservationID(*i)
	}
	return lcuo
}

// SetMatchingDate sets the "matching_date" field.
func (lcuo *LessonConfirmationUpdateOne) SetMatchingDate(t time.Time) *LessonConfirmationUpdateOne {
	lcuo.mutation.SetMatchingDate(t)
	return lcuo
}

// SetNillableMatchingDate sets the "matching_date" field if the given value is not nil.
func (lcuo *LessonConfirmationUpdateOne) SetNillableMatchingDate(t *time.Time) *LessonConfirmationUpdateOne {
	if t != nil {
		lcuo.SetMatchingDate(*t)
	}
	return lcuo
}

// SetStartTime sets the "start_time" field.
func (lcuo *LessonConfirmationUpdateOne) SetStartTime(t time.Time) *LessonConfirmationUpdateOne {
	lcuo.mutation.SetStartTime(t)
	return lcuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (lcuo *LessonConfirmationUpdateOne) SetNillableStartTime(t *time.Time) *LessonConfirmationUpdateOne {
	if t != nil {
		lcuo.SetStartTime(*t)
	}
	return lcuo
}

// SetFinishTime sets the "finish_time" field.
func (lcuo *LessonConfirmationUpdateOne) SetFinishTime(t time.Time) *LessonConfirmationUpdateOne {
	lcuo.mutation.SetFinishTime(t)
	return lcuo
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (lcuo *LessonConfirmationUpdateOne) SetNillableFinishTime(t *time.Time) *LessonConfirmationUpdateOne {
	if t != nil {
		lcuo.SetFinishTime(*t)
	}
	return lcuo
}

// SetRemarks sets the "remarks" field.
func (lcuo *LessonConfirmationUpdateOne) SetRemarks(s string) *LessonConfirmationUpdateOne {
	lcuo.mutation.SetRemarks(s)
	return lcuo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lcuo *LessonConfirmationUpdateOne) SetNillableRemarks(s *string) *LessonConfirmationUpdateOne {
	if s != nil {
		lcuo.SetRemarks(*s)
	}
	return lcuo
}

// ClearRemarks clears the value of the "remarks" field.
func (lcuo *LessonConfirmationUpdateOne) ClearRemarks() *LessonConfirmationUpdateOne {
	lcuo.mutation.ClearRemarks()
	return lcuo
}

// SetLessonReservation sets the "lesson_reservation" edge to the LessonReservation entity.
func (lcuo *LessonConfirmationUpdateOne) SetLessonReservation(l *LessonReservation) *LessonConfirmationUpdateOne {
	return lcuo.SetLessonReservationID(l.ID)
}

// Mutation returns the LessonConfirmationMutation object of the builder.
func (lcuo *LessonConfirmationUpdateOne) Mutation() *LessonConfirmationMutation {
	return lcuo.mutation
}

// ClearLessonReservation clears the "lesson_reservation" edge to the LessonReservation entity.
func (lcuo *LessonConfirmationUpdateOne) ClearLessonReservation() *LessonConfirmationUpdateOne {
	lcuo.mutation.ClearLessonReservation()
	return lcuo
}

// Where appends a list predicates to the LessonConfirmationUpdate builder.
func (lcuo *LessonConfirmationUpdateOne) Where(ps ...predicate.LessonConfirmation) *LessonConfirmationUpdateOne {
	lcuo.mutation.Where(ps...)
	return lcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lcuo *LessonConfirmationUpdateOne) Select(field string, fields ...string) *LessonConfirmationUpdateOne {
	lcuo.fields = append([]string{field}, fields...)
	return lcuo
}

// Save executes the query and returns the updated LessonConfirmation entity.
func (lcuo *LessonConfirmationUpdateOne) Save(ctx context.Context) (*LessonConfirmation, error) {
	return withHooks(ctx, lcuo.sqlSave, lcuo.mutation, lcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcuo *LessonConfirmationUpdateOne) SaveX(ctx context.Context) *LessonConfirmation {
	node, err := lcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lcuo *LessonConfirmationUpdateOne) Exec(ctx context.Context) error {
	_, err := lcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcuo *LessonConfirmationUpdateOne) ExecX(ctx context.Context) {
	if err := lcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcuo *LessonConfirmationUpdateOne) check() error {
	if v, ok := lcuo.mutation.LessonReservationID(); ok {
		if err := lessonconfirmation.LessonReservationIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_reservation_id", err: fmt.Errorf(`ent: validator failed for field "LessonConfirmation.lesson_reservation_id": %w`, err)}
		}
	}
	if lcuo.mutation.LessonReservationCleared() && len(lcuo.mutation.LessonReservationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonConfirmation.lesson_reservation"`)
	}
	return nil
}

func (lcuo *LessonConfirmationUpdateOne) sqlSave(ctx context.Context) (_node *LessonConfirmation, err error) {
	if err := lcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonconfirmation.Table, lessonconfirmation.Columns, sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt))
	id, ok := lcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LessonConfirmation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonconfirmation.FieldID)
		for _, f := range fields {
			if !lessonconfirmation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lessonconfirmation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcuo.mutation.MatchingDate(); ok {
		_spec.SetField(lessonconfirmation.FieldMatchingDate, field.TypeTime, value)
	}
	if value, ok := lcuo.mutation.StartTime(); ok {
		_spec.SetField(lessonconfirmation.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := lcuo.mutation.FinishTime(); ok {
		_spec.SetField(lessonconfirmation.FieldFinishTime, field.TypeTime, value)
	}
	if value, ok := lcuo.mutation.Remarks(); ok {
		_spec.SetField(lessonconfirmation.FieldRemarks, field.TypeString, value)
	}
	if lcuo.mutation.RemarksCleared() {
		_spec.ClearField(lessonconfirmation.FieldRemarks, field.TypeString)
	}
	if lcuo.mutation.LessonReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonconfirmation.LessonReservationTable,
			Columns: []string{lessonconfirmation.LessonReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcuo.mutation.LessonReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonconfirmation.LessonReservationTable,
			Columns: []string{lessonconfirmation.LessonReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LessonConfirmation{config: lcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonconfirmation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lcuo.mutation.done = true
	return _node, nil
}
