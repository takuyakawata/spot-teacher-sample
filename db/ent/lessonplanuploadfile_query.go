// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplanuploadfile"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// LessonPlanUploadFileQuery is the builder for querying LessonPlanUploadFile entities.
type LessonPlanUploadFileQuery struct {
	config
	ctx            *QueryContext
	order          []lessonplanuploadfile.OrderOption
	inters         []Interceptor
	predicates     []predicate.LessonPlanUploadFile
	withLessonPlan *LessonPlanQuery
	withUploadFile *UploadFileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LessonPlanUploadFileQuery builder.
func (lpufq *LessonPlanUploadFileQuery) Where(ps ...predicate.LessonPlanUploadFile) *LessonPlanUploadFileQuery {
	lpufq.predicates = append(lpufq.predicates, ps...)
	return lpufq
}

// Limit the number of records to be returned by this query.
func (lpufq *LessonPlanUploadFileQuery) Limit(limit int) *LessonPlanUploadFileQuery {
	lpufq.ctx.Limit = &limit
	return lpufq
}

// Offset to start from.
func (lpufq *LessonPlanUploadFileQuery) Offset(offset int) *LessonPlanUploadFileQuery {
	lpufq.ctx.Offset = &offset
	return lpufq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lpufq *LessonPlanUploadFileQuery) Unique(unique bool) *LessonPlanUploadFileQuery {
	lpufq.ctx.Unique = &unique
	return lpufq
}

// Order specifies how the records should be ordered.
func (lpufq *LessonPlanUploadFileQuery) Order(o ...lessonplanuploadfile.OrderOption) *LessonPlanUploadFileQuery {
	lpufq.order = append(lpufq.order, o...)
	return lpufq
}

// QueryLessonPlan chains the current query on the "lesson_plan" edge.
func (lpufq *LessonPlanUploadFileQuery) QueryLessonPlan() *LessonPlanQuery {
	query := (&LessonPlanClient{config: lpufq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpufq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpufq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplanuploadfile.Table, lessonplanuploadfile.FieldID, selector),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lessonplanuploadfile.LessonPlanTable, lessonplanuploadfile.LessonPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpufq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUploadFile chains the current query on the "upload_file" edge.
func (lpufq *LessonPlanUploadFileQuery) QueryUploadFile() *UploadFileQuery {
	query := (&UploadFileClient{config: lpufq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpufq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpufq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplanuploadfile.Table, lessonplanuploadfile.FieldID, selector),
			sqlgraph.To(uploadfile.Table, uploadfile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lessonplanuploadfile.UploadFileTable, lessonplanuploadfile.UploadFileColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpufq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LessonPlanUploadFile entity from the query.
// Returns a *NotFoundError when no LessonPlanUploadFile was found.
func (lpufq *LessonPlanUploadFileQuery) First(ctx context.Context) (*LessonPlanUploadFile, error) {
	nodes, err := lpufq.Limit(1).All(setContextOp(ctx, lpufq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lessonplanuploadfile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) FirstX(ctx context.Context) *LessonPlanUploadFile {
	node, err := lpufq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LessonPlanUploadFile ID from the query.
// Returns a *NotFoundError when no LessonPlanUploadFile ID was found.
func (lpufq *LessonPlanUploadFileQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpufq.Limit(1).IDs(setContextOp(ctx, lpufq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lessonplanuploadfile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) FirstIDX(ctx context.Context) int64 {
	id, err := lpufq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LessonPlanUploadFile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LessonPlanUploadFile entity is found.
// Returns a *NotFoundError when no LessonPlanUploadFile entities are found.
func (lpufq *LessonPlanUploadFileQuery) Only(ctx context.Context) (*LessonPlanUploadFile, error) {
	nodes, err := lpufq.Limit(2).All(setContextOp(ctx, lpufq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lessonplanuploadfile.Label}
	default:
		return nil, &NotSingularError{lessonplanuploadfile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) OnlyX(ctx context.Context) *LessonPlanUploadFile {
	node, err := lpufq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LessonPlanUploadFile ID in the query.
// Returns a *NotSingularError when more than one LessonPlanUploadFile ID is found.
// Returns a *NotFoundError when no entities are found.
func (lpufq *LessonPlanUploadFileQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpufq.Limit(2).IDs(setContextOp(ctx, lpufq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lessonplanuploadfile.Label}
	default:
		err = &NotSingularError{lessonplanuploadfile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := lpufq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LessonPlanUploadFiles.
func (lpufq *LessonPlanUploadFileQuery) All(ctx context.Context) ([]*LessonPlanUploadFile, error) {
	ctx = setContextOp(ctx, lpufq.ctx, ent.OpQueryAll)
	if err := lpufq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LessonPlanUploadFile, *LessonPlanUploadFileQuery]()
	return withInterceptors[[]*LessonPlanUploadFile](ctx, lpufq, qr, lpufq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) AllX(ctx context.Context) []*LessonPlanUploadFile {
	nodes, err := lpufq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LessonPlanUploadFile IDs.
func (lpufq *LessonPlanUploadFileQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if lpufq.ctx.Unique == nil && lpufq.path != nil {
		lpufq.Unique(true)
	}
	ctx = setContextOp(ctx, lpufq.ctx, ent.OpQueryIDs)
	if err = lpufq.Select(lessonplanuploadfile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) IDsX(ctx context.Context) []int64 {
	ids, err := lpufq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lpufq *LessonPlanUploadFileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lpufq.ctx, ent.OpQueryCount)
	if err := lpufq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lpufq, querierCount[*LessonPlanUploadFileQuery](), lpufq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) CountX(ctx context.Context) int {
	count, err := lpufq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lpufq *LessonPlanUploadFileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lpufq.ctx, ent.OpQueryExist)
	switch _, err := lpufq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lpufq *LessonPlanUploadFileQuery) ExistX(ctx context.Context) bool {
	exist, err := lpufq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LessonPlanUploadFileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lpufq *LessonPlanUploadFileQuery) Clone() *LessonPlanUploadFileQuery {
	if lpufq == nil {
		return nil
	}
	return &LessonPlanUploadFileQuery{
		config:         lpufq.config,
		ctx:            lpufq.ctx.Clone(),
		order:          append([]lessonplanuploadfile.OrderOption{}, lpufq.order...),
		inters:         append([]Interceptor{}, lpufq.inters...),
		predicates:     append([]predicate.LessonPlanUploadFile{}, lpufq.predicates...),
		withLessonPlan: lpufq.withLessonPlan.Clone(),
		withUploadFile: lpufq.withUploadFile.Clone(),
		// clone intermediate query.
		sql:  lpufq.sql.Clone(),
		path: lpufq.path,
	}
}

// WithLessonPlan tells the query-builder to eager-load the nodes that are connected to
// the "lesson_plan" edge. The optional arguments are used to configure the query builder of the edge.
func (lpufq *LessonPlanUploadFileQuery) WithLessonPlan(opts ...func(*LessonPlanQuery)) *LessonPlanUploadFileQuery {
	query := (&LessonPlanClient{config: lpufq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpufq.withLessonPlan = query
	return lpufq
}

// WithUploadFile tells the query-builder to eager-load the nodes that are connected to
// the "upload_file" edge. The optional arguments are used to configure the query builder of the edge.
func (lpufq *LessonPlanUploadFileQuery) WithUploadFile(opts ...func(*UploadFileQuery)) *LessonPlanUploadFileQuery {
	query := (&UploadFileClient{config: lpufq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpufq.withUploadFile = query
	return lpufq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LessonPlanUploadFile.Query().
//		GroupBy(lessonplanuploadfile.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lpufq *LessonPlanUploadFileQuery) GroupBy(field string, fields ...string) *LessonPlanUploadFileGroupBy {
	lpufq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LessonPlanUploadFileGroupBy{build: lpufq}
	grbuild.flds = &lpufq.ctx.Fields
	grbuild.label = lessonplanuploadfile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LessonPlanUploadFile.Query().
//		Select(lessonplanuploadfile.FieldCreatedAt).
//		Scan(ctx, &v)
func (lpufq *LessonPlanUploadFileQuery) Select(fields ...string) *LessonPlanUploadFileSelect {
	lpufq.ctx.Fields = append(lpufq.ctx.Fields, fields...)
	sbuild := &LessonPlanUploadFileSelect{LessonPlanUploadFileQuery: lpufq}
	sbuild.label = lessonplanuploadfile.Label
	sbuild.flds, sbuild.scan = &lpufq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LessonPlanUploadFileSelect configured with the given aggregations.
func (lpufq *LessonPlanUploadFileQuery) Aggregate(fns ...AggregateFunc) *LessonPlanUploadFileSelect {
	return lpufq.Select().Aggregate(fns...)
}

func (lpufq *LessonPlanUploadFileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lpufq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lpufq); err != nil {
				return err
			}
		}
	}
	for _, f := range lpufq.ctx.Fields {
		if !lessonplanuploadfile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lpufq.path != nil {
		prev, err := lpufq.path(ctx)
		if err != nil {
			return err
		}
		lpufq.sql = prev
	}
	return nil
}

func (lpufq *LessonPlanUploadFileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LessonPlanUploadFile, error) {
	var (
		nodes       = []*LessonPlanUploadFile{}
		_spec       = lpufq.querySpec()
		loadedTypes = [2]bool{
			lpufq.withLessonPlan != nil,
			lpufq.withUploadFile != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LessonPlanUploadFile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LessonPlanUploadFile{config: lpufq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lpufq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lpufq.withLessonPlan; query != nil {
		if err := lpufq.loadLessonPlan(ctx, query, nodes, nil,
			func(n *LessonPlanUploadFile, e *LessonPlan) { n.Edges.LessonPlan = e }); err != nil {
			return nil, err
		}
	}
	if query := lpufq.withUploadFile; query != nil {
		if err := lpufq.loadUploadFile(ctx, query, nodes, nil,
			func(n *LessonPlanUploadFile, e *UploadFile) { n.Edges.UploadFile = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lpufq *LessonPlanUploadFileQuery) loadLessonPlan(ctx context.Context, query *LessonPlanQuery, nodes []*LessonPlanUploadFile, init func(*LessonPlanUploadFile), assign func(*LessonPlanUploadFile, *LessonPlan)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonPlanUploadFile)
	for i := range nodes {
		fk := nodes[i].LessonPlanID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lessonplan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lesson_plan_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpufq *LessonPlanUploadFileQuery) loadUploadFile(ctx context.Context, query *UploadFileQuery, nodes []*LessonPlanUploadFile, init func(*LessonPlanUploadFile), assign func(*LessonPlanUploadFile, *UploadFile)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonPlanUploadFile)
	for i := range nodes {
		fk := nodes[i].UploadFileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(uploadfile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "upload_file_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lpufq *LessonPlanUploadFileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lpufq.querySpec()
	_spec.Node.Columns = lpufq.ctx.Fields
	if len(lpufq.ctx.Fields) > 0 {
		_spec.Unique = lpufq.ctx.Unique != nil && *lpufq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lpufq.driver, _spec)
}

func (lpufq *LessonPlanUploadFileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lessonplanuploadfile.Table, lessonplanuploadfile.Columns, sqlgraph.NewFieldSpec(lessonplanuploadfile.FieldID, field.TypeInt64))
	_spec.From = lpufq.sql
	if unique := lpufq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lpufq.path != nil {
		_spec.Unique = true
	}
	if fields := lpufq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonplanuploadfile.FieldID)
		for i := range fields {
			if fields[i] != lessonplanuploadfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lpufq.withLessonPlan != nil {
			_spec.Node.AddColumnOnce(lessonplanuploadfile.FieldLessonPlanID)
		}
		if lpufq.withUploadFile != nil {
			_spec.Node.AddColumnOnce(lessonplanuploadfile.FieldUploadFileID)
		}
	}
	if ps := lpufq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lpufq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lpufq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lpufq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lpufq *LessonPlanUploadFileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lpufq.driver.Dialect())
	t1 := builder.Table(lessonplanuploadfile.Table)
	columns := lpufq.ctx.Fields
	if len(columns) == 0 {
		columns = lessonplanuploadfile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lpufq.sql != nil {
		selector = lpufq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lpufq.ctx.Unique != nil && *lpufq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lpufq.predicates {
		p(selector)
	}
	for _, p := range lpufq.order {
		p(selector)
	}
	if offset := lpufq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lpufq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LessonPlanUploadFileGroupBy is the group-by builder for LessonPlanUploadFile entities.
type LessonPlanUploadFileGroupBy struct {
	selector
	build *LessonPlanUploadFileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lpufgb *LessonPlanUploadFileGroupBy) Aggregate(fns ...AggregateFunc) *LessonPlanUploadFileGroupBy {
	lpufgb.fns = append(lpufgb.fns, fns...)
	return lpufgb
}

// Scan applies the selector query and scans the result into the given value.
func (lpufgb *LessonPlanUploadFileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpufgb.build.ctx, ent.OpQueryGroupBy)
	if err := lpufgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonPlanUploadFileQuery, *LessonPlanUploadFileGroupBy](ctx, lpufgb.build, lpufgb, lpufgb.build.inters, v)
}

func (lpufgb *LessonPlanUploadFileGroupBy) sqlScan(ctx context.Context, root *LessonPlanUploadFileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lpufgb.fns))
	for _, fn := range lpufgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lpufgb.flds)+len(lpufgb.fns))
		for _, f := range *lpufgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lpufgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpufgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LessonPlanUploadFileSelect is the builder for selecting fields of LessonPlanUploadFile entities.
type LessonPlanUploadFileSelect struct {
	*LessonPlanUploadFileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lpufs *LessonPlanUploadFileSelect) Aggregate(fns ...AggregateFunc) *LessonPlanUploadFileSelect {
	lpufs.fns = append(lpufs.fns, fns...)
	return lpufs
}

// Scan applies the selector query and scans the result into the given value.
func (lpufs *LessonPlanUploadFileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpufs.ctx, ent.OpQuerySelect)
	if err := lpufs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonPlanUploadFileQuery, *LessonPlanUploadFileSelect](ctx, lpufs.LessonPlanUploadFileQuery, lpufs, lpufs.inters, v)
}

func (lpufs *LessonPlanUploadFileSelect) sqlScan(ctx context.Context, root *LessonPlanUploadFileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lpufs.fns))
	for _, fn := range lpufs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lpufs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpufs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
