// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/grade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplangrade"
)

// LessonPlanGrade is the model entity for the LessonPlanGrade schema.
type LessonPlanGrade struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LessonPlanID holds the value of the "lesson_plan_id" field.
	LessonPlanID int64 `json:"lesson_plan_id,omitempty"`
	// GradeID holds the value of the "grade_id" field.
	GradeID int64 `json:"grade_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonPlanGradeQuery when eager-loading is set.
	Edges        LessonPlanGradeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonPlanGradeEdges holds the relations/edges for other nodes in the graph.
type LessonPlanGradeEdges struct {
	// LessonPlan holds the value of the lesson_plan edge.
	LessonPlan *LessonPlan `json:"lesson_plan,omitempty"`
	// Grade holds the value of the grade edge.
	Grade *Grade `json:"grade,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LessonPlanOrErr returns the LessonPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonPlanGradeEdges) LessonPlanOrErr() (*LessonPlan, error) {
	if e.LessonPlan != nil {
		return e.LessonPlan, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonplan.Label}
	}
	return nil, &NotLoadedError{edge: "lesson_plan"}
}

// GradeOrErr returns the Grade value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonPlanGradeEdges) GradeOrErr() (*Grade, error) {
	if e.Grade != nil {
		return e.Grade, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: grade.Label}
	}
	return nil, &NotLoadedError{edge: "grade"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonPlanGrade) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonplangrade.FieldID, lessonplangrade.FieldLessonPlanID, lessonplangrade.FieldGradeID:
			values[i] = new(sql.NullInt64)
		case lessonplangrade.FieldCreatedAt, lessonplangrade.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonPlanGrade fields.
func (lpg *LessonPlanGrade) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonplangrade.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lpg.ID = int64(value.Int64)
		case lessonplangrade.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lpg.CreatedAt = value.Time
			}
		case lessonplangrade.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lpg.UpdatedAt = value.Time
			}
		case lessonplangrade.FieldLessonPlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_plan_id", values[i])
			} else if value.Valid {
				lpg.LessonPlanID = value.Int64
			}
		case lessonplangrade.FieldGradeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field grade_id", values[i])
			} else if value.Valid {
				lpg.GradeID = value.Int64
			}
		default:
			lpg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonPlanGrade.
// This includes values selected through modifiers, order, etc.
func (lpg *LessonPlanGrade) Value(name string) (ent.Value, error) {
	return lpg.selectValues.Get(name)
}

// QueryLessonPlan queries the "lesson_plan" edge of the LessonPlanGrade entity.
func (lpg *LessonPlanGrade) QueryLessonPlan() *LessonPlanQuery {
	return NewLessonPlanGradeClient(lpg.config).QueryLessonPlan(lpg)
}

// QueryGrade queries the "grade" edge of the LessonPlanGrade entity.
func (lpg *LessonPlanGrade) QueryGrade() *GradeQuery {
	return NewLessonPlanGradeClient(lpg.config).QueryGrade(lpg)
}

// Update returns a builder for updating this LessonPlanGrade.
// Note that you need to call LessonPlanGrade.Unwrap() before calling this method if this LessonPlanGrade
// was returned from a transaction, and the transaction was committed or rolled back.
func (lpg *LessonPlanGrade) Update() *LessonPlanGradeUpdateOne {
	return NewLessonPlanGradeClient(lpg.config).UpdateOne(lpg)
}

// Unwrap unwraps the LessonPlanGrade entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lpg *LessonPlanGrade) Unwrap() *LessonPlanGrade {
	_tx, ok := lpg.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonPlanGrade is not a transactional entity")
	}
	lpg.config.driver = _tx.drv
	return lpg
}

// String implements the fmt.Stringer.
func (lpg *LessonPlanGrade) String() string {
	var builder strings.Builder
	builder.WriteString("LessonPlanGrade(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lpg.ID))
	builder.WriteString("created_at=")
	builder.WriteString(lpg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lpg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lesson_plan_id=")
	builder.WriteString(fmt.Sprintf("%v", lpg.LessonPlanID))
	builder.WriteString(", ")
	builder.WriteString("grade_id=")
	builder.WriteString(fmt.Sprintf("%v", lpg.GradeID))
	builder.WriteByte(')')
	return builder.String()
}

// LessonPlanGrades is a parsable slice of LessonPlanGrade.
type LessonPlanGrades []*LessonPlanGrade
