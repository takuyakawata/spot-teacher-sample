// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonReservationPreferredDateUpdate is the builder for updating LessonReservationPreferredDate entities.
type LessonReservationPreferredDateUpdate struct {
	config
	hooks    []Hook
	mutation *LessonReservationPreferredDateMutation
}

// Where appends a list predicates to the LessonReservationPreferredDateUpdate builder.
func (lrpdu *LessonReservationPreferredDateUpdate) Where(ps ...predicate.LessonReservationPreferredDate) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.Where(ps...)
	return lrpdu
}

// SetUpdatedAt sets the "updated_at" field.
func (lrpdu *LessonReservationPreferredDateUpdate) SetUpdatedAt(t time.Time) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.SetUpdatedAt(t)
	return lrpdu
}

// SetLessonReservationID sets the "lesson_reservation_id" field.
func (lrpdu *LessonReservationPreferredDateUpdate) SetLessonReservationID(i int) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.SetLessonReservationID(i)
	return lrpdu
}

// SetNillableLessonReservationID sets the "lesson_reservation_id" field if the given value is not nil.
func (lrpdu *LessonReservationPreferredDateUpdate) SetNillableLessonReservationID(i *int) *LessonReservationPreferredDateUpdate {
	if i != nil {
		lrpdu.SetLessonReservationID(*i)
	}
	return lrpdu
}

// SetPriority sets the "priority" field.
func (lrpdu *LessonReservationPreferredDateUpdate) SetPriority(l lessonreservationpreferreddate.Priority) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.SetPriority(l)
	return lrpdu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (lrpdu *LessonReservationPreferredDateUpdate) SetNillablePriority(l *lessonreservationpreferreddate.Priority) *LessonReservationPreferredDateUpdate {
	if l != nil {
		lrpdu.SetPriority(*l)
	}
	return lrpdu
}

// SetDate sets the "date" field.
func (lrpdu *LessonReservationPreferredDateUpdate) SetDate(t time.Time) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.SetDate(t)
	return lrpdu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (lrpdu *LessonReservationPreferredDateUpdate) SetNillableDate(t *time.Time) *LessonReservationPreferredDateUpdate {
	if t != nil {
		lrpdu.SetDate(*t)
	}
	return lrpdu
}

// SetStartTime sets the "start_time" field.
func (lrpdu *LessonReservationPreferredDateUpdate) SetStartTime(t time.Time) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.SetStartTime(t)
	return lrpdu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (lrpdu *LessonReservationPreferredDateUpdate) SetNillableStartTime(t *time.Time) *LessonReservationPreferredDateUpdate {
	if t != nil {
		lrpdu.SetStartTime(*t)
	}
	return lrpdu
}

// SetEndTime sets the "end_time" field.
func (lrpdu *LessonReservationPreferredDateUpdate) SetEndTime(t time.Time) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.SetEndTime(t)
	return lrpdu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (lrpdu *LessonReservationPreferredDateUpdate) SetNillableEndTime(t *time.Time) *LessonReservationPreferredDateUpdate {
	if t != nil {
		lrpdu.SetEndTime(*t)
	}
	return lrpdu
}

// SetLessonReservationsID sets the "lessonReservations" edge to the LessonReservation entity by ID.
func (lrpdu *LessonReservationPreferredDateUpdate) SetLessonReservationsID(id int) *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.SetLessonReservationsID(id)
	return lrpdu
}

// SetLessonReservations sets the "lessonReservations" edge to the LessonReservation entity.
func (lrpdu *LessonReservationPreferredDateUpdate) SetLessonReservations(l *LessonReservation) *LessonReservationPreferredDateUpdate {
	return lrpdu.SetLessonReservationsID(l.ID)
}

// Mutation returns the LessonReservationPreferredDateMutation object of the builder.
func (lrpdu *LessonReservationPreferredDateUpdate) Mutation() *LessonReservationPreferredDateMutation {
	return lrpdu.mutation
}

// ClearLessonReservations clears the "lessonReservations" edge to the LessonReservation entity.
func (lrpdu *LessonReservationPreferredDateUpdate) ClearLessonReservations() *LessonReservationPreferredDateUpdate {
	lrpdu.mutation.ClearLessonReservations()
	return lrpdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lrpdu *LessonReservationPreferredDateUpdate) Save(ctx context.Context) (int, error) {
	lrpdu.defaults()
	return withHooks(ctx, lrpdu.sqlSave, lrpdu.mutation, lrpdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lrpdu *LessonReservationPreferredDateUpdate) SaveX(ctx context.Context) int {
	affected, err := lrpdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lrpdu *LessonReservationPreferredDateUpdate) Exec(ctx context.Context) error {
	_, err := lrpdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrpdu *LessonReservationPreferredDateUpdate) ExecX(ctx context.Context) {
	if err := lrpdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrpdu *LessonReservationPreferredDateUpdate) defaults() {
	if _, ok := lrpdu.mutation.UpdatedAt(); !ok {
		v := lessonreservationpreferreddate.UpdateDefaultUpdatedAt()
		lrpdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrpdu *LessonReservationPreferredDateUpdate) check() error {
	if v, ok := lrpdu.mutation.LessonReservationID(); ok {
		if err := lessonreservationpreferreddate.LessonReservationIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_reservation_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservationPreferredDate.lesson_reservation_id": %w`, err)}
		}
	}
	if v, ok := lrpdu.mutation.Priority(); ok {
		if err := lessonreservationpreferreddate.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "LessonReservationPreferredDate.priority": %w`, err)}
		}
	}
	if lrpdu.mutation.LessonReservationsCleared() && len(lrpdu.mutation.LessonReservationsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservationPreferredDate.lessonReservations"`)
	}
	return nil
}

func (lrpdu *LessonReservationPreferredDateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lrpdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonreservationpreferreddate.Table, lessonreservationpreferreddate.Columns, sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt))
	if ps := lrpdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lrpdu.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lrpdu.mutation.Priority(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := lrpdu.mutation.Date(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldDate, field.TypeTime, value)
	}
	if value, ok := lrpdu.mutation.StartTime(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := lrpdu.mutation.EndTime(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldEndTime, field.TypeTime, value)
	}
	if lrpdu.mutation.LessonReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservationpreferreddate.LessonReservationsTable,
			Columns: []string{lessonreservationpreferreddate.LessonReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lrpdu.mutation.LessonReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservationpreferreddate.LessonReservationsTable,
			Columns: []string{lessonreservationpreferreddate.LessonReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lrpdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonreservationpreferreddate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lrpdu.mutation.done = true
	return n, nil
}

// LessonReservationPreferredDateUpdateOne is the builder for updating a single LessonReservationPreferredDate entity.
type LessonReservationPreferredDateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonReservationPreferredDateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetUpdatedAt(t time.Time) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.SetUpdatedAt(t)
	return lrpduo
}

// SetLessonReservationID sets the "lesson_reservation_id" field.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetLessonReservationID(i int) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.SetLessonReservationID(i)
	return lrpduo
}

// SetNillableLessonReservationID sets the "lesson_reservation_id" field if the given value is not nil.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetNillableLessonReservationID(i *int) *LessonReservationPreferredDateUpdateOne {
	if i != nil {
		lrpduo.SetLessonReservationID(*i)
	}
	return lrpduo
}

// SetPriority sets the "priority" field.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetPriority(l lessonreservationpreferreddate.Priority) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.SetPriority(l)
	return lrpduo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetNillablePriority(l *lessonreservationpreferreddate.Priority) *LessonReservationPreferredDateUpdateOne {
	if l != nil {
		lrpduo.SetPriority(*l)
	}
	return lrpduo
}

// SetDate sets the "date" field.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetDate(t time.Time) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.SetDate(t)
	return lrpduo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetNillableDate(t *time.Time) *LessonReservationPreferredDateUpdateOne {
	if t != nil {
		lrpduo.SetDate(*t)
	}
	return lrpduo
}

// SetStartTime sets the "start_time" field.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetStartTime(t time.Time) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.SetStartTime(t)
	return lrpduo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetNillableStartTime(t *time.Time) *LessonReservationPreferredDateUpdateOne {
	if t != nil {
		lrpduo.SetStartTime(*t)
	}
	return lrpduo
}

// SetEndTime sets the "end_time" field.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetEndTime(t time.Time) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.SetEndTime(t)
	return lrpduo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetNillableEndTime(t *time.Time) *LessonReservationPreferredDateUpdateOne {
	if t != nil {
		lrpduo.SetEndTime(*t)
	}
	return lrpduo
}

// SetLessonReservationsID sets the "lessonReservations" edge to the LessonReservation entity by ID.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetLessonReservationsID(id int) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.SetLessonReservationsID(id)
	return lrpduo
}

// SetLessonReservations sets the "lessonReservations" edge to the LessonReservation entity.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SetLessonReservations(l *LessonReservation) *LessonReservationPreferredDateUpdateOne {
	return lrpduo.SetLessonReservationsID(l.ID)
}

// Mutation returns the LessonReservationPreferredDateMutation object of the builder.
func (lrpduo *LessonReservationPreferredDateUpdateOne) Mutation() *LessonReservationPreferredDateMutation {
	return lrpduo.mutation
}

// ClearLessonReservations clears the "lessonReservations" edge to the LessonReservation entity.
func (lrpduo *LessonReservationPreferredDateUpdateOne) ClearLessonReservations() *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.ClearLessonReservations()
	return lrpduo
}

// Where appends a list predicates to the LessonReservationPreferredDateUpdate builder.
func (lrpduo *LessonReservationPreferredDateUpdateOne) Where(ps ...predicate.LessonReservationPreferredDate) *LessonReservationPreferredDateUpdateOne {
	lrpduo.mutation.Where(ps...)
	return lrpduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lrpduo *LessonReservationPreferredDateUpdateOne) Select(field string, fields ...string) *LessonReservationPreferredDateUpdateOne {
	lrpduo.fields = append([]string{field}, fields...)
	return lrpduo
}

// Save executes the query and returns the updated LessonReservationPreferredDate entity.
func (lrpduo *LessonReservationPreferredDateUpdateOne) Save(ctx context.Context) (*LessonReservationPreferredDate, error) {
	lrpduo.defaults()
	return withHooks(ctx, lrpduo.sqlSave, lrpduo.mutation, lrpduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lrpduo *LessonReservationPreferredDateUpdateOne) SaveX(ctx context.Context) *LessonReservationPreferredDate {
	node, err := lrpduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lrpduo *LessonReservationPreferredDateUpdateOne) Exec(ctx context.Context) error {
	_, err := lrpduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrpduo *LessonReservationPreferredDateUpdateOne) ExecX(ctx context.Context) {
	if err := lrpduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrpduo *LessonReservationPreferredDateUpdateOne) defaults() {
	if _, ok := lrpduo.mutation.UpdatedAt(); !ok {
		v := lessonreservationpreferreddate.UpdateDefaultUpdatedAt()
		lrpduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrpduo *LessonReservationPreferredDateUpdateOne) check() error {
	if v, ok := lrpduo.mutation.LessonReservationID(); ok {
		if err := lessonreservationpreferreddate.LessonReservationIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_reservation_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservationPreferredDate.lesson_reservation_id": %w`, err)}
		}
	}
	if v, ok := lrpduo.mutation.Priority(); ok {
		if err := lessonreservationpreferreddate.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "LessonReservationPreferredDate.priority": %w`, err)}
		}
	}
	if lrpduo.mutation.LessonReservationsCleared() && len(lrpduo.mutation.LessonReservationsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LessonReservationPreferredDate.lessonReservations"`)
	}
	return nil
}

func (lrpduo *LessonReservationPreferredDateUpdateOne) sqlSave(ctx context.Context) (_node *LessonReservationPreferredDate, err error) {
	if err := lrpduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lessonreservationpreferreddate.Table, lessonreservationpreferreddate.Columns, sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt))
	id, ok := lrpduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LessonReservationPreferredDate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lrpduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonreservationpreferreddate.FieldID)
		for _, f := range fields {
			if !lessonreservationpreferreddate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lessonreservationpreferreddate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lrpduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lrpduo.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lrpduo.mutation.Priority(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := lrpduo.mutation.Date(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldDate, field.TypeTime, value)
	}
	if value, ok := lrpduo.mutation.StartTime(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := lrpduo.mutation.EndTime(); ok {
		_spec.SetField(lessonreservationpreferreddate.FieldEndTime, field.TypeTime, value)
	}
	if lrpduo.mutation.LessonReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservationpreferreddate.LessonReservationsTable,
			Columns: []string{lessonreservationpreferreddate.LessonReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lrpduo.mutation.LessonReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservationpreferreddate.LessonReservationsTable,
			Columns: []string{lessonreservationpreferreddate.LessonReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LessonReservationPreferredDate{config: lrpduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lrpduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lessonreservationpreferreddate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lrpduo.mutation.done = true
	return _node, nil
}
