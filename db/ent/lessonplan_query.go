// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/company"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/grade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplaneducationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplangrade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplansubject"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplanuploadfile"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/subject"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// LessonPlanQuery is the builder for querying LessonPlan entities.
type LessonPlanQuery struct {
	config
	ctx                               *QueryContext
	order                             []lessonplan.OrderOption
	inters                            []Interceptor
	predicates                        []predicate.LessonPlan
	withCompany                       *CompanyQuery
	withSchedules                     *LessonScheduleQuery
	withUploadFiles                   *UploadFileQuery
	withSubjects                      *SubjectQuery
	withGrades                        *GradeQuery
	withEducationCategories           *EducationCategoryQuery
	withLessonPlanUploadFiles         *LessonPlanUploadFileQuery
	withLessonPlanSubjects            *LessonPlanSubjectQuery
	withLessonPlanGrades              *LessonPlanGradeQuery
	withLessonPlanEducationCategories *LessonPlanEducationCategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LessonPlanQuery builder.
func (lpq *LessonPlanQuery) Where(ps ...predicate.LessonPlan) *LessonPlanQuery {
	lpq.predicates = append(lpq.predicates, ps...)
	return lpq
}

// Limit the number of records to be returned by this query.
func (lpq *LessonPlanQuery) Limit(limit int) *LessonPlanQuery {
	lpq.ctx.Limit = &limit
	return lpq
}

// Offset to start from.
func (lpq *LessonPlanQuery) Offset(offset int) *LessonPlanQuery {
	lpq.ctx.Offset = &offset
	return lpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lpq *LessonPlanQuery) Unique(unique bool) *LessonPlanQuery {
	lpq.ctx.Unique = &unique
	return lpq
}

// Order specifies how the records should be ordered.
func (lpq *LessonPlanQuery) Order(o ...lessonplan.OrderOption) *LessonPlanQuery {
	lpq.order = append(lpq.order, o...)
	return lpq
}

// QueryCompany chains the current query on the "company" edge.
func (lpq *LessonPlanQuery) QueryCompany() *CompanyQuery {
	query := (&CompanyClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lessonplan.CompanyTable, lessonplan.CompanyColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchedules chains the current query on the "schedules" edge.
func (lpq *LessonPlanQuery) QuerySchedules() *LessonScheduleQuery {
	query := (&LessonScheduleClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(lessonschedule.Table, lessonschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lessonplan.SchedulesTable, lessonplan.SchedulesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUploadFiles chains the current query on the "upload_files" edge.
func (lpq *LessonPlanQuery) QueryUploadFiles() *UploadFileQuery {
	query := (&UploadFileClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(uploadfile.Table, uploadfile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lessonplan.UploadFilesTable, lessonplan.UploadFilesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubjects chains the current query on the "subjects" edge.
func (lpq *LessonPlanQuery) QuerySubjects() *SubjectQuery {
	query := (&SubjectClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lessonplan.SubjectsTable, lessonplan.SubjectsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGrades chains the current query on the "grades" edge.
func (lpq *LessonPlanQuery) QueryGrades() *GradeQuery {
	query := (&GradeClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(grade.Table, grade.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lessonplan.GradesTable, lessonplan.GradesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEducationCategories chains the current query on the "education_categories" edge.
func (lpq *LessonPlanQuery) QueryEducationCategories() *EducationCategoryQuery {
	query := (&EducationCategoryClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(educationcategory.Table, educationcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lessonplan.EducationCategoriesTable, lessonplan.EducationCategoriesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLessonPlanUploadFiles chains the current query on the "lesson_plan_upload_files" edge.
func (lpq *LessonPlanQuery) QueryLessonPlanUploadFiles() *LessonPlanUploadFileQuery {
	query := (&LessonPlanUploadFileClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(lessonplanuploadfile.Table, lessonplanuploadfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, lessonplan.LessonPlanUploadFilesTable, lessonplan.LessonPlanUploadFilesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLessonPlanSubjects chains the current query on the "lesson_plan_subjects" edge.
func (lpq *LessonPlanQuery) QueryLessonPlanSubjects() *LessonPlanSubjectQuery {
	query := (&LessonPlanSubjectClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(lessonplansubject.Table, lessonplansubject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, lessonplan.LessonPlanSubjectsTable, lessonplan.LessonPlanSubjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLessonPlanGrades chains the current query on the "lesson_plan_grades" edge.
func (lpq *LessonPlanQuery) QueryLessonPlanGrades() *LessonPlanGradeQuery {
	query := (&LessonPlanGradeClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(lessonplangrade.Table, lessonplangrade.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, lessonplan.LessonPlanGradesTable, lessonplan.LessonPlanGradesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLessonPlanEducationCategories chains the current query on the "lesson_plan_education_categories" edge.
func (lpq *LessonPlanQuery) QueryLessonPlanEducationCategories() *LessonPlanEducationCategoryQuery {
	query := (&LessonPlanEducationCategoryClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplan.Table, lessonplan.FieldID, selector),
			sqlgraph.To(lessonplaneducationcategory.Table, lessonplaneducationcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, lessonplan.LessonPlanEducationCategoriesTable, lessonplan.LessonPlanEducationCategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LessonPlan entity from the query.
// Returns a *NotFoundError when no LessonPlan was found.
func (lpq *LessonPlanQuery) First(ctx context.Context) (*LessonPlan, error) {
	nodes, err := lpq.Limit(1).All(setContextOp(ctx, lpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lessonplan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lpq *LessonPlanQuery) FirstX(ctx context.Context) *LessonPlan {
	node, err := lpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LessonPlan ID from the query.
// Returns a *NotFoundError when no LessonPlan ID was found.
func (lpq *LessonPlanQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpq.Limit(1).IDs(setContextOp(ctx, lpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lessonplan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lpq *LessonPlanQuery) FirstIDX(ctx context.Context) int64 {
	id, err := lpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LessonPlan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LessonPlan entity is found.
// Returns a *NotFoundError when no LessonPlan entities are found.
func (lpq *LessonPlanQuery) Only(ctx context.Context) (*LessonPlan, error) {
	nodes, err := lpq.Limit(2).All(setContextOp(ctx, lpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lessonplan.Label}
	default:
		return nil, &NotSingularError{lessonplan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lpq *LessonPlanQuery) OnlyX(ctx context.Context) *LessonPlan {
	node, err := lpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LessonPlan ID in the query.
// Returns a *NotSingularError when more than one LessonPlan ID is found.
// Returns a *NotFoundError when no entities are found.
func (lpq *LessonPlanQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpq.Limit(2).IDs(setContextOp(ctx, lpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lessonplan.Label}
	default:
		err = &NotSingularError{lessonplan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lpq *LessonPlanQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := lpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LessonPlans.
func (lpq *LessonPlanQuery) All(ctx context.Context) ([]*LessonPlan, error) {
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryAll)
	if err := lpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LessonPlan, *LessonPlanQuery]()
	return withInterceptors[[]*LessonPlan](ctx, lpq, qr, lpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lpq *LessonPlanQuery) AllX(ctx context.Context) []*LessonPlan {
	nodes, err := lpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LessonPlan IDs.
func (lpq *LessonPlanQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if lpq.ctx.Unique == nil && lpq.path != nil {
		lpq.Unique(true)
	}
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryIDs)
	if err = lpq.Select(lessonplan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lpq *LessonPlanQuery) IDsX(ctx context.Context) []int64 {
	ids, err := lpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lpq *LessonPlanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryCount)
	if err := lpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lpq, querierCount[*LessonPlanQuery](), lpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lpq *LessonPlanQuery) CountX(ctx context.Context) int {
	count, err := lpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lpq *LessonPlanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryExist)
	switch _, err := lpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lpq *LessonPlanQuery) ExistX(ctx context.Context) bool {
	exist, err := lpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LessonPlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lpq *LessonPlanQuery) Clone() *LessonPlanQuery {
	if lpq == nil {
		return nil
	}
	return &LessonPlanQuery{
		config:                            lpq.config,
		ctx:                               lpq.ctx.Clone(),
		order:                             append([]lessonplan.OrderOption{}, lpq.order...),
		inters:                            append([]Interceptor{}, lpq.inters...),
		predicates:                        append([]predicate.LessonPlan{}, lpq.predicates...),
		withCompany:                       lpq.withCompany.Clone(),
		withSchedules:                     lpq.withSchedules.Clone(),
		withUploadFiles:                   lpq.withUploadFiles.Clone(),
		withSubjects:                      lpq.withSubjects.Clone(),
		withGrades:                        lpq.withGrades.Clone(),
		withEducationCategories:           lpq.withEducationCategories.Clone(),
		withLessonPlanUploadFiles:         lpq.withLessonPlanUploadFiles.Clone(),
		withLessonPlanSubjects:            lpq.withLessonPlanSubjects.Clone(),
		withLessonPlanGrades:              lpq.withLessonPlanGrades.Clone(),
		withLessonPlanEducationCategories: lpq.withLessonPlanEducationCategories.Clone(),
		// clone intermediate query.
		sql:  lpq.sql.Clone(),
		path: lpq.path,
	}
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithCompany(opts ...func(*CompanyQuery)) *LessonPlanQuery {
	query := (&CompanyClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withCompany = query
	return lpq
}

// WithSchedules tells the query-builder to eager-load the nodes that are connected to
// the "schedules" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithSchedules(opts ...func(*LessonScheduleQuery)) *LessonPlanQuery {
	query := (&LessonScheduleClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withSchedules = query
	return lpq
}

// WithUploadFiles tells the query-builder to eager-load the nodes that are connected to
// the "upload_files" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithUploadFiles(opts ...func(*UploadFileQuery)) *LessonPlanQuery {
	query := (&UploadFileClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withUploadFiles = query
	return lpq
}

// WithSubjects tells the query-builder to eager-load the nodes that are connected to
// the "subjects" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithSubjects(opts ...func(*SubjectQuery)) *LessonPlanQuery {
	query := (&SubjectClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withSubjects = query
	return lpq
}

// WithGrades tells the query-builder to eager-load the nodes that are connected to
// the "grades" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithGrades(opts ...func(*GradeQuery)) *LessonPlanQuery {
	query := (&GradeClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withGrades = query
	return lpq
}

// WithEducationCategories tells the query-builder to eager-load the nodes that are connected to
// the "education_categories" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithEducationCategories(opts ...func(*EducationCategoryQuery)) *LessonPlanQuery {
	query := (&EducationCategoryClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withEducationCategories = query
	return lpq
}

// WithLessonPlanUploadFiles tells the query-builder to eager-load the nodes that are connected to
// the "lesson_plan_upload_files" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithLessonPlanUploadFiles(opts ...func(*LessonPlanUploadFileQuery)) *LessonPlanQuery {
	query := (&LessonPlanUploadFileClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withLessonPlanUploadFiles = query
	return lpq
}

// WithLessonPlanSubjects tells the query-builder to eager-load the nodes that are connected to
// the "lesson_plan_subjects" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithLessonPlanSubjects(opts ...func(*LessonPlanSubjectQuery)) *LessonPlanQuery {
	query := (&LessonPlanSubjectClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withLessonPlanSubjects = query
	return lpq
}

// WithLessonPlanGrades tells the query-builder to eager-load the nodes that are connected to
// the "lesson_plan_grades" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithLessonPlanGrades(opts ...func(*LessonPlanGradeQuery)) *LessonPlanQuery {
	query := (&LessonPlanGradeClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withLessonPlanGrades = query
	return lpq
}

// WithLessonPlanEducationCategories tells the query-builder to eager-load the nodes that are connected to
// the "lesson_plan_education_categories" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LessonPlanQuery) WithLessonPlanEducationCategories(opts ...func(*LessonPlanEducationCategoryQuery)) *LessonPlanQuery {
	query := (&LessonPlanEducationCategoryClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withLessonPlanEducationCategories = query
	return lpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LessonPlan.Query().
//		GroupBy(lessonplan.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lpq *LessonPlanQuery) GroupBy(field string, fields ...string) *LessonPlanGroupBy {
	lpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LessonPlanGroupBy{build: lpq}
	grbuild.flds = &lpq.ctx.Fields
	grbuild.label = lessonplan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LessonPlan.Query().
//		Select(lessonplan.FieldCreatedAt).
//		Scan(ctx, &v)
func (lpq *LessonPlanQuery) Select(fields ...string) *LessonPlanSelect {
	lpq.ctx.Fields = append(lpq.ctx.Fields, fields...)
	sbuild := &LessonPlanSelect{LessonPlanQuery: lpq}
	sbuild.label = lessonplan.Label
	sbuild.flds, sbuild.scan = &lpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LessonPlanSelect configured with the given aggregations.
func (lpq *LessonPlanQuery) Aggregate(fns ...AggregateFunc) *LessonPlanSelect {
	return lpq.Select().Aggregate(fns...)
}

func (lpq *LessonPlanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lpq); err != nil {
				return err
			}
		}
	}
	for _, f := range lpq.ctx.Fields {
		if !lessonplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lpq.path != nil {
		prev, err := lpq.path(ctx)
		if err != nil {
			return err
		}
		lpq.sql = prev
	}
	return nil
}

func (lpq *LessonPlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LessonPlan, error) {
	var (
		nodes       = []*LessonPlan{}
		_spec       = lpq.querySpec()
		loadedTypes = [10]bool{
			lpq.withCompany != nil,
			lpq.withSchedules != nil,
			lpq.withUploadFiles != nil,
			lpq.withSubjects != nil,
			lpq.withGrades != nil,
			lpq.withEducationCategories != nil,
			lpq.withLessonPlanUploadFiles != nil,
			lpq.withLessonPlanSubjects != nil,
			lpq.withLessonPlanGrades != nil,
			lpq.withLessonPlanEducationCategories != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LessonPlan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LessonPlan{config: lpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lpq.withCompany; query != nil {
		if err := lpq.loadCompany(ctx, query, nodes, nil,
			func(n *LessonPlan, e *Company) { n.Edges.Company = e }); err != nil {
			return nil, err
		}
	}
	if query := lpq.withSchedules; query != nil {
		if err := lpq.loadSchedules(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.Schedules = []*LessonSchedule{} },
			func(n *LessonPlan, e *LessonSchedule) { n.Edges.Schedules = append(n.Edges.Schedules, e) }); err != nil {
			return nil, err
		}
	}
	if query := lpq.withUploadFiles; query != nil {
		if err := lpq.loadUploadFiles(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.UploadFiles = []*UploadFile{} },
			func(n *LessonPlan, e *UploadFile) { n.Edges.UploadFiles = append(n.Edges.UploadFiles, e) }); err != nil {
			return nil, err
		}
	}
	if query := lpq.withSubjects; query != nil {
		if err := lpq.loadSubjects(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.Subjects = []*Subject{} },
			func(n *LessonPlan, e *Subject) { n.Edges.Subjects = append(n.Edges.Subjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := lpq.withGrades; query != nil {
		if err := lpq.loadGrades(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.Grades = []*Grade{} },
			func(n *LessonPlan, e *Grade) { n.Edges.Grades = append(n.Edges.Grades, e) }); err != nil {
			return nil, err
		}
	}
	if query := lpq.withEducationCategories; query != nil {
		if err := lpq.loadEducationCategories(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.EducationCategories = []*EducationCategory{} },
			func(n *LessonPlan, e *EducationCategory) {
				n.Edges.EducationCategories = append(n.Edges.EducationCategories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := lpq.withLessonPlanUploadFiles; query != nil {
		if err := lpq.loadLessonPlanUploadFiles(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.LessonPlanUploadFiles = []*LessonPlanUploadFile{} },
			func(n *LessonPlan, e *LessonPlanUploadFile) {
				n.Edges.LessonPlanUploadFiles = append(n.Edges.LessonPlanUploadFiles, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := lpq.withLessonPlanSubjects; query != nil {
		if err := lpq.loadLessonPlanSubjects(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.LessonPlanSubjects = []*LessonPlanSubject{} },
			func(n *LessonPlan, e *LessonPlanSubject) {
				n.Edges.LessonPlanSubjects = append(n.Edges.LessonPlanSubjects, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := lpq.withLessonPlanGrades; query != nil {
		if err := lpq.loadLessonPlanGrades(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.LessonPlanGrades = []*LessonPlanGrade{} },
			func(n *LessonPlan, e *LessonPlanGrade) {
				n.Edges.LessonPlanGrades = append(n.Edges.LessonPlanGrades, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := lpq.withLessonPlanEducationCategories; query != nil {
		if err := lpq.loadLessonPlanEducationCategories(ctx, query, nodes,
			func(n *LessonPlan) { n.Edges.LessonPlanEducationCategories = []*LessonPlanEducationCategory{} },
			func(n *LessonPlan, e *LessonPlanEducationCategory) {
				n.Edges.LessonPlanEducationCategories = append(n.Edges.LessonPlanEducationCategories, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lpq *LessonPlanQuery) loadCompany(ctx context.Context, query *CompanyQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *Company)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonPlan)
	for i := range nodes {
		fk := nodes[i].CompanyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(company.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "company_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpq *LessonPlanQuery) loadSchedules(ctx context.Context, query *LessonScheduleQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *LessonSchedule)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LessonPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lessonschedule.FieldLessonPlanID)
	}
	query.Where(predicate.LessonSchedule(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lessonplan.SchedulesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LessonPlanID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lesson_plan_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lpq *LessonPlanQuery) loadUploadFiles(ctx context.Context, query *UploadFileQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *UploadFile)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int64]*LessonPlan)
	nids := make(map[int64]map[*LessonPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(lessonplan.UploadFilesTable)
		s.Join(joinT).On(s.C(uploadfile.FieldID), joinT.C(lessonplan.UploadFilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(lessonplan.UploadFilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(lessonplan.UploadFilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullInt64).Int64
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*LessonPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*UploadFile](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "upload_files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (lpq *LessonPlanQuery) loadSubjects(ctx context.Context, query *SubjectQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *Subject)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int64]*LessonPlan)
	nids := make(map[int64]map[*LessonPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(lessonplan.SubjectsTable)
		s.Join(joinT).On(s.C(subject.FieldID), joinT.C(lessonplan.SubjectsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(lessonplan.SubjectsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(lessonplan.SubjectsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullInt64).Int64
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*LessonPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subject](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subjects" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (lpq *LessonPlanQuery) loadGrades(ctx context.Context, query *GradeQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *Grade)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int64]*LessonPlan)
	nids := make(map[int64]map[*LessonPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(lessonplan.GradesTable)
		s.Join(joinT).On(s.C(grade.FieldID), joinT.C(lessonplan.GradesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(lessonplan.GradesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(lessonplan.GradesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullInt64).Int64
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*LessonPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Grade](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "grades" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (lpq *LessonPlanQuery) loadEducationCategories(ctx context.Context, query *EducationCategoryQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *EducationCategory)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int64]*LessonPlan)
	nids := make(map[int64]map[*LessonPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(lessonplan.EducationCategoriesTable)
		s.Join(joinT).On(s.C(educationcategory.FieldID), joinT.C(lessonplan.EducationCategoriesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(lessonplan.EducationCategoriesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(lessonplan.EducationCategoriesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullInt64).Int64
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*LessonPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*EducationCategory](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "education_categories" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (lpq *LessonPlanQuery) loadLessonPlanUploadFiles(ctx context.Context, query *LessonPlanUploadFileQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *LessonPlanUploadFile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LessonPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lessonplanuploadfile.FieldLessonPlanID)
	}
	query.Where(predicate.LessonPlanUploadFile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lessonplan.LessonPlanUploadFilesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LessonPlanID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lesson_plan_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lpq *LessonPlanQuery) loadLessonPlanSubjects(ctx context.Context, query *LessonPlanSubjectQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *LessonPlanSubject)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LessonPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lessonplansubject.FieldLessonPlanID)
	}
	query.Where(predicate.LessonPlanSubject(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lessonplan.LessonPlanSubjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LessonPlanID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lesson_plan_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lpq *LessonPlanQuery) loadLessonPlanGrades(ctx context.Context, query *LessonPlanGradeQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *LessonPlanGrade)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LessonPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lessonplangrade.FieldLessonPlanID)
	}
	query.Where(predicate.LessonPlanGrade(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lessonplan.LessonPlanGradesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LessonPlanID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lesson_plan_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lpq *LessonPlanQuery) loadLessonPlanEducationCategories(ctx context.Context, query *LessonPlanEducationCategoryQuery, nodes []*LessonPlan, init func(*LessonPlan), assign func(*LessonPlan, *LessonPlanEducationCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LessonPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lessonplaneducationcategory.FieldLessonPlanID)
	}
	query.Where(predicate.LessonPlanEducationCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lessonplan.LessonPlanEducationCategoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LessonPlanID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lesson_plan_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lpq *LessonPlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lpq.querySpec()
	_spec.Node.Columns = lpq.ctx.Fields
	if len(lpq.ctx.Fields) > 0 {
		_spec.Unique = lpq.ctx.Unique != nil && *lpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lpq.driver, _spec)
}

func (lpq *LessonPlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lessonplan.Table, lessonplan.Columns, sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64))
	_spec.From = lpq.sql
	if unique := lpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lpq.path != nil {
		_spec.Unique = true
	}
	if fields := lpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonplan.FieldID)
		for i := range fields {
			if fields[i] != lessonplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lpq.withCompany != nil {
			_spec.Node.AddColumnOnce(lessonplan.FieldCompanyID)
		}
	}
	if ps := lpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lpq *LessonPlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lpq.driver.Dialect())
	t1 := builder.Table(lessonplan.Table)
	columns := lpq.ctx.Fields
	if len(columns) == 0 {
		columns = lessonplan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lpq.sql != nil {
		selector = lpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lpq.ctx.Unique != nil && *lpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lpq.predicates {
		p(selector)
	}
	for _, p := range lpq.order {
		p(selector)
	}
	if offset := lpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LessonPlanGroupBy is the group-by builder for LessonPlan entities.
type LessonPlanGroupBy struct {
	selector
	build *LessonPlanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lpgb *LessonPlanGroupBy) Aggregate(fns ...AggregateFunc) *LessonPlanGroupBy {
	lpgb.fns = append(lpgb.fns, fns...)
	return lpgb
}

// Scan applies the selector query and scans the result into the given value.
func (lpgb *LessonPlanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpgb.build.ctx, ent.OpQueryGroupBy)
	if err := lpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonPlanQuery, *LessonPlanGroupBy](ctx, lpgb.build, lpgb, lpgb.build.inters, v)
}

func (lpgb *LessonPlanGroupBy) sqlScan(ctx context.Context, root *LessonPlanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lpgb.fns))
	for _, fn := range lpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lpgb.flds)+len(lpgb.fns))
		for _, f := range *lpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LessonPlanSelect is the builder for selecting fields of LessonPlan entities.
type LessonPlanSelect struct {
	*LessonPlanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lps *LessonPlanSelect) Aggregate(fns ...AggregateFunc) *LessonPlanSelect {
	lps.fns = append(lps.fns, fns...)
	return lps
}

// Scan applies the selector query and scans the result into the given value.
func (lps *LessonPlanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lps.ctx, ent.OpQuerySelect)
	if err := lps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonPlanQuery, *LessonPlanSelect](ctx, lps.LessonPlanQuery, lps, lps.inters, v)
}

func (lps *LessonPlanSelect) sqlScan(ctx context.Context, root *LessonPlanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lps.fns))
	for _, fn := range lps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
