// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonconfirmation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
)

// LessonConfirmationCreate is the builder for creating a LessonConfirmation entity.
type LessonConfirmationCreate struct {
	config
	mutation *LessonConfirmationMutation
	hooks    []Hook
}

// SetLessonReservationID sets the "lesson_reservation_id" field.
func (lcc *LessonConfirmationCreate) SetLessonReservationID(i int) *LessonConfirmationCreate {
	lcc.mutation.SetLessonReservationID(i)
	return lcc
}

// SetMatchingDate sets the "matching_date" field.
func (lcc *LessonConfirmationCreate) SetMatchingDate(t time.Time) *LessonConfirmationCreate {
	lcc.mutation.SetMatchingDate(t)
	return lcc
}

// SetStartTime sets the "start_time" field.
func (lcc *LessonConfirmationCreate) SetStartTime(t time.Time) *LessonConfirmationCreate {
	lcc.mutation.SetStartTime(t)
	return lcc
}

// SetFinishTime sets the "finish_time" field.
func (lcc *LessonConfirmationCreate) SetFinishTime(t time.Time) *LessonConfirmationCreate {
	lcc.mutation.SetFinishTime(t)
	return lcc
}

// SetRemarks sets the "remarks" field.
func (lcc *LessonConfirmationCreate) SetRemarks(s string) *LessonConfirmationCreate {
	lcc.mutation.SetRemarks(s)
	return lcc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lcc *LessonConfirmationCreate) SetNillableRemarks(s *string) *LessonConfirmationCreate {
	if s != nil {
		lcc.SetRemarks(*s)
	}
	return lcc
}

// SetLessonReservation sets the "lesson_reservation" edge to the LessonReservation entity.
func (lcc *LessonConfirmationCreate) SetLessonReservation(l *LessonReservation) *LessonConfirmationCreate {
	return lcc.SetLessonReservationID(l.ID)
}

// Mutation returns the LessonConfirmationMutation object of the builder.
func (lcc *LessonConfirmationCreate) Mutation() *LessonConfirmationMutation {
	return lcc.mutation
}

// Save creates the LessonConfirmation in the database.
func (lcc *LessonConfirmationCreate) Save(ctx context.Context) (*LessonConfirmation, error) {
	return withHooks(ctx, lcc.sqlSave, lcc.mutation, lcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LessonConfirmationCreate) SaveX(ctx context.Context) *LessonConfirmation {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcc *LessonConfirmationCreate) Exec(ctx context.Context) error {
	_, err := lcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcc *LessonConfirmationCreate) ExecX(ctx context.Context) {
	if err := lcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LessonConfirmationCreate) check() error {
	if _, ok := lcc.mutation.LessonReservationID(); !ok {
		return &ValidationError{Name: "lesson_reservation_id", err: errors.New(`ent: missing required field "LessonConfirmation.lesson_reservation_id"`)}
	}
	if v, ok := lcc.mutation.LessonReservationID(); ok {
		if err := lessonconfirmation.LessonReservationIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_reservation_id", err: fmt.Errorf(`ent: validator failed for field "LessonConfirmation.lesson_reservation_id": %w`, err)}
		}
	}
	if _, ok := lcc.mutation.MatchingDate(); !ok {
		return &ValidationError{Name: "matching_date", err: errors.New(`ent: missing required field "LessonConfirmation.matching_date"`)}
	}
	if _, ok := lcc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "LessonConfirmation.start_time"`)}
	}
	if _, ok := lcc.mutation.FinishTime(); !ok {
		return &ValidationError{Name: "finish_time", err: errors.New(`ent: missing required field "LessonConfirmation.finish_time"`)}
	}
	if len(lcc.mutation.LessonReservationIDs()) == 0 {
		return &ValidationError{Name: "lesson_reservation", err: errors.New(`ent: missing required edge "LessonConfirmation.lesson_reservation"`)}
	}
	return nil
}

func (lcc *LessonConfirmationCreate) sqlSave(ctx context.Context) (*LessonConfirmation, error) {
	if err := lcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lcc.mutation.id = &_node.ID
	lcc.mutation.done = true
	return _node, nil
}

func (lcc *LessonConfirmationCreate) createSpec() (*LessonConfirmation, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonConfirmation{config: lcc.config}
		_spec = sqlgraph.NewCreateSpec(lessonconfirmation.Table, sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt))
	)
	if value, ok := lcc.mutation.MatchingDate(); ok {
		_spec.SetField(lessonconfirmation.FieldMatchingDate, field.TypeTime, value)
		_node.MatchingDate = value
	}
	if value, ok := lcc.mutation.StartTime(); ok {
		_spec.SetField(lessonconfirmation.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := lcc.mutation.FinishTime(); ok {
		_spec.SetField(lessonconfirmation.FieldFinishTime, field.TypeTime, value)
		_node.FinishTime = value
	}
	if value, ok := lcc.mutation.Remarks(); ok {
		_spec.SetField(lessonconfirmation.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if nodes := lcc.mutation.LessonReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonconfirmation.LessonReservationTable,
			Columns: []string{lessonconfirmation.LessonReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonReservationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonConfirmationCreateBulk is the builder for creating many LessonConfirmation entities in bulk.
type LessonConfirmationCreateBulk struct {
	config
	err      error
	builders []*LessonConfirmationCreate
}

// Save creates the LessonConfirmation entities in the database.
func (lccb *LessonConfirmationCreateBulk) Save(ctx context.Context) ([]*LessonConfirmation, error) {
	if lccb.err != nil {
		return nil, lccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LessonConfirmation, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonConfirmationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LessonConfirmationCreateBulk) SaveX(ctx context.Context) []*LessonConfirmation {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lccb *LessonConfirmationCreateBulk) Exec(ctx context.Context) error {
	_, err := lccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lccb *LessonConfirmationCreateBulk) ExecX(ctx context.Context) {
	if err := lccb.Exec(ctx); err != nil {
		panic(err)
	}
}
