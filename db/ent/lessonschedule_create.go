// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/grade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/subject"
)

// LessonScheduleCreate is the builder for creating a LessonSchedule entity.
type LessonScheduleCreate struct {
	config
	mutation *LessonScheduleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lsc *LessonScheduleCreate) SetCreatedAt(t time.Time) *LessonScheduleCreate {
	lsc.mutation.SetCreatedAt(t)
	return lsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lsc *LessonScheduleCreate) SetNillableCreatedAt(t *time.Time) *LessonScheduleCreate {
	if t != nil {
		lsc.SetCreatedAt(*t)
	}
	return lsc
}

// SetUpdatedAt sets the "updated_at" field.
func (lsc *LessonScheduleCreate) SetUpdatedAt(t time.Time) *LessonScheduleCreate {
	lsc.mutation.SetUpdatedAt(t)
	return lsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lsc *LessonScheduleCreate) SetNillableUpdatedAt(t *time.Time) *LessonScheduleCreate {
	if t != nil {
		lsc.SetUpdatedAt(*t)
	}
	return lsc
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lsc *LessonScheduleCreate) SetLessonPlanID(i int) *LessonScheduleCreate {
	lsc.mutation.SetLessonPlanID(i)
	return lsc
}

// SetTitle sets the "title" field.
func (lsc *LessonScheduleCreate) SetTitle(s string) *LessonScheduleCreate {
	lsc.mutation.SetTitle(s)
	return lsc
}

// SetDescription sets the "description" field.
func (lsc *LessonScheduleCreate) SetDescription(s string) *LessonScheduleCreate {
	lsc.mutation.SetDescription(s)
	return lsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lsc *LessonScheduleCreate) SetNillableDescription(s *string) *LessonScheduleCreate {
	if s != nil {
		lsc.SetDescription(*s)
	}
	return lsc
}

// SetLocation sets the "location" field.
func (lsc *LessonScheduleCreate) SetLocation(s string) *LessonScheduleCreate {
	lsc.mutation.SetLocation(s)
	return lsc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (lsc *LessonScheduleCreate) SetNillableLocation(s *string) *LessonScheduleCreate {
	if s != nil {
		lsc.SetLocation(*s)
	}
	return lsc
}

// SetLessonType sets the "lesson_type" field.
func (lsc *LessonScheduleCreate) SetLessonType(lt lessonschedule.LessonType) *LessonScheduleCreate {
	lsc.mutation.SetLessonType(lt)
	return lsc
}

// SetAnnualMaxExecutions sets the "annual_max_executions" field.
func (lsc *LessonScheduleCreate) SetAnnualMaxExecutions(i int) *LessonScheduleCreate {
	lsc.mutation.SetAnnualMaxExecutions(i)
	return lsc
}

// SetStartDate sets the "start_date" field.
func (lsc *LessonScheduleCreate) SetStartDate(t time.Time) *LessonScheduleCreate {
	lsc.mutation.SetStartDate(t)
	return lsc
}

// SetEndDate sets the "end_date" field.
func (lsc *LessonScheduleCreate) SetEndDate(t time.Time) *LessonScheduleCreate {
	lsc.mutation.SetEndDate(t)
	return lsc
}

// SetStartTime sets the "start_time" field.
func (lsc *LessonScheduleCreate) SetStartTime(t time.Time) *LessonScheduleCreate {
	lsc.mutation.SetStartTime(t)
	return lsc
}

// SetEndTime sets the "end_time" field.
func (lsc *LessonScheduleCreate) SetEndTime(t time.Time) *LessonScheduleCreate {
	lsc.mutation.SetEndTime(t)
	return lsc
}

// SetPlanID sets the "plan" edge to the LessonPlan entity by ID.
func (lsc *LessonScheduleCreate) SetPlanID(id int) *LessonScheduleCreate {
	lsc.mutation.SetPlanID(id)
	return lsc
}

// SetPlan sets the "plan" edge to the LessonPlan entity.
func (lsc *LessonScheduleCreate) SetPlan(l *LessonPlan) *LessonScheduleCreate {
	return lsc.SetPlanID(l.ID)
}

// AddGradeIDs adds the "grades" edge to the Grade entity by IDs.
func (lsc *LessonScheduleCreate) AddGradeIDs(ids ...int) *LessonScheduleCreate {
	lsc.mutation.AddGradeIDs(ids...)
	return lsc
}

// AddGrades adds the "grades" edges to the Grade entity.
func (lsc *LessonScheduleCreate) AddGrades(g ...*Grade) *LessonScheduleCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return lsc.AddGradeIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (lsc *LessonScheduleCreate) AddSubjectIDs(ids ...int) *LessonScheduleCreate {
	lsc.mutation.AddSubjectIDs(ids...)
	return lsc
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (lsc *LessonScheduleCreate) AddSubjects(s ...*Subject) *LessonScheduleCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lsc.AddSubjectIDs(ids...)
}

// AddEducationCategoryIDs adds the "education_categories" edge to the EducationCategory entity by IDs.
func (lsc *LessonScheduleCreate) AddEducationCategoryIDs(ids ...int) *LessonScheduleCreate {
	lsc.mutation.AddEducationCategoryIDs(ids...)
	return lsc
}

// AddEducationCategories adds the "education_categories" edges to the EducationCategory entity.
func (lsc *LessonScheduleCreate) AddEducationCategories(e ...*EducationCategory) *LessonScheduleCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lsc.AddEducationCategoryIDs(ids...)
}

// AddLessonReservationIDs adds the "lesson_reservations" edge to the LessonReservation entity by IDs.
func (lsc *LessonScheduleCreate) AddLessonReservationIDs(ids ...int) *LessonScheduleCreate {
	lsc.mutation.AddLessonReservationIDs(ids...)
	return lsc
}

// AddLessonReservations adds the "lesson_reservations" edges to the LessonReservation entity.
func (lsc *LessonScheduleCreate) AddLessonReservations(l ...*LessonReservation) *LessonScheduleCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lsc.AddLessonReservationIDs(ids...)
}

// Mutation returns the LessonScheduleMutation object of the builder.
func (lsc *LessonScheduleCreate) Mutation() *LessonScheduleMutation {
	return lsc.mutation
}

// Save creates the LessonSchedule in the database.
func (lsc *LessonScheduleCreate) Save(ctx context.Context) (*LessonSchedule, error) {
	lsc.defaults()
	return withHooks(ctx, lsc.sqlSave, lsc.mutation, lsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LessonScheduleCreate) SaveX(ctx context.Context) *LessonSchedule {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LessonScheduleCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LessonScheduleCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsc *LessonScheduleCreate) defaults() {
	if _, ok := lsc.mutation.CreatedAt(); !ok {
		v := lessonschedule.DefaultCreatedAt()
		lsc.mutation.SetCreatedAt(v)
	}
	if _, ok := lsc.mutation.UpdatedAt(); !ok {
		v := lessonschedule.DefaultUpdatedAt()
		lsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LessonScheduleCreate) check() error {
	if _, ok := lsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonSchedule.created_at"`)}
	}
	if _, ok := lsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonSchedule.updated_at"`)}
	}
	if _, ok := lsc.mutation.LessonPlanID(); !ok {
		return &ValidationError{Name: "lesson_plan_id", err: errors.New(`ent: missing required field "LessonSchedule.lesson_plan_id"`)}
	}
	if v, ok := lsc.mutation.LessonPlanID(); ok {
		if err := lessonschedule.LessonPlanIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_plan_id", err: fmt.Errorf(`ent: validator failed for field "LessonSchedule.lesson_plan_id": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "LessonSchedule.title"`)}
	}
	if v, ok := lsc.mutation.Title(); ok {
		if err := lessonschedule.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "LessonSchedule.title": %w`, err)}
		}
	}
	if v, ok := lsc.mutation.Description(); ok {
		if err := lessonschedule.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "LessonSchedule.description": %w`, err)}
		}
	}
	if v, ok := lsc.mutation.Location(); ok {
		if err := lessonschedule.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "LessonSchedule.location": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.LessonType(); !ok {
		return &ValidationError{Name: "lesson_type", err: errors.New(`ent: missing required field "LessonSchedule.lesson_type"`)}
	}
	if v, ok := lsc.mutation.LessonType(); ok {
		if err := lessonschedule.LessonTypeValidator(v); err != nil {
			return &ValidationError{Name: "lesson_type", err: fmt.Errorf(`ent: validator failed for field "LessonSchedule.lesson_type": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.AnnualMaxExecutions(); !ok {
		return &ValidationError{Name: "annual_max_executions", err: errors.New(`ent: missing required field "LessonSchedule.annual_max_executions"`)}
	}
	if v, ok := lsc.mutation.AnnualMaxExecutions(); ok {
		if err := lessonschedule.AnnualMaxExecutionsValidator(v); err != nil {
			return &ValidationError{Name: "annual_max_executions", err: fmt.Errorf(`ent: validator failed for field "LessonSchedule.annual_max_executions": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "LessonSchedule.start_date"`)}
	}
	if _, ok := lsc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "LessonSchedule.end_date"`)}
	}
	if _, ok := lsc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "LessonSchedule.start_time"`)}
	}
	if _, ok := lsc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "LessonSchedule.end_time"`)}
	}
	if len(lsc.mutation.PlanIDs()) == 0 {
		return &ValidationError{Name: "plan", err: errors.New(`ent: missing required edge "LessonSchedule.plan"`)}
	}
	return nil
}

func (lsc *LessonScheduleCreate) sqlSave(ctx context.Context) (*LessonSchedule, error) {
	if err := lsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lsc.mutation.id = &_node.ID
	lsc.mutation.done = true
	return _node, nil
}

func (lsc *LessonScheduleCreate) createSpec() (*LessonSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonSchedule{config: lsc.config}
		_spec = sqlgraph.NewCreateSpec(lessonschedule.Table, sqlgraph.NewFieldSpec(lessonschedule.FieldID, field.TypeInt))
	)
	if value, ok := lsc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonschedule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lsc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonschedule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lsc.mutation.Title(); ok {
		_spec.SetField(lessonschedule.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := lsc.mutation.Description(); ok {
		_spec.SetField(lessonschedule.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lsc.mutation.Location(); ok {
		_spec.SetField(lessonschedule.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := lsc.mutation.LessonType(); ok {
		_spec.SetField(lessonschedule.FieldLessonType, field.TypeEnum, value)
		_node.LessonType = value
	}
	if value, ok := lsc.mutation.AnnualMaxExecutions(); ok {
		_spec.SetField(lessonschedule.FieldAnnualMaxExecutions, field.TypeInt, value)
		_node.AnnualMaxExecutions = value
	}
	if value, ok := lsc.mutation.StartDate(); ok {
		_spec.SetField(lessonschedule.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := lsc.mutation.EndDate(); ok {
		_spec.SetField(lessonschedule.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := lsc.mutation.StartTime(); ok {
		_spec.SetField(lessonschedule.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := lsc.mutation.EndTime(); ok {
		_spec.SetField(lessonschedule.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := lsc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonschedule.PlanTable,
			Columns: []string{lessonschedule.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonPlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lsc.mutation.GradesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonschedule.GradesTable,
			Columns: []string{lessonschedule.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grade.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lsc.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonschedule.SubjectsTable,
			Columns: []string{lessonschedule.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lsc.mutation.EducationCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonschedule.EducationCategoriesTable,
			Columns: []string{lessonschedule.EducationCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lsc.mutation.LessonReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonschedule.LessonReservationsTable,
			Columns: []string{lessonschedule.LessonReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonScheduleCreateBulk is the builder for creating many LessonSchedule entities in bulk.
type LessonScheduleCreateBulk struct {
	config
	err      error
	builders []*LessonScheduleCreate
}

// Save creates the LessonSchedule entities in the database.
func (lscb *LessonScheduleCreateBulk) Save(ctx context.Context) ([]*LessonSchedule, error) {
	if lscb.err != nil {
		return nil, lscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LessonSchedule, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LessonScheduleCreateBulk) SaveX(ctx context.Context) []*LessonSchedule {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LessonScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LessonScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}
