// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonconfirmation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// LessonReservationCreate is the builder for creating a LessonReservation entity.
type LessonReservationCreate struct {
	config
	mutation *LessonReservationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lrc *LessonReservationCreate) SetCreatedAt(t time.Time) *LessonReservationCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrc *LessonReservationCreate) SetNillableCreatedAt(t *time.Time) *LessonReservationCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lrc *LessonReservationCreate) SetUpdatedAt(t time.Time) *LessonReservationCreate {
	lrc.mutation.SetUpdatedAt(t)
	return lrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lrc *LessonReservationCreate) SetNillableUpdatedAt(t *time.Time) *LessonReservationCreate {
	if t != nil {
		lrc.SetUpdatedAt(*t)
	}
	return lrc
}

// SetLessonScheduleID sets the "lesson_schedule_id" field.
func (lrc *LessonReservationCreate) SetLessonScheduleID(i int64) *LessonReservationCreate {
	lrc.mutation.SetLessonScheduleID(i)
	return lrc
}

// SetSchoolID sets the "school_id" field.
func (lrc *LessonReservationCreate) SetSchoolID(i int64) *LessonReservationCreate {
	lrc.mutation.SetSchoolID(i)
	return lrc
}

// SetUserID sets the "user_id" field.
func (lrc *LessonReservationCreate) SetUserID(i int64) *LessonReservationCreate {
	lrc.mutation.SetUserID(i)
	return lrc
}

// SetReservationStatus sets the "reservation_status" field.
func (lrc *LessonReservationCreate) SetReservationStatus(ls lessonreservation.ReservationStatus) *LessonReservationCreate {
	lrc.mutation.SetReservationStatus(ls)
	return lrc
}

// SetCountStudent sets the "count_student" field.
func (lrc *LessonReservationCreate) SetCountStudent(s string) *LessonReservationCreate {
	lrc.mutation.SetCountStudent(s)
	return lrc
}

// SetGraduate sets the "graduate" field.
func (lrc *LessonReservationCreate) SetGraduate(s string) *LessonReservationCreate {
	lrc.mutation.SetGraduate(s)
	return lrc
}

// SetSubject sets the "subject" field.
func (lrc *LessonReservationCreate) SetSubject(s string) *LessonReservationCreate {
	lrc.mutation.SetSubject(s)
	return lrc
}

// SetRemarks sets the "remarks" field.
func (lrc *LessonReservationCreate) SetRemarks(s string) *LessonReservationCreate {
	lrc.mutation.SetRemarks(s)
	return lrc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lrc *LessonReservationCreate) SetNillableRemarks(s *string) *LessonReservationCreate {
	if s != nil {
		lrc.SetRemarks(*s)
	}
	return lrc
}

// SetReservationConfirmAt sets the "reservation_confirm_at" field.
func (lrc *LessonReservationCreate) SetReservationConfirmAt(t time.Time) *LessonReservationCreate {
	lrc.mutation.SetReservationConfirmAt(t)
	return lrc
}

// SetNillableReservationConfirmAt sets the "reservation_confirm_at" field if the given value is not nil.
func (lrc *LessonReservationCreate) SetNillableReservationConfirmAt(t *time.Time) *LessonReservationCreate {
	if t != nil {
		lrc.SetReservationConfirmAt(*t)
	}
	return lrc
}

// SetID sets the "id" field.
func (lrc *LessonReservationCreate) SetID(i int64) *LessonReservationCreate {
	lrc.mutation.SetID(i)
	return lrc
}

// SetLessonSchedule sets the "lesson_schedule" edge to the LessonSchedule entity.
func (lrc *LessonReservationCreate) SetLessonSchedule(l *LessonSchedule) *LessonReservationCreate {
	return lrc.SetLessonScheduleID(l.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (lrc *LessonReservationCreate) SetSchool(s *School) *LessonReservationCreate {
	return lrc.SetSchoolID(s.ID)
}

// SetUser sets the "user" edge to the User entity.
func (lrc *LessonReservationCreate) SetUser(u *User) *LessonReservationCreate {
	return lrc.SetUserID(u.ID)
}

// AddLessonReservationPreferredDateIDs adds the "lesson_reservation_preferred_dates" edge to the LessonReservationPreferredDate entity by IDs.
func (lrc *LessonReservationCreate) AddLessonReservationPreferredDateIDs(ids ...int64) *LessonReservationCreate {
	lrc.mutation.AddLessonReservationPreferredDateIDs(ids...)
	return lrc
}

// AddLessonReservationPreferredDates adds the "lesson_reservation_preferred_dates" edges to the LessonReservationPreferredDate entity.
func (lrc *LessonReservationCreate) AddLessonReservationPreferredDates(l ...*LessonReservationPreferredDate) *LessonReservationCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lrc.AddLessonReservationPreferredDateIDs(ids...)
}

// AddLessonConfirmationIDs adds the "lesson_confirmation" edge to the LessonConfirmation entity by IDs.
func (lrc *LessonReservationCreate) AddLessonConfirmationIDs(ids ...int64) *LessonReservationCreate {
	lrc.mutation.AddLessonConfirmationIDs(ids...)
	return lrc
}

// AddLessonConfirmation adds the "lesson_confirmation" edges to the LessonConfirmation entity.
func (lrc *LessonReservationCreate) AddLessonConfirmation(l ...*LessonConfirmation) *LessonReservationCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lrc.AddLessonConfirmationIDs(ids...)
}

// Mutation returns the LessonReservationMutation object of the builder.
func (lrc *LessonReservationCreate) Mutation() *LessonReservationMutation {
	return lrc.mutation
}

// Save creates the LessonReservation in the database.
func (lrc *LessonReservationCreate) Save(ctx context.Context) (*LessonReservation, error) {
	lrc.defaults()
	return withHooks(ctx, lrc.sqlSave, lrc.mutation, lrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LessonReservationCreate) SaveX(ctx context.Context) *LessonReservation {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LessonReservationCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LessonReservationCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LessonReservationCreate) defaults() {
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := lessonreservation.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		v := lessonreservation.DefaultUpdatedAt()
		lrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LessonReservationCreate) check() error {
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonReservation.created_at"`)}
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonReservation.updated_at"`)}
	}
	if _, ok := lrc.mutation.LessonScheduleID(); !ok {
		return &ValidationError{Name: "lesson_schedule_id", err: errors.New(`ent: missing required field "LessonReservation.lesson_schedule_id"`)}
	}
	if v, ok := lrc.mutation.LessonScheduleID(); ok {
		if err := lessonreservation.LessonScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_schedule_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.lesson_schedule_id": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.SchoolID(); !ok {
		return &ValidationError{Name: "school_id", err: errors.New(`ent: missing required field "LessonReservation.school_id"`)}
	}
	if v, ok := lrc.mutation.SchoolID(); ok {
		if err := lessonreservation.SchoolIDValidator(v); err != nil {
			return &ValidationError{Name: "school_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.school_id": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LessonReservation.user_id"`)}
	}
	if v, ok := lrc.mutation.UserID(); ok {
		if err := lessonreservation.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.user_id": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.ReservationStatus(); !ok {
		return &ValidationError{Name: "reservation_status", err: errors.New(`ent: missing required field "LessonReservation.reservation_status"`)}
	}
	if v, ok := lrc.mutation.ReservationStatus(); ok {
		if err := lessonreservation.ReservationStatusValidator(v); err != nil {
			return &ValidationError{Name: "reservation_status", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.reservation_status": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.CountStudent(); !ok {
		return &ValidationError{Name: "count_student", err: errors.New(`ent: missing required field "LessonReservation.count_student"`)}
	}
	if _, ok := lrc.mutation.Graduate(); !ok {
		return &ValidationError{Name: "graduate", err: errors.New(`ent: missing required field "LessonReservation.graduate"`)}
	}
	if _, ok := lrc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "LessonReservation.subject"`)}
	}
	if v, ok := lrc.mutation.ID(); ok {
		if err := lessonreservation.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LessonReservation.id": %w`, err)}
		}
	}
	if len(lrc.mutation.LessonScheduleIDs()) == 0 {
		return &ValidationError{Name: "lesson_schedule", err: errors.New(`ent: missing required edge "LessonReservation.lesson_schedule"`)}
	}
	if len(lrc.mutation.SchoolIDs()) == 0 {
		return &ValidationError{Name: "school", err: errors.New(`ent: missing required edge "LessonReservation.school"`)}
	}
	if len(lrc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "LessonReservation.user"`)}
	}
	return nil
}

func (lrc *LessonReservationCreate) sqlSave(ctx context.Context) (*LessonReservation, error) {
	if err := lrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lrc.mutation.id = &_node.ID
	lrc.mutation.done = true
	return _node, nil
}

func (lrc *LessonReservationCreate) createSpec() (*LessonReservation, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonReservation{config: lrc.config}
		_spec = sqlgraph.NewCreateSpec(lessonreservation.Table, sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt64))
	)
	if id, ok := lrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonreservation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonreservation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lrc.mutation.ReservationStatus(); ok {
		_spec.SetField(lessonreservation.FieldReservationStatus, field.TypeEnum, value)
		_node.ReservationStatus = value
	}
	if value, ok := lrc.mutation.CountStudent(); ok {
		_spec.SetField(lessonreservation.FieldCountStudent, field.TypeString, value)
		_node.CountStudent = value
	}
	if value, ok := lrc.mutation.Graduate(); ok {
		_spec.SetField(lessonreservation.FieldGraduate, field.TypeString, value)
		_node.Graduate = value
	}
	if value, ok := lrc.mutation.Subject(); ok {
		_spec.SetField(lessonreservation.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := lrc.mutation.Remarks(); ok {
		_spec.SetField(lessonreservation.FieldRemarks, field.TypeString, value)
		_node.Remarks = &value
	}
	if value, ok := lrc.mutation.ReservationConfirmAt(); ok {
		_spec.SetField(lessonreservation.FieldReservationConfirmAt, field.TypeTime, value)
		_node.ReservationConfirmAt = &value
	}
	if nodes := lrc.mutation.LessonScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.LessonScheduleTable,
			Columns: []string{lessonreservation.LessonScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonschedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lrc.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.SchoolTable,
			Columns: []string{lessonreservation.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SchoolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonreservation.UserTable,
			Columns: []string{lessonreservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lrc.mutation.LessonReservationPreferredDatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonReservationPreferredDatesTable,
			Columns: []string{lessonreservation.LessonReservationPreferredDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lrc.mutation.LessonConfirmationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lessonreservation.LessonConfirmationTable,
			Columns: []string{lessonreservation.LessonConfirmationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonconfirmation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonReservationCreateBulk is the builder for creating many LessonReservation entities in bulk.
type LessonReservationCreateBulk struct {
	config
	err      error
	builders []*LessonReservationCreate
}

// Save creates the LessonReservation entities in the database.
func (lrcb *LessonReservationCreateBulk) Save(ctx context.Context) ([]*LessonReservation, error) {
	if lrcb.err != nil {
		return nil, lrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LessonReservation, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LessonReservationCreateBulk) SaveX(ctx context.Context) []*LessonReservation {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LessonReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LessonReservationCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
