// Code generated by ent, DO NOT EDIT.

package uploadfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldUpdateTime, v))
}

// PhotoKey applies equality check predicate on the "photo_key" field. It's identical to PhotoKeyEQ.
func PhotoKey(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldPhotoKey, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldUserID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLTE(FieldUpdateTime, v))
}

// PhotoKeyEQ applies the EQ predicate on the "photo_key" field.
func PhotoKeyEQ(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldPhotoKey, v))
}

// PhotoKeyNEQ applies the NEQ predicate on the "photo_key" field.
func PhotoKeyNEQ(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNEQ(FieldPhotoKey, v))
}

// PhotoKeyIn applies the In predicate on the "photo_key" field.
func PhotoKeyIn(vs ...string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldIn(FieldPhotoKey, vs...))
}

// PhotoKeyNotIn applies the NotIn predicate on the "photo_key" field.
func PhotoKeyNotIn(vs ...string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNotIn(FieldPhotoKey, vs...))
}

// PhotoKeyGT applies the GT predicate on the "photo_key" field.
func PhotoKeyGT(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGT(FieldPhotoKey, v))
}

// PhotoKeyGTE applies the GTE predicate on the "photo_key" field.
func PhotoKeyGTE(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGTE(FieldPhotoKey, v))
}

// PhotoKeyLT applies the LT predicate on the "photo_key" field.
func PhotoKeyLT(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLT(FieldPhotoKey, v))
}

// PhotoKeyLTE applies the LTE predicate on the "photo_key" field.
func PhotoKeyLTE(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLTE(FieldPhotoKey, v))
}

// PhotoKeyContains applies the Contains predicate on the "photo_key" field.
func PhotoKeyContains(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldContains(FieldPhotoKey, v))
}

// PhotoKeyHasPrefix applies the HasPrefix predicate on the "photo_key" field.
func PhotoKeyHasPrefix(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldHasPrefix(FieldPhotoKey, v))
}

// PhotoKeyHasSuffix applies the HasSuffix predicate on the "photo_key" field.
func PhotoKeyHasSuffix(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldHasSuffix(FieldPhotoKey, v))
}

// PhotoKeyEqualFold applies the EqualFold predicate on the "photo_key" field.
func PhotoKeyEqualFold(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEqualFold(FieldPhotoKey, v))
}

// PhotoKeyContainsFold applies the ContainsFold predicate on the "photo_key" field.
func PhotoKeyContainsFold(v string) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldContainsFold(FieldPhotoKey, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.UploadFile {
	return predicate.UploadFile(sql.FieldLTE(FieldUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UploadFile) predicate.UploadFile {
	return predicate.UploadFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UploadFile) predicate.UploadFile {
	return predicate.UploadFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UploadFile) predicate.UploadFile {
	return predicate.UploadFile(sql.NotPredicates(p))
}
