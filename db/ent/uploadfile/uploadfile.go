// Code generated by ent, DO NOT EDIT.

package uploadfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the uploadfile type in the database.
	Label = "upload_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPhotoKey holds the string denoting the photo_key field in the database.
	FieldPhotoKey = "photo_key"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeLessonPlan holds the string denoting the lessonplan edge name in mutations.
	EdgeLessonPlan = "LessonPlan"
	// EdgeLessonPlanUploadFiles holds the string denoting the lesson_plan_upload_files edge name in mutations.
	EdgeLessonPlanUploadFiles = "lesson_plan_upload_files"
	// Table holds the table name of the uploadfile in the database.
	Table = "upload_files"
	// LessonPlanTable is the table that holds the LessonPlan relation/edge. The primary key declared below.
	LessonPlanTable = "lesson_plan_upload_files"
	// LessonPlanInverseTable is the table name for the LessonPlan entity.
	// It exists in this package in order to avoid circular dependency with the "lessonplan" package.
	LessonPlanInverseTable = "lesson_plans"
	// LessonPlanUploadFilesTable is the table that holds the lesson_plan_upload_files relation/edge.
	LessonPlanUploadFilesTable = "lesson_plan_upload_files"
	// LessonPlanUploadFilesInverseTable is the table name for the LessonPlanUploadFile entity.
	// It exists in this package in order to avoid circular dependency with the "lessonplanuploadfile" package.
	LessonPlanUploadFilesInverseTable = "lesson_plan_upload_files"
	// LessonPlanUploadFilesColumn is the table column denoting the lesson_plan_upload_files relation/edge.
	LessonPlanUploadFilesColumn = "upload_file_id"
)

// Columns holds all SQL columns for uploadfile fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPhotoKey,
	FieldUserID,
}

var (
	// LessonPlanPrimaryKey and LessonPlanColumn2 are the table columns denoting the
	// primary key for the LessonPlan relation (M2M).
	LessonPlanPrimaryKey = []string{"lesson_plan_id", "upload_file_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// PhotoKeyValidator is a validator for the "photo_key" field. It is called by the builders before save.
	PhotoKeyValidator func(string) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the UploadFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPhotoKey orders the results by the photo_key field.
func ByPhotoKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoKey, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByLessonPlanCount orders the results by LessonPlan count.
func ByLessonPlanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonPlanStep(), opts...)
	}
}

// ByLessonPlan orders the results by LessonPlan terms.
func ByLessonPlan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonPlanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLessonPlanUploadFilesCount orders the results by lesson_plan_upload_files count.
func ByLessonPlanUploadFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonPlanUploadFilesStep(), opts...)
	}
}

// ByLessonPlanUploadFiles orders the results by lesson_plan_upload_files terms.
func ByLessonPlanUploadFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonPlanUploadFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLessonPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LessonPlanTable, LessonPlanPrimaryKey...),
	)
}
func newLessonPlanUploadFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonPlanUploadFilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LessonPlanUploadFilesTable, LessonPlanUploadFilesColumn),
	)
}
