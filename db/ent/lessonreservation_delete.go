// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonReservationDelete is the builder for deleting a LessonReservation entity.
type LessonReservationDelete struct {
	config
	hooks    []Hook
	mutation *LessonReservationMutation
}

// Where appends a list predicates to the LessonReservationDelete builder.
func (lrd *LessonReservationDelete) Where(ps ...predicate.LessonReservation) *LessonReservationDelete {
	lrd.mutation.Where(ps...)
	return lrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lrd *LessonReservationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lrd.sqlExec, lrd.mutation, lrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lrd *LessonReservationDelete) ExecX(ctx context.Context) int {
	n, err := lrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lrd *LessonReservationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lessonreservation.Table, sqlgraph.NewFieldSpec(lessonreservation.FieldID, field.TypeInt))
	if ps := lrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lrd.mutation.done = true
	return affected, err
}

// LessonReservationDeleteOne is the builder for deleting a single LessonReservation entity.
type LessonReservationDeleteOne struct {
	lrd *LessonReservationDelete
}

// Where appends a list predicates to the LessonReservationDelete builder.
func (lrdo *LessonReservationDeleteOne) Where(ps ...predicate.LessonReservation) *LessonReservationDeleteOne {
	lrdo.lrd.mutation.Where(ps...)
	return lrdo
}

// Exec executes the deletion query.
func (lrdo *LessonReservationDeleteOne) Exec(ctx context.Context) error {
	n, err := lrdo.lrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lessonreservation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lrdo *LessonReservationDeleteOne) ExecX(ctx context.Context) {
	if err := lrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
