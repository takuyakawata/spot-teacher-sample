// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// UploadFileUpdate is the builder for updating UploadFile entities.
type UploadFileUpdate struct {
	config
	hooks    []Hook
	mutation *UploadFileMutation
}

// Where appends a list predicates to the UploadFileUpdate builder.
func (ufu *UploadFileUpdate) Where(ps ...predicate.UploadFile) *UploadFileUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetUpdateTime sets the "update_time" field.
func (ufu *UploadFileUpdate) SetUpdateTime(t time.Time) *UploadFileUpdate {
	ufu.mutation.SetUpdateTime(t)
	return ufu
}

// SetPhotoKey sets the "photo_key" field.
func (ufu *UploadFileUpdate) SetPhotoKey(s string) *UploadFileUpdate {
	ufu.mutation.SetPhotoKey(s)
	return ufu
}

// SetNillablePhotoKey sets the "photo_key" field if the given value is not nil.
func (ufu *UploadFileUpdate) SetNillablePhotoKey(s *string) *UploadFileUpdate {
	if s != nil {
		ufu.SetPhotoKey(*s)
	}
	return ufu
}

// SetUserID sets the "user_id" field.
func (ufu *UploadFileUpdate) SetUserID(i int64) *UploadFileUpdate {
	ufu.mutation.ResetUserID()
	ufu.mutation.SetUserID(i)
	return ufu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ufu *UploadFileUpdate) SetNillableUserID(i *int64) *UploadFileUpdate {
	if i != nil {
		ufu.SetUserID(*i)
	}
	return ufu
}

// AddUserID adds i to the "user_id" field.
func (ufu *UploadFileUpdate) AddUserID(i int64) *UploadFileUpdate {
	ufu.mutation.AddUserID(i)
	return ufu
}

// Mutation returns the UploadFileMutation object of the builder.
func (ufu *UploadFileUpdate) Mutation() *UploadFileMutation {
	return ufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UploadFileUpdate) Save(ctx context.Context) (int, error) {
	ufu.defaults()
	return withHooks(ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UploadFileUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UploadFileUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UploadFileUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufu *UploadFileUpdate) defaults() {
	if _, ok := ufu.mutation.UpdateTime(); !ok {
		v := uploadfile.UpdateDefaultUpdateTime()
		ufu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufu *UploadFileUpdate) check() error {
	if v, ok := ufu.mutation.PhotoKey(); ok {
		if err := uploadfile.PhotoKeyValidator(v); err != nil {
			return &ValidationError{Name: "photo_key", err: fmt.Errorf(`ent: validator failed for field "UploadFile.photo_key": %w`, err)}
		}
	}
	if v, ok := ufu.mutation.UserID(); ok {
		if err := uploadfile.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UploadFile.user_id": %w`, err)}
		}
	}
	return nil
}

func (ufu *UploadFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ufu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(uploadfile.Table, uploadfile.Columns, sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.UpdateTime(); ok {
		_spec.SetField(uploadfile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ufu.mutation.PhotoKey(); ok {
		_spec.SetField(uploadfile.FieldPhotoKey, field.TypeString, value)
	}
	if value, ok := ufu.mutation.UserID(); ok {
		_spec.SetField(uploadfile.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ufu.mutation.AddedUserID(); ok {
		_spec.AddField(uploadfile.FieldUserID, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uploadfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UploadFileUpdateOne is the builder for updating a single UploadFile entity.
type UploadFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UploadFileMutation
}

// SetUpdateTime sets the "update_time" field.
func (ufuo *UploadFileUpdateOne) SetUpdateTime(t time.Time) *UploadFileUpdateOne {
	ufuo.mutation.SetUpdateTime(t)
	return ufuo
}

// SetPhotoKey sets the "photo_key" field.
func (ufuo *UploadFileUpdateOne) SetPhotoKey(s string) *UploadFileUpdateOne {
	ufuo.mutation.SetPhotoKey(s)
	return ufuo
}

// SetNillablePhotoKey sets the "photo_key" field if the given value is not nil.
func (ufuo *UploadFileUpdateOne) SetNillablePhotoKey(s *string) *UploadFileUpdateOne {
	if s != nil {
		ufuo.SetPhotoKey(*s)
	}
	return ufuo
}

// SetUserID sets the "user_id" field.
func (ufuo *UploadFileUpdateOne) SetUserID(i int64) *UploadFileUpdateOne {
	ufuo.mutation.ResetUserID()
	ufuo.mutation.SetUserID(i)
	return ufuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ufuo *UploadFileUpdateOne) SetNillableUserID(i *int64) *UploadFileUpdateOne {
	if i != nil {
		ufuo.SetUserID(*i)
	}
	return ufuo
}

// AddUserID adds i to the "user_id" field.
func (ufuo *UploadFileUpdateOne) AddUserID(i int64) *UploadFileUpdateOne {
	ufuo.mutation.AddUserID(i)
	return ufuo
}

// Mutation returns the UploadFileMutation object of the builder.
func (ufuo *UploadFileUpdateOne) Mutation() *UploadFileMutation {
	return ufuo.mutation
}

// Where appends a list predicates to the UploadFileUpdate builder.
func (ufuo *UploadFileUpdateOne) Where(ps ...predicate.UploadFile) *UploadFileUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UploadFileUpdateOne) Select(field string, fields ...string) *UploadFileUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UploadFile entity.
func (ufuo *UploadFileUpdateOne) Save(ctx context.Context) (*UploadFile, error) {
	ufuo.defaults()
	return withHooks(ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UploadFileUpdateOne) SaveX(ctx context.Context) *UploadFile {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UploadFileUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UploadFileUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufuo *UploadFileUpdateOne) defaults() {
	if _, ok := ufuo.mutation.UpdateTime(); !ok {
		v := uploadfile.UpdateDefaultUpdateTime()
		ufuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufuo *UploadFileUpdateOne) check() error {
	if v, ok := ufuo.mutation.PhotoKey(); ok {
		if err := uploadfile.PhotoKeyValidator(v); err != nil {
			return &ValidationError{Name: "photo_key", err: fmt.Errorf(`ent: validator failed for field "UploadFile.photo_key": %w`, err)}
		}
	}
	if v, ok := ufuo.mutation.UserID(); ok {
		if err := uploadfile.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UploadFile.user_id": %w`, err)}
		}
	}
	return nil
}

func (ufuo *UploadFileUpdateOne) sqlSave(ctx context.Context) (_node *UploadFile, err error) {
	if err := ufuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(uploadfile.Table, uploadfile.Columns, sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UploadFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uploadfile.FieldID)
		for _, f := range fields {
			if !uploadfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != uploadfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.UpdateTime(); ok {
		_spec.SetField(uploadfile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ufuo.mutation.PhotoKey(); ok {
		_spec.SetField(uploadfile.FieldPhotoKey, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.UserID(); ok {
		_spec.SetField(uploadfile.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ufuo.mutation.AddedUserID(); ok {
		_spec.AddField(uploadfile.FieldUserID, field.TypeInt64, value)
	}
	_node = &UploadFile{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uploadfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
