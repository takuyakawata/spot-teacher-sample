// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// UploadFileDelete is the builder for deleting a UploadFile entity.
type UploadFileDelete struct {
	config
	hooks    []Hook
	mutation *UploadFileMutation
}

// Where appends a list predicates to the UploadFileDelete builder.
func (ufd *UploadFileDelete) Where(ps ...predicate.UploadFile) *UploadFileDelete {
	ufd.mutation.Where(ps...)
	return ufd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufd *UploadFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufd.sqlExec, ufd.mutation, ufd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufd *UploadFileDelete) ExecX(ctx context.Context) int {
	n, err := ufd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufd *UploadFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(uploadfile.Table, sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt))
	if ps := ufd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufd.mutation.done = true
	return affected, err
}

// UploadFileDeleteOne is the builder for deleting a single UploadFile entity.
type UploadFileDeleteOne struct {
	ufd *UploadFileDelete
}

// Where appends a list predicates to the UploadFileDelete builder.
func (ufdo *UploadFileDeleteOne) Where(ps ...predicate.UploadFile) *UploadFileDeleteOne {
	ufdo.ufd.mutation.Where(ps...)
	return ufdo
}

// Exec executes the deletion query.
func (ufdo *UploadFileDeleteOne) Exec(ctx context.Context) error {
	n, err := ufdo.ufd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{uploadfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufdo *UploadFileDeleteOne) ExecX(ctx context.Context) {
	if err := ufdo.Exec(ctx); err != nil {
		panic(err)
	}
}
