// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/grade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplangrade"
)

// LessonPlanGradeCreate is the builder for creating a LessonPlanGrade entity.
type LessonPlanGradeCreate struct {
	config
	mutation *LessonPlanGradeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lpgc *LessonPlanGradeCreate) SetCreatedAt(t time.Time) *LessonPlanGradeCreate {
	lpgc.mutation.SetCreatedAt(t)
	return lpgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpgc *LessonPlanGradeCreate) SetNillableCreatedAt(t *time.Time) *LessonPlanGradeCreate {
	if t != nil {
		lpgc.SetCreatedAt(*t)
	}
	return lpgc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpgc *LessonPlanGradeCreate) SetUpdatedAt(t time.Time) *LessonPlanGradeCreate {
	lpgc.mutation.SetUpdatedAt(t)
	return lpgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpgc *LessonPlanGradeCreate) SetNillableUpdatedAt(t *time.Time) *LessonPlanGradeCreate {
	if t != nil {
		lpgc.SetUpdatedAt(*t)
	}
	return lpgc
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpgc *LessonPlanGradeCreate) SetLessonPlanID(i int64) *LessonPlanGradeCreate {
	lpgc.mutation.SetLessonPlanID(i)
	return lpgc
}

// SetGradeID sets the "grade_id" field.
func (lpgc *LessonPlanGradeCreate) SetGradeID(i int64) *LessonPlanGradeCreate {
	lpgc.mutation.SetGradeID(i)
	return lpgc
}

// SetID sets the "id" field.
func (lpgc *LessonPlanGradeCreate) SetID(i int64) *LessonPlanGradeCreate {
	lpgc.mutation.SetID(i)
	return lpgc
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpgc *LessonPlanGradeCreate) SetLessonPlan(l *LessonPlan) *LessonPlanGradeCreate {
	return lpgc.SetLessonPlanID(l.ID)
}

// SetGrade sets the "grade" edge to the Grade entity.
func (lpgc *LessonPlanGradeCreate) SetGrade(g *Grade) *LessonPlanGradeCreate {
	return lpgc.SetGradeID(g.ID)
}

// Mutation returns the LessonPlanGradeMutation object of the builder.
func (lpgc *LessonPlanGradeCreate) Mutation() *LessonPlanGradeMutation {
	return lpgc.mutation
}

// Save creates the LessonPlanGrade in the database.
func (lpgc *LessonPlanGradeCreate) Save(ctx context.Context) (*LessonPlanGrade, error) {
	lpgc.defaults()
	return withHooks(ctx, lpgc.sqlSave, lpgc.mutation, lpgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpgc *LessonPlanGradeCreate) SaveX(ctx context.Context) *LessonPlanGrade {
	v, err := lpgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpgc *LessonPlanGradeCreate) Exec(ctx context.Context) error {
	_, err := lpgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpgc *LessonPlanGradeCreate) ExecX(ctx context.Context) {
	if err := lpgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpgc *LessonPlanGradeCreate) defaults() {
	if _, ok := lpgc.mutation.CreatedAt(); !ok {
		v := lessonplangrade.DefaultCreatedAt()
		lpgc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpgc.mutation.UpdatedAt(); !ok {
		v := lessonplangrade.DefaultUpdatedAt()
		lpgc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpgc *LessonPlanGradeCreate) check() error {
	if _, ok := lpgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonPlanGrade.created_at"`)}
	}
	if _, ok := lpgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonPlanGrade.updated_at"`)}
	}
	if _, ok := lpgc.mutation.LessonPlanID(); !ok {
		return &ValidationError{Name: "lesson_plan_id", err: errors.New(`ent: missing required field "LessonPlanGrade.lesson_plan_id"`)}
	}
	if _, ok := lpgc.mutation.GradeID(); !ok {
		return &ValidationError{Name: "grade_id", err: errors.New(`ent: missing required field "LessonPlanGrade.grade_id"`)}
	}
	if v, ok := lpgc.mutation.ID(); ok {
		if err := lessonplangrade.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LessonPlanGrade.id": %w`, err)}
		}
	}
	if len(lpgc.mutation.LessonPlanIDs()) == 0 {
		return &ValidationError{Name: "lesson_plan", err: errors.New(`ent: missing required edge "LessonPlanGrade.lesson_plan"`)}
	}
	if len(lpgc.mutation.GradeIDs()) == 0 {
		return &ValidationError{Name: "grade", err: errors.New(`ent: missing required edge "LessonPlanGrade.grade"`)}
	}
	return nil
}

func (lpgc *LessonPlanGradeCreate) sqlSave(ctx context.Context) (*LessonPlanGrade, error) {
	if err := lpgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lpgc.mutation.id = &_node.ID
	lpgc.mutation.done = true
	return _node, nil
}

func (lpgc *LessonPlanGradeCreate) createSpec() (*LessonPlanGrade, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonPlanGrade{config: lpgc.config}
		_spec = sqlgraph.NewCreateSpec(lessonplangrade.Table, sqlgraph.NewFieldSpec(lessonplangrade.FieldID, field.TypeInt64))
	)
	if id, ok := lpgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lpgc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonplangrade.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpgc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplangrade.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lpgc.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplangrade.LessonPlanTable,
			Columns: []string{lessonplangrade.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonPlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpgc.mutation.GradeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplangrade.GradeTable,
			Columns: []string{lessonplangrade.GradeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grade.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GradeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonPlanGradeCreateBulk is the builder for creating many LessonPlanGrade entities in bulk.
type LessonPlanGradeCreateBulk struct {
	config
	err      error
	builders []*LessonPlanGradeCreate
}

// Save creates the LessonPlanGrade entities in the database.
func (lpgcb *LessonPlanGradeCreateBulk) Save(ctx context.Context) ([]*LessonPlanGrade, error) {
	if lpgcb.err != nil {
		return nil, lpgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpgcb.builders))
	nodes := make([]*LessonPlanGrade, len(lpgcb.builders))
	mutators := make([]Mutator, len(lpgcb.builders))
	for i := range lpgcb.builders {
		func(i int, root context.Context) {
			builder := lpgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonPlanGradeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpgcb *LessonPlanGradeCreateBulk) SaveX(ctx context.Context) []*LessonPlanGrade {
	v, err := lpgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpgcb *LessonPlanGradeCreateBulk) Exec(ctx context.Context) error {
	_, err := lpgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpgcb *LessonPlanGradeCreateBulk) ExecX(ctx context.Context) {
	if err := lpgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
