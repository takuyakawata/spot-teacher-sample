// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonconfirmation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
)

// LessonConfirmation is the model entity for the LessonConfirmation schema.
type LessonConfirmation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LessonReservationID holds the value of the "lesson_reservation_id" field.
	LessonReservationID int `json:"lesson_reservation_id,omitempty"`
	// MatchingDate holds the value of the "matching_date" field.
	MatchingDate time.Time `json:"matching_date,omitempty"`
	// 確定した授業の開始時間
	StartTime time.Time `json:"start_time,omitempty"`
	// 確定した授業の終了時間
	FinishTime time.Time `json:"finish_time,omitempty"`
	// 備考
	Remarks string `json:"remarks,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonConfirmationQuery when eager-loading is set.
	Edges        LessonConfirmationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonConfirmationEdges holds the relations/edges for other nodes in the graph.
type LessonConfirmationEdges struct {
	// LessonReservation holds the value of the lesson_reservation edge.
	LessonReservation *LessonReservation `json:"lesson_reservation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LessonReservationOrErr returns the LessonReservation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonConfirmationEdges) LessonReservationOrErr() (*LessonReservation, error) {
	if e.LessonReservation != nil {
		return e.LessonReservation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonreservation.Label}
	}
	return nil, &NotLoadedError{edge: "lesson_reservation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonConfirmation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonconfirmation.FieldID, lessonconfirmation.FieldLessonReservationID:
			values[i] = new(sql.NullInt64)
		case lessonconfirmation.FieldRemarks:
			values[i] = new(sql.NullString)
		case lessonconfirmation.FieldMatchingDate, lessonconfirmation.FieldStartTime, lessonconfirmation.FieldFinishTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonConfirmation fields.
func (lc *LessonConfirmation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonconfirmation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lc.ID = int(value.Int64)
		case lessonconfirmation.FieldLessonReservationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_reservation_id", values[i])
			} else if value.Valid {
				lc.LessonReservationID = int(value.Int64)
			}
		case lessonconfirmation.FieldMatchingDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field matching_date", values[i])
			} else if value.Valid {
				lc.MatchingDate = value.Time
			}
		case lessonconfirmation.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				lc.StartTime = value.Time
			}
		case lessonconfirmation.FieldFinishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finish_time", values[i])
			} else if value.Valid {
				lc.FinishTime = value.Time
			}
		case lessonconfirmation.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				lc.Remarks = value.String
			}
		default:
			lc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonConfirmation.
// This includes values selected through modifiers, order, etc.
func (lc *LessonConfirmation) Value(name string) (ent.Value, error) {
	return lc.selectValues.Get(name)
}

// QueryLessonReservation queries the "lesson_reservation" edge of the LessonConfirmation entity.
func (lc *LessonConfirmation) QueryLessonReservation() *LessonReservationQuery {
	return NewLessonConfirmationClient(lc.config).QueryLessonReservation(lc)
}

// Update returns a builder for updating this LessonConfirmation.
// Note that you need to call LessonConfirmation.Unwrap() before calling this method if this LessonConfirmation
// was returned from a transaction, and the transaction was committed or rolled back.
func (lc *LessonConfirmation) Update() *LessonConfirmationUpdateOne {
	return NewLessonConfirmationClient(lc.config).UpdateOne(lc)
}

// Unwrap unwraps the LessonConfirmation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lc *LessonConfirmation) Unwrap() *LessonConfirmation {
	_tx, ok := lc.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonConfirmation is not a transactional entity")
	}
	lc.config.driver = _tx.drv
	return lc
}

// String implements the fmt.Stringer.
func (lc *LessonConfirmation) String() string {
	var builder strings.Builder
	builder.WriteString("LessonConfirmation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lc.ID))
	builder.WriteString("lesson_reservation_id=")
	builder.WriteString(fmt.Sprintf("%v", lc.LessonReservationID))
	builder.WriteString(", ")
	builder.WriteString("matching_date=")
	builder.WriteString(lc.MatchingDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(lc.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finish_time=")
	builder.WriteString(lc.FinishTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(lc.Remarks)
	builder.WriteByte(')')
	return builder.String()
}

// LessonConfirmations is a parsable slice of LessonConfirmation.
type LessonConfirmations []*LessonConfirmation
