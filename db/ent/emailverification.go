// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/emailverification"
)

// EmailVerification is the model entity for the EmailVerification schema.
type EmailVerification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"-"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt    time.Time `json:"expired_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailVerification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailverification.FieldID:
			values[i] = new(sql.NullInt64)
		case emailverification.FieldEmail, emailverification.FieldToken:
			values[i] = new(sql.NullString)
		case emailverification.FieldCreateTime, emailverification.FieldUpdateTime, emailverification.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailVerification fields.
func (ev *EmailVerification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailverification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ev.ID = int(value.Int64)
		case emailverification.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ev.CreateTime = value.Time
			}
		case emailverification.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ev.UpdateTime = value.Time
			}
		case emailverification.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ev.Email = value.String
			}
		case emailverification.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				ev.Token = value.String
			}
		case emailverification.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				ev.ExpiredAt = value.Time
			}
		default:
			ev.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailVerification.
// This includes values selected through modifiers, order, etc.
func (ev *EmailVerification) Value(name string) (ent.Value, error) {
	return ev.selectValues.Get(name)
}

// Update returns a builder for updating this EmailVerification.
// Note that you need to call EmailVerification.Unwrap() before calling this method if this EmailVerification
// was returned from a transaction, and the transaction was committed or rolled back.
func (ev *EmailVerification) Update() *EmailVerificationUpdateOne {
	return NewEmailVerificationClient(ev.config).UpdateOne(ev)
}

// Unwrap unwraps the EmailVerification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ev *EmailVerification) Unwrap() *EmailVerification {
	_tx, ok := ev.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailVerification is not a transactional entity")
	}
	ev.config.driver = _tx.drv
	return ev
}

// String implements the fmt.Stringer.
func (ev *EmailVerification) String() string {
	var builder strings.Builder
	builder.WriteString("EmailVerification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ev.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ev.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ev.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ev.Email)
	builder.WriteString(", ")
	builder.WriteString("token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("expired_at=")
	builder.WriteString(ev.ExpiredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EmailVerifications is a parsable slice of EmailVerification.
type EmailVerifications []*EmailVerification
