// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/inquiry"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// InquiryCreate is the builder for creating a Inquiry entity.
type InquiryCreate struct {
	config
	mutation *InquiryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ic *InquiryCreate) SetCreatedAt(t time.Time) *InquiryCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InquiryCreate) SetNillableCreatedAt(t *time.Time) *InquiryCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InquiryCreate) SetUpdatedAt(t time.Time) *InquiryCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InquiryCreate) SetNillableUpdatedAt(t *time.Time) *InquiryCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetLessonScheduleID sets the "lesson_schedule_id" field.
func (ic *InquiryCreate) SetLessonScheduleID(i int64) *InquiryCreate {
	ic.mutation.SetLessonScheduleID(i)
	return ic
}

// SetSchoolID sets the "school_id" field.
func (ic *InquiryCreate) SetSchoolID(i int64) *InquiryCreate {
	ic.mutation.SetSchoolID(i)
	return ic
}

// SetUserID sets the "user_id" field.
func (ic *InquiryCreate) SetUserID(i int64) *InquiryCreate {
	ic.mutation.SetUserID(i)
	return ic
}

// SetCategory sets the "category" field.
func (ic *InquiryCreate) SetCategory(i inquiry.Category) *InquiryCreate {
	ic.mutation.SetCategory(i)
	return ic
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ic *InquiryCreate) SetNillableCategory(i *inquiry.Category) *InquiryCreate {
	if i != nil {
		ic.SetCategory(*i)
	}
	return ic
}

// SetInquiryDetail sets the "inquiry_detail" field.
func (ic *InquiryCreate) SetInquiryDetail(s string) *InquiryCreate {
	ic.mutation.SetInquiryDetail(s)
	return ic
}

// SetID sets the "id" field.
func (ic *InquiryCreate) SetID(i int64) *InquiryCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetLessonID sets the "lesson" edge to the LessonPlan entity by ID.
func (ic *InquiryCreate) SetLessonID(id int64) *InquiryCreate {
	ic.mutation.SetLessonID(id)
	return ic
}

// SetLesson sets the "lesson" edge to the LessonPlan entity.
func (ic *InquiryCreate) SetLesson(l *LessonPlan) *InquiryCreate {
	return ic.SetLessonID(l.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (ic *InquiryCreate) SetSchool(s *School) *InquiryCreate {
	return ic.SetSchoolID(s.ID)
}

// SetTeacherID sets the "teacher" edge to the User entity by ID.
func (ic *InquiryCreate) SetTeacherID(id int64) *InquiryCreate {
	ic.mutation.SetTeacherID(id)
	return ic
}

// SetTeacher sets the "teacher" edge to the User entity.
func (ic *InquiryCreate) SetTeacher(u *User) *InquiryCreate {
	return ic.SetTeacherID(u.ID)
}

// Mutation returns the InquiryMutation object of the builder.
func (ic *InquiryCreate) Mutation() *InquiryMutation {
	return ic.mutation
}

// Save creates the Inquiry in the database.
func (ic *InquiryCreate) Save(ctx context.Context) (*Inquiry, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InquiryCreate) SaveX(ctx context.Context) *Inquiry {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InquiryCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InquiryCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InquiryCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := inquiry.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := inquiry.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.Category(); !ok {
		v := inquiry.DefaultCategory
		ic.mutation.SetCategory(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InquiryCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Inquiry.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Inquiry.updated_at"`)}
	}
	if _, ok := ic.mutation.LessonScheduleID(); !ok {
		return &ValidationError{Name: "lesson_schedule_id", err: errors.New(`ent: missing required field "Inquiry.lesson_schedule_id"`)}
	}
	if v, ok := ic.mutation.LessonScheduleID(); ok {
		if err := inquiry.LessonScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "lesson_schedule_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.lesson_schedule_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.SchoolID(); !ok {
		return &ValidationError{Name: "school_id", err: errors.New(`ent: missing required field "Inquiry.school_id"`)}
	}
	if v, ok := ic.mutation.SchoolID(); ok {
		if err := inquiry.SchoolIDValidator(v); err != nil {
			return &ValidationError{Name: "school_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.school_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Inquiry.user_id"`)}
	}
	if v, ok := ic.mutation.UserID(); ok {
		if err := inquiry.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.user_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Inquiry.category"`)}
	}
	if v, ok := ic.mutation.Category(); ok {
		if err := inquiry.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Inquiry.category": %w`, err)}
		}
	}
	if _, ok := ic.mutation.InquiryDetail(); !ok {
		return &ValidationError{Name: "inquiry_detail", err: errors.New(`ent: missing required field "Inquiry.inquiry_detail"`)}
	}
	if v, ok := ic.mutation.ID(); ok {
		if err := inquiry.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Inquiry.id": %w`, err)}
		}
	}
	if len(ic.mutation.LessonIDs()) == 0 {
		return &ValidationError{Name: "lesson", err: errors.New(`ent: missing required edge "Inquiry.lesson"`)}
	}
	if len(ic.mutation.SchoolIDs()) == 0 {
		return &ValidationError{Name: "school", err: errors.New(`ent: missing required edge "Inquiry.school"`)}
	}
	if len(ic.mutation.TeacherIDs()) == 0 {
		return &ValidationError{Name: "teacher", err: errors.New(`ent: missing required edge "Inquiry.teacher"`)}
	}
	return nil
}

func (ic *InquiryCreate) sqlSave(ctx context.Context) (*Inquiry, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InquiryCreate) createSpec() (*Inquiry, *sqlgraph.CreateSpec) {
	var (
		_node = &Inquiry{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inquiry.Table, sqlgraph.NewFieldSpec(inquiry.FieldID, field.TypeInt64))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inquiry.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inquiry.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.Category(); ok {
		_spec.SetField(inquiry.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := ic.mutation.InquiryDetail(); ok {
		_spec.SetField(inquiry.FieldInquiryDetail, field.TypeString, value)
		_node.InquiryDetail = value
	}
	if nodes := ic.mutation.LessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.LessonTable,
			Columns: []string{inquiry.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inquiry.SchoolTable,
			Columns: []string{inquiry.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SchoolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.TeacherTable,
			Columns: []string{inquiry.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InquiryCreateBulk is the builder for creating many Inquiry entities in bulk.
type InquiryCreateBulk struct {
	config
	err      error
	builders []*InquiryCreate
}

// Save creates the Inquiry entities in the database.
func (icb *InquiryCreateBulk) Save(ctx context.Context) ([]*Inquiry, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inquiry, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InquiryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InquiryCreateBulk) SaveX(ctx context.Context) []*Inquiry {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InquiryCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InquiryCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
