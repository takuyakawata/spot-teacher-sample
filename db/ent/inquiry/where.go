// Code generated by ent, DO NOT EDIT.

package inquiry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldUpdatedAt, v))
}

// LessonScheduleID applies equality check predicate on the "lesson_schedule_id" field. It's identical to LessonScheduleIDEQ.
func LessonScheduleID(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldLessonScheduleID, v))
}

// SchoolID applies equality check predicate on the "school_id" field. It's identical to SchoolIDEQ.
func SchoolID(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldSchoolID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldUserID, v))
}

// InquiryDetail applies equality check predicate on the "inquiry_detail" field. It's identical to InquiryDetailEQ.
func InquiryDetail(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldInquiryDetail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLTE(FieldUpdatedAt, v))
}

// LessonScheduleIDEQ applies the EQ predicate on the "lesson_schedule_id" field.
func LessonScheduleIDEQ(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldLessonScheduleID, v))
}

// LessonScheduleIDNEQ applies the NEQ predicate on the "lesson_schedule_id" field.
func LessonScheduleIDNEQ(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldLessonScheduleID, v))
}

// LessonScheduleIDIn applies the In predicate on the "lesson_schedule_id" field.
func LessonScheduleIDIn(vs ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldLessonScheduleID, vs...))
}

// LessonScheduleIDNotIn applies the NotIn predicate on the "lesson_schedule_id" field.
func LessonScheduleIDNotIn(vs ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldLessonScheduleID, vs...))
}

// SchoolIDEQ applies the EQ predicate on the "school_id" field.
func SchoolIDEQ(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldSchoolID, v))
}

// SchoolIDNEQ applies the NEQ predicate on the "school_id" field.
func SchoolIDNEQ(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldSchoolID, v))
}

// SchoolIDIn applies the In predicate on the "school_id" field.
func SchoolIDIn(vs ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldSchoolID, vs...))
}

// SchoolIDNotIn applies the NotIn predicate on the "school_id" field.
func SchoolIDNotIn(vs ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldSchoolID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldUserID, vs...))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldCategory, vs...))
}

// InquiryDetailEQ applies the EQ predicate on the "inquiry_detail" field.
func InquiryDetailEQ(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEQ(FieldInquiryDetail, v))
}

// InquiryDetailNEQ applies the NEQ predicate on the "inquiry_detail" field.
func InquiryDetailNEQ(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNEQ(FieldInquiryDetail, v))
}

// InquiryDetailIn applies the In predicate on the "inquiry_detail" field.
func InquiryDetailIn(vs ...string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldIn(FieldInquiryDetail, vs...))
}

// InquiryDetailNotIn applies the NotIn predicate on the "inquiry_detail" field.
func InquiryDetailNotIn(vs ...string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldNotIn(FieldInquiryDetail, vs...))
}

// InquiryDetailGT applies the GT predicate on the "inquiry_detail" field.
func InquiryDetailGT(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGT(FieldInquiryDetail, v))
}

// InquiryDetailGTE applies the GTE predicate on the "inquiry_detail" field.
func InquiryDetailGTE(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldGTE(FieldInquiryDetail, v))
}

// InquiryDetailLT applies the LT predicate on the "inquiry_detail" field.
func InquiryDetailLT(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLT(FieldInquiryDetail, v))
}

// InquiryDetailLTE applies the LTE predicate on the "inquiry_detail" field.
func InquiryDetailLTE(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldLTE(FieldInquiryDetail, v))
}

// InquiryDetailContains applies the Contains predicate on the "inquiry_detail" field.
func InquiryDetailContains(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldContains(FieldInquiryDetail, v))
}

// InquiryDetailHasPrefix applies the HasPrefix predicate on the "inquiry_detail" field.
func InquiryDetailHasPrefix(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldHasPrefix(FieldInquiryDetail, v))
}

// InquiryDetailHasSuffix applies the HasSuffix predicate on the "inquiry_detail" field.
func InquiryDetailHasSuffix(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldHasSuffix(FieldInquiryDetail, v))
}

// InquiryDetailEqualFold applies the EqualFold predicate on the "inquiry_detail" field.
func InquiryDetailEqualFold(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldEqualFold(FieldInquiryDetail, v))
}

// InquiryDetailContainsFold applies the ContainsFold predicate on the "inquiry_detail" field.
func InquiryDetailContainsFold(v string) predicate.Inquiry {
	return predicate.Inquiry(sql.FieldContainsFold(FieldInquiryDetail, v))
}

// HasLesson applies the HasEdge predicate on the "lesson" edge.
func HasLesson() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LessonTable, LessonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonWith applies the HasEdge predicate on the "lesson" edge with a given conditions (other predicates).
func HasLessonWith(preds ...predicate.LessonPlan) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := newLessonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchool applies the HasEdge predicate on the "school" edge.
func HasSchool() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SchoolTable, SchoolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchoolWith applies the HasEdge predicate on the "school" edge with a given conditions (other predicates).
func HasSchoolWith(preds ...predicate.School) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := newSchoolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeacher applies the HasEdge predicate on the "teacher" edge.
func HasTeacher() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherWith applies the HasEdge predicate on the "teacher" edge with a given conditions (other predicates).
func HasTeacherWith(preds ...predicate.User) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := newTeacherStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(sql.NotPredicates(p))
}
