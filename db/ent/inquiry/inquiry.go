// Code generated by ent, DO NOT EDIT.

package inquiry

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the inquiry type in the database.
	Label = "inquiry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLessonScheduleID holds the string denoting the lesson_schedule_id field in the database.
	FieldLessonScheduleID = "lesson_schedule_id"
	// FieldSchoolID holds the string denoting the school_id field in the database.
	FieldSchoolID = "school_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldInquiryDetail holds the string denoting the inquiry_detail field in the database.
	FieldInquiryDetail = "inquiry_detail"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeLesson holds the string denoting the lesson edge name in mutations.
	EdgeLesson = "lesson"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// EdgeTeacher holds the string denoting the teacher edge name in mutations.
	EdgeTeacher = "teacher"
	// Table holds the table name of the inquiry in the database.
	Table = "inquiries"
	// LessonTable is the table that holds the lesson relation/edge.
	LessonTable = "inquiries"
	// LessonInverseTable is the table name for the LessonPlan entity.
	// It exists in this package in order to avoid circular dependency with the "lessonplan" package.
	LessonInverseTable = "lesson_plans"
	// LessonColumn is the table column denoting the lesson relation/edge.
	LessonColumn = "lesson_schedule_id"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "inquiries"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_id"
	// TeacherTable is the table that holds the teacher relation/edge.
	TeacherTable = "inquiries"
	// TeacherInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TeacherInverseTable = "users"
	// TeacherColumn is the table column denoting the teacher relation/edge.
	TeacherColumn = "user_id"
)

// Columns holds all SQL columns for inquiry fields.
var Columns = []string{
	FieldID,
	FieldLessonScheduleID,
	FieldSchoolID,
	FieldUserID,
	FieldCategory,
	FieldInquiryDetail,
	FieldDeletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LessonScheduleIDValidator is a validator for the "lesson_schedule_id" field. It is called by the builders before save.
	LessonScheduleIDValidator func(int64) error
	// SchoolIDValidator is a validator for the "school_id" field. It is called by the builders before save.
	SchoolIDValidator func(int64) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Category defines the type for the "category" enum field.
type Category string

// CategoryOTHER is the default value of the Category enum.
const DefaultCategory = CategoryOTHER

// Category values.
const (
	CategoryLESSON       Category = "LESSON"
	CategoryRESERVATION  Category = "RESERVATION"
	CategoryCANCELLATION Category = "CANCELLATION"
	CategoryOTHER        Category = "OTHER"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryLESSON, CategoryRESERVATION, CategoryCANCELLATION, CategoryOTHER:
		return nil
	default:
		return fmt.Errorf("inquiry: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Inquiry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLessonScheduleID orders the results by the lesson_schedule_id field.
func ByLessonScheduleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonScheduleID, opts...).ToFunc()
}

// BySchoolID orders the results by the school_id field.
func BySchoolID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchoolID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByInquiryDetail orders the results by the inquiry_detail field.
func ByInquiryDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInquiryDetail, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLessonField orders the results by lesson field.
func ByLessonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonStep(), sql.OrderByField(field, opts...))
	}
}

// BySchoolField orders the results by school field.
func BySchoolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchoolStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeacherField orders the results by teacher field.
func ByTeacherField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeacherStep(), sql.OrderByField(field, opts...))
	}
}
func newLessonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LessonTable, LessonColumn),
	)
}
func newSchoolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchoolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SchoolTable, SchoolColumn),
	)
}
func newTeacherStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeacherInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TeacherTable, TeacherColumn),
	)
}
