// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplangrade"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonPlanGradeDelete is the builder for deleting a LessonPlanGrade entity.
type LessonPlanGradeDelete struct {
	config
	hooks    []Hook
	mutation *LessonPlanGradeMutation
}

// Where appends a list predicates to the LessonPlanGradeDelete builder.
func (lpgd *LessonPlanGradeDelete) Where(ps ...predicate.LessonPlanGrade) *LessonPlanGradeDelete {
	lpgd.mutation.Where(ps...)
	return lpgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lpgd *LessonPlanGradeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lpgd.sqlExec, lpgd.mutation, lpgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lpgd *LessonPlanGradeDelete) ExecX(ctx context.Context) int {
	n, err := lpgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lpgd *LessonPlanGradeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lessonplangrade.Table, sqlgraph.NewFieldSpec(lessonplangrade.FieldID, field.TypeInt64))
	if ps := lpgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lpgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lpgd.mutation.done = true
	return affected, err
}

// LessonPlanGradeDeleteOne is the builder for deleting a single LessonPlanGrade entity.
type LessonPlanGradeDeleteOne struct {
	lpgd *LessonPlanGradeDelete
}

// Where appends a list predicates to the LessonPlanGradeDelete builder.
func (lpgdo *LessonPlanGradeDeleteOne) Where(ps ...predicate.LessonPlanGrade) *LessonPlanGradeDeleteOne {
	lpgdo.lpgd.mutation.Where(ps...)
	return lpgdo
}

// Exec executes the deletion query.
func (lpgdo *LessonPlanGradeDeleteOne) Exec(ctx context.Context) error {
	n, err := lpgdo.lpgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lessonplangrade.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lpgdo *LessonPlanGradeDeleteOne) ExecX(ctx context.Context) {
	if err := lpgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
