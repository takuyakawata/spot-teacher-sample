// Code generated by ent, DO NOT EDIT.

package grade

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grade type in the database.
	Label = "grade"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCodeNumber holds the string denoting the code_number field in the database.
	FieldCodeNumber = "code_number"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// EdgeLessonPlans holds the string denoting the lesson_plans edge name in mutations.
	EdgeLessonPlans = "lesson_plans"
	// EdgeLessonPlanGrades holds the string denoting the lesson_plan_grades edge name in mutations.
	EdgeLessonPlanGrades = "lesson_plan_grades"
	// Table holds the table name of the grade in the database.
	Table = "grades"
	// LessonPlansTable is the table that holds the lesson_plans relation/edge. The primary key declared below.
	LessonPlansTable = "lesson_plan_grades"
	// LessonPlansInverseTable is the table name for the LessonPlan entity.
	// It exists in this package in order to avoid circular dependency with the "lessonplan" package.
	LessonPlansInverseTable = "lesson_plans"
	// LessonPlanGradesTable is the table that holds the lesson_plan_grades relation/edge.
	LessonPlanGradesTable = "lesson_plan_grades"
	// LessonPlanGradesInverseTable is the table name for the LessonPlanGrade entity.
	// It exists in this package in order to avoid circular dependency with the "lessonplangrade" package.
	LessonPlanGradesInverseTable = "lesson_plan_grades"
	// LessonPlanGradesColumn is the table column denoting the lesson_plan_grades relation/edge.
	LessonPlanGradesColumn = "grade_id"
)

// Columns holds all SQL columns for grade fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCodeNumber,
	FieldCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "grades"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"lesson_schedule_grades",
}

var (
	// LessonPlansPrimaryKey and LessonPlansColumn2 are the table columns denoting the
	// primary key for the lesson_plans relation (M2M).
	LessonPlansPrimaryKey = []string{"lesson_plan_id", "grade_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the Grade queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCodeNumber orders the results by the code_number field.
func ByCodeNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodeNumber, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByLessonPlansCount orders the results by lesson_plans count.
func ByLessonPlansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonPlansStep(), opts...)
	}
}

// ByLessonPlans orders the results by lesson_plans terms.
func ByLessonPlans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonPlansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLessonPlanGradesCount orders the results by lesson_plan_grades count.
func ByLessonPlanGradesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonPlanGradesStep(), opts...)
	}
}

// ByLessonPlanGrades orders the results by lesson_plan_grades terms.
func ByLessonPlanGrades(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonPlanGradesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLessonPlansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonPlansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LessonPlansTable, LessonPlansPrimaryKey...),
	)
}
func newLessonPlanGradesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonPlanGradesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LessonPlanGradesTable, LessonPlanGradesColumn),
	)
}
