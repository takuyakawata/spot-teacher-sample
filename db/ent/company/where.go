// Code generated by ent, DO NOT EDIT.

package company

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// Prefecture applies equality check predicate on the "prefecture" field. It's identical to PrefectureEQ.
func Prefecture(v int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPrefecture, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCity, v))
}

// Street applies equality check predicate on the "street" field. It's identical to StreetEQ.
func Street(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldStreet, v))
}

// PostCode applies equality check predicate on the "post_code" field. It's identical to PostCodeEQ.
func PostCode(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPostCode, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPhoneNumber, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldName, v))
}

// PrefectureEQ applies the EQ predicate on the "prefecture" field.
func PrefectureEQ(v int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPrefecture, v))
}

// PrefectureNEQ applies the NEQ predicate on the "prefecture" field.
func PrefectureNEQ(v int) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldPrefecture, v))
}

// PrefectureIn applies the In predicate on the "prefecture" field.
func PrefectureIn(vs ...int) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldPrefecture, vs...))
}

// PrefectureNotIn applies the NotIn predicate on the "prefecture" field.
func PrefectureNotIn(vs ...int) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldPrefecture, vs...))
}

// PrefectureGT applies the GT predicate on the "prefecture" field.
func PrefectureGT(v int) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldPrefecture, v))
}

// PrefectureGTE applies the GTE predicate on the "prefecture" field.
func PrefectureGTE(v int) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldPrefecture, v))
}

// PrefectureLT applies the LT predicate on the "prefecture" field.
func PrefectureLT(v int) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldPrefecture, v))
}

// PrefectureLTE applies the LTE predicate on the "prefecture" field.
func PrefectureLTE(v int) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldPrefecture, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldCity, v))
}

// StreetEQ applies the EQ predicate on the "street" field.
func StreetEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldStreet, v))
}

// StreetNEQ applies the NEQ predicate on the "street" field.
func StreetNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldStreet, v))
}

// StreetIn applies the In predicate on the "street" field.
func StreetIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldStreet, vs...))
}

// StreetNotIn applies the NotIn predicate on the "street" field.
func StreetNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldStreet, vs...))
}

// StreetGT applies the GT predicate on the "street" field.
func StreetGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldStreet, v))
}

// StreetGTE applies the GTE predicate on the "street" field.
func StreetGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldStreet, v))
}

// StreetLT applies the LT predicate on the "street" field.
func StreetLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldStreet, v))
}

// StreetLTE applies the LTE predicate on the "street" field.
func StreetLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldStreet, v))
}

// StreetContains applies the Contains predicate on the "street" field.
func StreetContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldStreet, v))
}

// StreetHasPrefix applies the HasPrefix predicate on the "street" field.
func StreetHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldStreet, v))
}

// StreetHasSuffix applies the HasSuffix predicate on the "street" field.
func StreetHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldStreet, v))
}

// StreetIsNil applies the IsNil predicate on the "street" field.
func StreetIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldStreet))
}

// StreetNotNil applies the NotNil predicate on the "street" field.
func StreetNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldStreet))
}

// StreetEqualFold applies the EqualFold predicate on the "street" field.
func StreetEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldStreet, v))
}

// StreetContainsFold applies the ContainsFold predicate on the "street" field.
func StreetContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldStreet, v))
}

// PostCodeEQ applies the EQ predicate on the "post_code" field.
func PostCodeEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPostCode, v))
}

// PostCodeNEQ applies the NEQ predicate on the "post_code" field.
func PostCodeNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldPostCode, v))
}

// PostCodeIn applies the In predicate on the "post_code" field.
func PostCodeIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldPostCode, vs...))
}

// PostCodeNotIn applies the NotIn predicate on the "post_code" field.
func PostCodeNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldPostCode, vs...))
}

// PostCodeGT applies the GT predicate on the "post_code" field.
func PostCodeGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldPostCode, v))
}

// PostCodeGTE applies the GTE predicate on the "post_code" field.
func PostCodeGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldPostCode, v))
}

// PostCodeLT applies the LT predicate on the "post_code" field.
func PostCodeLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldPostCode, v))
}

// PostCodeLTE applies the LTE predicate on the "post_code" field.
func PostCodeLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldPostCode, v))
}

// PostCodeContains applies the Contains predicate on the "post_code" field.
func PostCodeContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldPostCode, v))
}

// PostCodeHasPrefix applies the HasPrefix predicate on the "post_code" field.
func PostCodeHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldPostCode, v))
}

// PostCodeHasSuffix applies the HasSuffix predicate on the "post_code" field.
func PostCodeHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldPostCode, v))
}

// PostCodeEqualFold applies the EqualFold predicate on the "post_code" field.
func PostCodeEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldPostCode, v))
}

// PostCodeContainsFold applies the ContainsFold predicate on the "post_code" field.
func PostCodeContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldPostCode, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldURL, v))
}

// HasLessonPlans applies the HasEdge predicate on the "lesson_plans" edge.
func HasLessonPlans() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LessonPlansTable, LessonPlansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonPlansWith applies the HasEdge predicate on the "lesson_plans" edge with a given conditions (other predicates).
func HasLessonPlansWith(preds ...predicate.LessonPlan) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newLessonPlansStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.User) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Company) predicate.Company {
	return predicate.Company(sql.NotPredicates(p))
}
