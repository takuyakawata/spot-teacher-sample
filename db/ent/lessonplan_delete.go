// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonPlanDelete is the builder for deleting a LessonPlan entity.
type LessonPlanDelete struct {
	config
	hooks    []Hook
	mutation *LessonPlanMutation
}

// Where appends a list predicates to the LessonPlanDelete builder.
func (lpd *LessonPlanDelete) Where(ps ...predicate.LessonPlan) *LessonPlanDelete {
	lpd.mutation.Where(ps...)
	return lpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lpd *LessonPlanDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lpd.sqlExec, lpd.mutation, lpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lpd *LessonPlanDelete) ExecX(ctx context.Context) int {
	n, err := lpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lpd *LessonPlanDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lessonplan.Table, sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt))
	if ps := lpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lpd.mutation.done = true
	return affected, err
}

// LessonPlanDeleteOne is the builder for deleting a single LessonPlan entity.
type LessonPlanDeleteOne struct {
	lpd *LessonPlanDelete
}

// Where appends a list predicates to the LessonPlanDelete builder.
func (lpdo *LessonPlanDeleteOne) Where(ps ...predicate.LessonPlan) *LessonPlanDeleteOne {
	lpdo.lpd.mutation.Where(ps...)
	return lpdo
}

// Exec executes the deletion query.
func (lpdo *LessonPlanDeleteOne) Exec(ctx context.Context) error {
	n, err := lpdo.lpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lessonplan.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lpdo *LessonPlanDeleteOne) ExecX(ctx context.Context) {
	if err := lpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
