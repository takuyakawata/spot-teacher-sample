// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/company"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableName(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetPrefecture sets the "prefecture" field.
func (cu *CompanyUpdate) SetPrefecture(i int) *CompanyUpdate {
	cu.mutation.ResetPrefecture()
	cu.mutation.SetPrefecture(i)
	return cu
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillablePrefecture(i *int) *CompanyUpdate {
	if i != nil {
		cu.SetPrefecture(*i)
	}
	return cu
}

// AddPrefecture adds i to the "prefecture" field.
func (cu *CompanyUpdate) AddPrefecture(i int) *CompanyUpdate {
	cu.mutation.AddPrefecture(i)
	return cu
}

// SetCity sets the "city" field.
func (cu *CompanyUpdate) SetCity(s string) *CompanyUpdate {
	cu.mutation.SetCity(s)
	return cu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCity(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetCity(*s)
	}
	return cu
}

// SetStreet sets the "street" field.
func (cu *CompanyUpdate) SetStreet(s string) *CompanyUpdate {
	cu.mutation.SetStreet(s)
	return cu
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableStreet(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetStreet(*s)
	}
	return cu
}

// ClearStreet clears the value of the "street" field.
func (cu *CompanyUpdate) ClearStreet() *CompanyUpdate {
	cu.mutation.ClearStreet()
	return cu
}

// SetPostCode sets the "post_code" field.
func (cu *CompanyUpdate) SetPostCode(s string) *CompanyUpdate {
	cu.mutation.SetPostCode(s)
	return cu
}

// SetNillablePostCode sets the "post_code" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillablePostCode(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetPostCode(*s)
	}
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *CompanyUpdate) SetPhoneNumber(s string) *CompanyUpdate {
	cu.mutation.SetPhoneNumber(s)
	return cu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillablePhoneNumber(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetPhoneNumber(*s)
	}
	return cu
}

// SetURL sets the "url" field.
func (cu *CompanyUpdate) SetURL(s string) *CompanyUpdate {
	cu.mutation.SetURL(s)
	return cu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableURL(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetURL(*s)
	}
	return cu
}

// ClearURL clears the value of the "url" field.
func (cu *CompanyUpdate) ClearURL() *CompanyUpdate {
	cu.mutation.ClearURL()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CompanyUpdate) SetUpdatedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// AddLessonPlanIDs adds the "lesson_plans" edge to the LessonPlan entity by IDs.
func (cu *CompanyUpdate) AddLessonPlanIDs(ids ...int64) *CompanyUpdate {
	cu.mutation.AddLessonPlanIDs(ids...)
	return cu
}

// AddLessonPlans adds the "lesson_plans" edges to the LessonPlan entity.
func (cu *CompanyUpdate) AddLessonPlans(l ...*LessonPlan) *CompanyUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLessonPlanIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (cu *CompanyUpdate) AddMemberIDs(ids ...int64) *CompanyUpdate {
	cu.mutation.AddMemberIDs(ids...)
	return cu
}

// AddMembers adds the "members" edges to the User entity.
func (cu *CompanyUpdate) AddMembers(u ...*User) *CompanyUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddMemberIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearLessonPlans clears all "lesson_plans" edges to the LessonPlan entity.
func (cu *CompanyUpdate) ClearLessonPlans() *CompanyUpdate {
	cu.mutation.ClearLessonPlans()
	return cu
}

// RemoveLessonPlanIDs removes the "lesson_plans" edge to LessonPlan entities by IDs.
func (cu *CompanyUpdate) RemoveLessonPlanIDs(ids ...int64) *CompanyUpdate {
	cu.mutation.RemoveLessonPlanIDs(ids...)
	return cu
}

// RemoveLessonPlans removes "lesson_plans" edges to LessonPlan entities.
func (cu *CompanyUpdate) RemoveLessonPlans(l ...*LessonPlan) *CompanyUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLessonPlanIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (cu *CompanyUpdate) ClearMembers() *CompanyUpdate {
	cu.mutation.ClearMembers()
	return cu
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (cu *CompanyUpdate) RemoveMemberIDs(ids ...int64) *CompanyUpdate {
	cu.mutation.RemoveMemberIDs(ids...)
	return cu
}

// RemoveMembers removes "members" edges to User entities.
func (cu *CompanyUpdate) RemoveMembers(u ...*User) *CompanyUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompanyUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Prefecture(); ok {
		if err := company.PrefectureValidator(v); err != nil {
			return &ValidationError{Name: "prefecture", err: fmt.Errorf(`ent: validator failed for field "Company.prefecture": %w`, err)}
		}
	}
	if v, ok := cu.mutation.City(); ok {
		if err := company.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Company.city": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PostCode(); ok {
		if err := company.PostCodeValidator(v); err != nil {
			return &ValidationError{Name: "post_code", err: fmt.Errorf(`ent: validator failed for field "Company.post_code": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PhoneNumber(); ok {
		if err := company.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Company.phone_number": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Prefecture(); ok {
		_spec.SetField(company.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPrefecture(); ok {
		_spec.AddField(company.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := cu.mutation.City(); ok {
		_spec.SetField(company.FieldCity, field.TypeString, value)
	}
	if value, ok := cu.mutation.Street(); ok {
		_spec.SetField(company.FieldStreet, field.TypeString, value)
	}
	if cu.mutation.StreetCleared() {
		_spec.ClearField(company.FieldStreet, field.TypeString)
	}
	if value, ok := cu.mutation.PostCode(); ok {
		_spec.SetField(company.FieldPostCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(company.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.URL(); ok {
		_spec.SetField(company.FieldURL, field.TypeString, value)
	}
	if cu.mutation.URLCleared() {
		_spec.ClearField(company.FieldURL, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.LessonPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LessonPlansTable,
			Columns: []string{company.LessonPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLessonPlansIDs(); len(nodes) > 0 && !cu.mutation.LessonPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LessonPlansTable,
			Columns: []string{company.LessonPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LessonPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LessonPlansTable,
			Columns: []string{company.LessonPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MembersTable,
			Columns: []string{company.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !cu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MembersTable,
			Columns: []string{company.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MembersTable,
			Columns: []string{company.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableName(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetPrefecture sets the "prefecture" field.
func (cuo *CompanyUpdateOne) SetPrefecture(i int) *CompanyUpdateOne {
	cuo.mutation.ResetPrefecture()
	cuo.mutation.SetPrefecture(i)
	return cuo
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillablePrefecture(i *int) *CompanyUpdateOne {
	if i != nil {
		cuo.SetPrefecture(*i)
	}
	return cuo
}

// AddPrefecture adds i to the "prefecture" field.
func (cuo *CompanyUpdateOne) AddPrefecture(i int) *CompanyUpdateOne {
	cuo.mutation.AddPrefecture(i)
	return cuo
}

// SetCity sets the "city" field.
func (cuo *CompanyUpdateOne) SetCity(s string) *CompanyUpdateOne {
	cuo.mutation.SetCity(s)
	return cuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCity(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetCity(*s)
	}
	return cuo
}

// SetStreet sets the "street" field.
func (cuo *CompanyUpdateOne) SetStreet(s string) *CompanyUpdateOne {
	cuo.mutation.SetStreet(s)
	return cuo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableStreet(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetStreet(*s)
	}
	return cuo
}

// ClearStreet clears the value of the "street" field.
func (cuo *CompanyUpdateOne) ClearStreet() *CompanyUpdateOne {
	cuo.mutation.ClearStreet()
	return cuo
}

// SetPostCode sets the "post_code" field.
func (cuo *CompanyUpdateOne) SetPostCode(s string) *CompanyUpdateOne {
	cuo.mutation.SetPostCode(s)
	return cuo
}

// SetNillablePostCode sets the "post_code" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillablePostCode(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetPostCode(*s)
	}
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *CompanyUpdateOne) SetPhoneNumber(s string) *CompanyUpdateOne {
	cuo.mutation.SetPhoneNumber(s)
	return cuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillablePhoneNumber(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetPhoneNumber(*s)
	}
	return cuo
}

// SetURL sets the "url" field.
func (cuo *CompanyUpdateOne) SetURL(s string) *CompanyUpdateOne {
	cuo.mutation.SetURL(s)
	return cuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableURL(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetURL(*s)
	}
	return cuo
}

// ClearURL clears the value of the "url" field.
func (cuo *CompanyUpdateOne) ClearURL() *CompanyUpdateOne {
	cuo.mutation.ClearURL()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CompanyUpdateOne) SetUpdatedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// AddLessonPlanIDs adds the "lesson_plans" edge to the LessonPlan entity by IDs.
func (cuo *CompanyUpdateOne) AddLessonPlanIDs(ids ...int64) *CompanyUpdateOne {
	cuo.mutation.AddLessonPlanIDs(ids...)
	return cuo
}

// AddLessonPlans adds the "lesson_plans" edges to the LessonPlan entity.
func (cuo *CompanyUpdateOne) AddLessonPlans(l ...*LessonPlan) *CompanyUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLessonPlanIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (cuo *CompanyUpdateOne) AddMemberIDs(ids ...int64) *CompanyUpdateOne {
	cuo.mutation.AddMemberIDs(ids...)
	return cuo
}

// AddMembers adds the "members" edges to the User entity.
func (cuo *CompanyUpdateOne) AddMembers(u ...*User) *CompanyUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddMemberIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearLessonPlans clears all "lesson_plans" edges to the LessonPlan entity.
func (cuo *CompanyUpdateOne) ClearLessonPlans() *CompanyUpdateOne {
	cuo.mutation.ClearLessonPlans()
	return cuo
}

// RemoveLessonPlanIDs removes the "lesson_plans" edge to LessonPlan entities by IDs.
func (cuo *CompanyUpdateOne) RemoveLessonPlanIDs(ids ...int64) *CompanyUpdateOne {
	cuo.mutation.RemoveLessonPlanIDs(ids...)
	return cuo
}

// RemoveLessonPlans removes "lesson_plans" edges to LessonPlan entities.
func (cuo *CompanyUpdateOne) RemoveLessonPlans(l ...*LessonPlan) *CompanyUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLessonPlanIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (cuo *CompanyUpdateOne) ClearMembers() *CompanyUpdateOne {
	cuo.mutation.ClearMembers()
	return cuo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (cuo *CompanyUpdateOne) RemoveMemberIDs(ids ...int64) *CompanyUpdateOne {
	cuo.mutation.RemoveMemberIDs(ids...)
	return cuo
}

// RemoveMembers removes "members" edges to User entities.
func (cuo *CompanyUpdateOne) RemoveMembers(u ...*User) *CompanyUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompanyUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Prefecture(); ok {
		if err := company.PrefectureValidator(v); err != nil {
			return &ValidationError{Name: "prefecture", err: fmt.Errorf(`ent: validator failed for field "Company.prefecture": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.City(); ok {
		if err := company.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Company.city": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PostCode(); ok {
		if err := company.PostCodeValidator(v); err != nil {
			return &ValidationError{Name: "post_code", err: fmt.Errorf(`ent: validator failed for field "Company.post_code": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PhoneNumber(); ok {
		if err := company.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Company.phone_number": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Prefecture(); ok {
		_spec.SetField(company.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPrefecture(); ok {
		_spec.AddField(company.FieldPrefecture, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.City(); ok {
		_spec.SetField(company.FieldCity, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Street(); ok {
		_spec.SetField(company.FieldStreet, field.TypeString, value)
	}
	if cuo.mutation.StreetCleared() {
		_spec.ClearField(company.FieldStreet, field.TypeString)
	}
	if value, ok := cuo.mutation.PostCode(); ok {
		_spec.SetField(company.FieldPostCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(company.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.URL(); ok {
		_spec.SetField(company.FieldURL, field.TypeString, value)
	}
	if cuo.mutation.URLCleared() {
		_spec.ClearField(company.FieldURL, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.LessonPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LessonPlansTable,
			Columns: []string{company.LessonPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLessonPlansIDs(); len(nodes) > 0 && !cuo.mutation.LessonPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LessonPlansTable,
			Columns: []string{company.LessonPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LessonPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LessonPlansTable,
			Columns: []string{company.LessonPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MembersTable,
			Columns: []string{company.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !cuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MembersTable,
			Columns: []string{company.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MembersTable,
			Columns: []string{company.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
