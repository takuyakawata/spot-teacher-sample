// Code generated by ent, DO NOT EDIT.

package lessonplansubject

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldUpdatedAt, v))
}

// LessonPlanID applies equality check predicate on the "lesson_plan_id" field. It's identical to LessonPlanIDEQ.
func LessonPlanID(v int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldLessonPlanID, v))
}

// SubjectID applies equality check predicate on the "subject_id" field. It's identical to SubjectIDEQ.
func SubjectID(v int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldSubjectID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldLTE(FieldUpdatedAt, v))
}

// LessonPlanIDEQ applies the EQ predicate on the "lesson_plan_id" field.
func LessonPlanIDEQ(v int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldLessonPlanID, v))
}

// LessonPlanIDNEQ applies the NEQ predicate on the "lesson_plan_id" field.
func LessonPlanIDNEQ(v int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNEQ(FieldLessonPlanID, v))
}

// LessonPlanIDIn applies the In predicate on the "lesson_plan_id" field.
func LessonPlanIDIn(vs ...int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldIn(FieldLessonPlanID, vs...))
}

// LessonPlanIDNotIn applies the NotIn predicate on the "lesson_plan_id" field.
func LessonPlanIDNotIn(vs ...int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNotIn(FieldLessonPlanID, vs...))
}

// SubjectIDEQ applies the EQ predicate on the "subject_id" field.
func SubjectIDEQ(v int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldEQ(FieldSubjectID, v))
}

// SubjectIDNEQ applies the NEQ predicate on the "subject_id" field.
func SubjectIDNEQ(v int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNEQ(FieldSubjectID, v))
}

// SubjectIDIn applies the In predicate on the "subject_id" field.
func SubjectIDIn(vs ...int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldIn(FieldSubjectID, vs...))
}

// SubjectIDNotIn applies the NotIn predicate on the "subject_id" field.
func SubjectIDNotIn(vs ...int64) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.FieldNotIn(FieldSubjectID, vs...))
}

// HasLessonPlan applies the HasEdge predicate on the "lesson_plan" edge.
func HasLessonPlan() predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LessonPlanTable, LessonPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonPlanWith applies the HasEdge predicate on the "lesson_plan" edge with a given conditions (other predicates).
func HasLessonPlanWith(preds ...predicate.LessonPlan) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(func(s *sql.Selector) {
		step := newLessonPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubject applies the HasEdge predicate on the "subject" edge.
func HasSubject() predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Subject) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(func(s *sql.Selector) {
		step := newSubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LessonPlanSubject) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LessonPlanSubject) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LessonPlanSubject) predicate.LessonPlanSubject {
	return predicate.LessonPlanSubject(sql.NotPredicates(p))
}
