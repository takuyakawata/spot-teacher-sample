// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplaneducationcategory"
)

// LessonPlanEducationCategoryCreate is the builder for creating a LessonPlanEducationCategory entity.
type LessonPlanEducationCategoryCreate struct {
	config
	mutation *LessonPlanEducationCategoryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lpecc *LessonPlanEducationCategoryCreate) SetCreatedAt(t time.Time) *LessonPlanEducationCategoryCreate {
	lpecc.mutation.SetCreatedAt(t)
	return lpecc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpecc *LessonPlanEducationCategoryCreate) SetNillableCreatedAt(t *time.Time) *LessonPlanEducationCategoryCreate {
	if t != nil {
		lpecc.SetCreatedAt(*t)
	}
	return lpecc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpecc *LessonPlanEducationCategoryCreate) SetUpdatedAt(t time.Time) *LessonPlanEducationCategoryCreate {
	lpecc.mutation.SetUpdatedAt(t)
	return lpecc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpecc *LessonPlanEducationCategoryCreate) SetNillableUpdatedAt(t *time.Time) *LessonPlanEducationCategoryCreate {
	if t != nil {
		lpecc.SetUpdatedAt(*t)
	}
	return lpecc
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpecc *LessonPlanEducationCategoryCreate) SetLessonPlanID(i int64) *LessonPlanEducationCategoryCreate {
	lpecc.mutation.SetLessonPlanID(i)
	return lpecc
}

// SetEducationCategoryID sets the "education_category_id" field.
func (lpecc *LessonPlanEducationCategoryCreate) SetEducationCategoryID(i int64) *LessonPlanEducationCategoryCreate {
	lpecc.mutation.SetEducationCategoryID(i)
	return lpecc
}

// SetID sets the "id" field.
func (lpecc *LessonPlanEducationCategoryCreate) SetID(i int64) *LessonPlanEducationCategoryCreate {
	lpecc.mutation.SetID(i)
	return lpecc
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpecc *LessonPlanEducationCategoryCreate) SetLessonPlan(l *LessonPlan) *LessonPlanEducationCategoryCreate {
	return lpecc.SetLessonPlanID(l.ID)
}

// SetEducationCategory sets the "education_category" edge to the EducationCategory entity.
func (lpecc *LessonPlanEducationCategoryCreate) SetEducationCategory(e *EducationCategory) *LessonPlanEducationCategoryCreate {
	return lpecc.SetEducationCategoryID(e.ID)
}

// Mutation returns the LessonPlanEducationCategoryMutation object of the builder.
func (lpecc *LessonPlanEducationCategoryCreate) Mutation() *LessonPlanEducationCategoryMutation {
	return lpecc.mutation
}

// Save creates the LessonPlanEducationCategory in the database.
func (lpecc *LessonPlanEducationCategoryCreate) Save(ctx context.Context) (*LessonPlanEducationCategory, error) {
	lpecc.defaults()
	return withHooks(ctx, lpecc.sqlSave, lpecc.mutation, lpecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpecc *LessonPlanEducationCategoryCreate) SaveX(ctx context.Context) *LessonPlanEducationCategory {
	v, err := lpecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpecc *LessonPlanEducationCategoryCreate) Exec(ctx context.Context) error {
	_, err := lpecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpecc *LessonPlanEducationCategoryCreate) ExecX(ctx context.Context) {
	if err := lpecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpecc *LessonPlanEducationCategoryCreate) defaults() {
	if _, ok := lpecc.mutation.CreatedAt(); !ok {
		v := lessonplaneducationcategory.DefaultCreatedAt()
		lpecc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpecc.mutation.UpdatedAt(); !ok {
		v := lessonplaneducationcategory.DefaultUpdatedAt()
		lpecc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpecc *LessonPlanEducationCategoryCreate) check() error {
	if _, ok := lpecc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonPlanEducationCategory.created_at"`)}
	}
	if _, ok := lpecc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonPlanEducationCategory.updated_at"`)}
	}
	if _, ok := lpecc.mutation.LessonPlanID(); !ok {
		return &ValidationError{Name: "lesson_plan_id", err: errors.New(`ent: missing required field "LessonPlanEducationCategory.lesson_plan_id"`)}
	}
	if _, ok := lpecc.mutation.EducationCategoryID(); !ok {
		return &ValidationError{Name: "education_category_id", err: errors.New(`ent: missing required field "LessonPlanEducationCategory.education_category_id"`)}
	}
	if v, ok := lpecc.mutation.ID(); ok {
		if err := lessonplaneducationcategory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LessonPlanEducationCategory.id": %w`, err)}
		}
	}
	if len(lpecc.mutation.LessonPlanIDs()) == 0 {
		return &ValidationError{Name: "lesson_plan", err: errors.New(`ent: missing required edge "LessonPlanEducationCategory.lesson_plan"`)}
	}
	if len(lpecc.mutation.EducationCategoryIDs()) == 0 {
		return &ValidationError{Name: "education_category", err: errors.New(`ent: missing required edge "LessonPlanEducationCategory.education_category"`)}
	}
	return nil
}

func (lpecc *LessonPlanEducationCategoryCreate) sqlSave(ctx context.Context) (*LessonPlanEducationCategory, error) {
	if err := lpecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lpecc.mutation.id = &_node.ID
	lpecc.mutation.done = true
	return _node, nil
}

func (lpecc *LessonPlanEducationCategoryCreate) createSpec() (*LessonPlanEducationCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonPlanEducationCategory{config: lpecc.config}
		_spec = sqlgraph.NewCreateSpec(lessonplaneducationcategory.Table, sqlgraph.NewFieldSpec(lessonplaneducationcategory.FieldID, field.TypeInt64))
	)
	if id, ok := lpecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lpecc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonplaneducationcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpecc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplaneducationcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lpecc.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.LessonPlanTable,
			Columns: []string{lessonplaneducationcategory.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonPlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpecc.mutation.EducationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplaneducationcategory.EducationCategoryTable,
			Columns: []string{lessonplaneducationcategory.EducationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationcategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EducationCategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonPlanEducationCategoryCreateBulk is the builder for creating many LessonPlanEducationCategory entities in bulk.
type LessonPlanEducationCategoryCreateBulk struct {
	config
	err      error
	builders []*LessonPlanEducationCategoryCreate
}

// Save creates the LessonPlanEducationCategory entities in the database.
func (lpeccb *LessonPlanEducationCategoryCreateBulk) Save(ctx context.Context) ([]*LessonPlanEducationCategory, error) {
	if lpeccb.err != nil {
		return nil, lpeccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpeccb.builders))
	nodes := make([]*LessonPlanEducationCategory, len(lpeccb.builders))
	mutators := make([]Mutator, len(lpeccb.builders))
	for i := range lpeccb.builders {
		func(i int, root context.Context) {
			builder := lpeccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonPlanEducationCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpeccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpeccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpeccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpeccb *LessonPlanEducationCategoryCreateBulk) SaveX(ctx context.Context) []*LessonPlanEducationCategory {
	v, err := lpeccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpeccb *LessonPlanEducationCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := lpeccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpeccb *LessonPlanEducationCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := lpeccb.Exec(ctx); err != nil {
		panic(err)
	}
}
