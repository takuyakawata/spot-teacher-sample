// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplanuploadfile"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/uploadfile"
)

// LessonPlanUploadFileCreate is the builder for creating a LessonPlanUploadFile entity.
type LessonPlanUploadFileCreate struct {
	config
	mutation *LessonPlanUploadFileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lpufc *LessonPlanUploadFileCreate) SetCreatedAt(t time.Time) *LessonPlanUploadFileCreate {
	lpufc.mutation.SetCreatedAt(t)
	return lpufc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpufc *LessonPlanUploadFileCreate) SetNillableCreatedAt(t *time.Time) *LessonPlanUploadFileCreate {
	if t != nil {
		lpufc.SetCreatedAt(*t)
	}
	return lpufc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpufc *LessonPlanUploadFileCreate) SetUpdatedAt(t time.Time) *LessonPlanUploadFileCreate {
	lpufc.mutation.SetUpdatedAt(t)
	return lpufc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpufc *LessonPlanUploadFileCreate) SetNillableUpdatedAt(t *time.Time) *LessonPlanUploadFileCreate {
	if t != nil {
		lpufc.SetUpdatedAt(*t)
	}
	return lpufc
}

// SetLessonPlanID sets the "lesson_plan_id" field.
func (lpufc *LessonPlanUploadFileCreate) SetLessonPlanID(i int64) *LessonPlanUploadFileCreate {
	lpufc.mutation.SetLessonPlanID(i)
	return lpufc
}

// SetUploadFileID sets the "upload_file_id" field.
func (lpufc *LessonPlanUploadFileCreate) SetUploadFileID(i int64) *LessonPlanUploadFileCreate {
	lpufc.mutation.SetUploadFileID(i)
	return lpufc
}

// SetID sets the "id" field.
func (lpufc *LessonPlanUploadFileCreate) SetID(i int64) *LessonPlanUploadFileCreate {
	lpufc.mutation.SetID(i)
	return lpufc
}

// SetLessonPlan sets the "lesson_plan" edge to the LessonPlan entity.
func (lpufc *LessonPlanUploadFileCreate) SetLessonPlan(l *LessonPlan) *LessonPlanUploadFileCreate {
	return lpufc.SetLessonPlanID(l.ID)
}

// SetUploadFile sets the "upload_file" edge to the UploadFile entity.
func (lpufc *LessonPlanUploadFileCreate) SetUploadFile(u *UploadFile) *LessonPlanUploadFileCreate {
	return lpufc.SetUploadFileID(u.ID)
}

// Mutation returns the LessonPlanUploadFileMutation object of the builder.
func (lpufc *LessonPlanUploadFileCreate) Mutation() *LessonPlanUploadFileMutation {
	return lpufc.mutation
}

// Save creates the LessonPlanUploadFile in the database.
func (lpufc *LessonPlanUploadFileCreate) Save(ctx context.Context) (*LessonPlanUploadFile, error) {
	lpufc.defaults()
	return withHooks(ctx, lpufc.sqlSave, lpufc.mutation, lpufc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpufc *LessonPlanUploadFileCreate) SaveX(ctx context.Context) *LessonPlanUploadFile {
	v, err := lpufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpufc *LessonPlanUploadFileCreate) Exec(ctx context.Context) error {
	_, err := lpufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpufc *LessonPlanUploadFileCreate) ExecX(ctx context.Context) {
	if err := lpufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpufc *LessonPlanUploadFileCreate) defaults() {
	if _, ok := lpufc.mutation.CreatedAt(); !ok {
		v := lessonplanuploadfile.DefaultCreatedAt()
		lpufc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpufc.mutation.UpdatedAt(); !ok {
		v := lessonplanuploadfile.DefaultUpdatedAt()
		lpufc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpufc *LessonPlanUploadFileCreate) check() error {
	if _, ok := lpufc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LessonPlanUploadFile.created_at"`)}
	}
	if _, ok := lpufc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LessonPlanUploadFile.updated_at"`)}
	}
	if _, ok := lpufc.mutation.LessonPlanID(); !ok {
		return &ValidationError{Name: "lesson_plan_id", err: errors.New(`ent: missing required field "LessonPlanUploadFile.lesson_plan_id"`)}
	}
	if _, ok := lpufc.mutation.UploadFileID(); !ok {
		return &ValidationError{Name: "upload_file_id", err: errors.New(`ent: missing required field "LessonPlanUploadFile.upload_file_id"`)}
	}
	if v, ok := lpufc.mutation.ID(); ok {
		if err := lessonplanuploadfile.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LessonPlanUploadFile.id": %w`, err)}
		}
	}
	if len(lpufc.mutation.LessonPlanIDs()) == 0 {
		return &ValidationError{Name: "lesson_plan", err: errors.New(`ent: missing required edge "LessonPlanUploadFile.lesson_plan"`)}
	}
	if len(lpufc.mutation.UploadFileIDs()) == 0 {
		return &ValidationError{Name: "upload_file", err: errors.New(`ent: missing required edge "LessonPlanUploadFile.upload_file"`)}
	}
	return nil
}

func (lpufc *LessonPlanUploadFileCreate) sqlSave(ctx context.Context) (*LessonPlanUploadFile, error) {
	if err := lpufc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lpufc.mutation.id = &_node.ID
	lpufc.mutation.done = true
	return _node, nil
}

func (lpufc *LessonPlanUploadFileCreate) createSpec() (*LessonPlanUploadFile, *sqlgraph.CreateSpec) {
	var (
		_node = &LessonPlanUploadFile{config: lpufc.config}
		_spec = sqlgraph.NewCreateSpec(lessonplanuploadfile.Table, sqlgraph.NewFieldSpec(lessonplanuploadfile.FieldID, field.TypeInt64))
	)
	if id, ok := lpufc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lpufc.mutation.CreatedAt(); ok {
		_spec.SetField(lessonplanuploadfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpufc.mutation.UpdatedAt(); ok {
		_spec.SetField(lessonplanuploadfile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lpufc.mutation.LessonPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.LessonPlanTable,
			Columns: []string{lessonplanuploadfile.LessonPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lessonplan.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonPlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpufc.mutation.UploadFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lessonplanuploadfile.UploadFileTable,
			Columns: []string{lessonplanuploadfile.UploadFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadfile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UploadFileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonPlanUploadFileCreateBulk is the builder for creating many LessonPlanUploadFile entities in bulk.
type LessonPlanUploadFileCreateBulk struct {
	config
	err      error
	builders []*LessonPlanUploadFileCreate
}

// Save creates the LessonPlanUploadFile entities in the database.
func (lpufcb *LessonPlanUploadFileCreateBulk) Save(ctx context.Context) ([]*LessonPlanUploadFile, error) {
	if lpufcb.err != nil {
		return nil, lpufcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpufcb.builders))
	nodes := make([]*LessonPlanUploadFile, len(lpufcb.builders))
	mutators := make([]Mutator, len(lpufcb.builders))
	for i := range lpufcb.builders {
		func(i int, root context.Context) {
			builder := lpufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonPlanUploadFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpufcb *LessonPlanUploadFileCreateBulk) SaveX(ctx context.Context) []*LessonPlanUploadFile {
	v, err := lpufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpufcb *LessonPlanUploadFileCreateBulk) Exec(ctx context.Context) error {
	_, err := lpufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpufcb *LessonPlanUploadFileCreateBulk) ExecX(ctx context.Context) {
	if err := lpufcb.Exec(ctx); err != nil {
		panic(err)
	}
}
