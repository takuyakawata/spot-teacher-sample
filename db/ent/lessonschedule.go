// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
)

// LessonSchedule is the model entity for the LessonSchedule schema.
type LessonSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LessonPlanID holds the value of the "lesson_plan_id" field.
	LessonPlanID int64 `json:"lesson_plan_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// LessonType holds the value of the "lesson_type" field.
	LessonType lessonschedule.LessonType `json:"lesson_type,omitempty"`
	// 年間可能実施回数
	AnnualMaxExecutions int `json:"annual_max_executions,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonScheduleQuery when eager-loading is set.
	Edges        LessonScheduleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonScheduleEdges holds the relations/edges for other nodes in the graph.
type LessonScheduleEdges struct {
	// Plan holds the value of the plan edge.
	Plan *LessonPlan `json:"plan,omitempty"`
	// Grades holds the value of the grades edge.
	Grades []*Grade `json:"grades,omitempty"`
	// Subjects holds the value of the subjects edge.
	Subjects []*Subject `json:"subjects,omitempty"`
	// EducationCategories holds the value of the education_categories edge.
	EducationCategories []*EducationCategory `json:"education_categories,omitempty"`
	// LessonReservations holds the value of the lesson_reservations edge.
	LessonReservations []*LessonReservation `json:"lesson_reservations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonScheduleEdges) PlanOrErr() (*LessonPlan, error) {
	if e.Plan != nil {
		return e.Plan, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonplan.Label}
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// GradesOrErr returns the Grades value or an error if the edge
// was not loaded in eager-loading.
func (e LessonScheduleEdges) GradesOrErr() ([]*Grade, error) {
	if e.loadedTypes[1] {
		return e.Grades, nil
	}
	return nil, &NotLoadedError{edge: "grades"}
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e LessonScheduleEdges) SubjectsOrErr() ([]*Subject, error) {
	if e.loadedTypes[2] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// EducationCategoriesOrErr returns the EducationCategories value or an error if the edge
// was not loaded in eager-loading.
func (e LessonScheduleEdges) EducationCategoriesOrErr() ([]*EducationCategory, error) {
	if e.loadedTypes[3] {
		return e.EducationCategories, nil
	}
	return nil, &NotLoadedError{edge: "education_categories"}
}

// LessonReservationsOrErr returns the LessonReservations value or an error if the edge
// was not loaded in eager-loading.
func (e LessonScheduleEdges) LessonReservationsOrErr() ([]*LessonReservation, error) {
	if e.loadedTypes[4] {
		return e.LessonReservations, nil
	}
	return nil, &NotLoadedError{edge: "lesson_reservations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonSchedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonschedule.FieldID, lessonschedule.FieldLessonPlanID, lessonschedule.FieldAnnualMaxExecutions:
			values[i] = new(sql.NullInt64)
		case lessonschedule.FieldTitle, lessonschedule.FieldDescription, lessonschedule.FieldLocation, lessonschedule.FieldLessonType:
			values[i] = new(sql.NullString)
		case lessonschedule.FieldCreatedAt, lessonschedule.FieldUpdatedAt, lessonschedule.FieldStartDate, lessonschedule.FieldEndDate, lessonschedule.FieldStartTime, lessonschedule.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonSchedule fields.
func (ls *LessonSchedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonschedule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ls.ID = int64(value.Int64)
		case lessonschedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ls.CreatedAt = value.Time
			}
		case lessonschedule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ls.UpdatedAt = value.Time
			}
		case lessonschedule.FieldLessonPlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_plan_id", values[i])
			} else if value.Valid {
				ls.LessonPlanID = value.Int64
			}
		case lessonschedule.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ls.Title = value.String
			}
		case lessonschedule.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ls.Description = value.String
			}
		case lessonschedule.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				ls.Location = value.String
			}
		case lessonschedule.FieldLessonType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_type", values[i])
			} else if value.Valid {
				ls.LessonType = lessonschedule.LessonType(value.String)
			}
		case lessonschedule.FieldAnnualMaxExecutions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field annual_max_executions", values[i])
			} else if value.Valid {
				ls.AnnualMaxExecutions = int(value.Int64)
			}
		case lessonschedule.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				ls.StartDate = value.Time
			}
		case lessonschedule.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				ls.EndDate = value.Time
			}
		case lessonschedule.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ls.StartTime = value.Time
			}
		case lessonschedule.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ls.EndTime = value.Time
			}
		default:
			ls.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonSchedule.
// This includes values selected through modifiers, order, etc.
func (ls *LessonSchedule) Value(name string) (ent.Value, error) {
	return ls.selectValues.Get(name)
}

// QueryPlan queries the "plan" edge of the LessonSchedule entity.
func (ls *LessonSchedule) QueryPlan() *LessonPlanQuery {
	return NewLessonScheduleClient(ls.config).QueryPlan(ls)
}

// QueryGrades queries the "grades" edge of the LessonSchedule entity.
func (ls *LessonSchedule) QueryGrades() *GradeQuery {
	return NewLessonScheduleClient(ls.config).QueryGrades(ls)
}

// QuerySubjects queries the "subjects" edge of the LessonSchedule entity.
func (ls *LessonSchedule) QuerySubjects() *SubjectQuery {
	return NewLessonScheduleClient(ls.config).QuerySubjects(ls)
}

// QueryEducationCategories queries the "education_categories" edge of the LessonSchedule entity.
func (ls *LessonSchedule) QueryEducationCategories() *EducationCategoryQuery {
	return NewLessonScheduleClient(ls.config).QueryEducationCategories(ls)
}

// QueryLessonReservations queries the "lesson_reservations" edge of the LessonSchedule entity.
func (ls *LessonSchedule) QueryLessonReservations() *LessonReservationQuery {
	return NewLessonScheduleClient(ls.config).QueryLessonReservations(ls)
}

// Update returns a builder for updating this LessonSchedule.
// Note that you need to call LessonSchedule.Unwrap() before calling this method if this LessonSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (ls *LessonSchedule) Update() *LessonScheduleUpdateOne {
	return NewLessonScheduleClient(ls.config).UpdateOne(ls)
}

// Unwrap unwraps the LessonSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ls *LessonSchedule) Unwrap() *LessonSchedule {
	_tx, ok := ls.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonSchedule is not a transactional entity")
	}
	ls.config.driver = _tx.drv
	return ls
}

// String implements the fmt.Stringer.
func (ls *LessonSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("LessonSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ls.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ls.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ls.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lesson_plan_id=")
	builder.WriteString(fmt.Sprintf("%v", ls.LessonPlanID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ls.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ls.Description)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(ls.Location)
	builder.WriteString(", ")
	builder.WriteString("lesson_type=")
	builder.WriteString(fmt.Sprintf("%v", ls.LessonType))
	builder.WriteString(", ")
	builder.WriteString("annual_max_executions=")
	builder.WriteString(fmt.Sprintf("%v", ls.AnnualMaxExecutions))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(ls.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(ls.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(ls.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(ls.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LessonSchedules is a parsable slice of LessonSchedule.
type LessonSchedules []*LessonSchedule
