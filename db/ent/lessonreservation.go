// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservation"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonschedule"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/school"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/user"
)

// LessonReservation is the model entity for the LessonReservation schema.
type LessonReservation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LessonScheduleID holds the value of the "lesson_schedule_id" field.
	LessonScheduleID int `json:"lesson_schedule_id,omitempty"`
	// SchoolID holds the value of the "school_id" field.
	SchoolID int `json:"school_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ReservationStatus holds the value of the "reservation_status" field.
	ReservationStatus lessonreservation.ReservationStatus `json:"reservation_status,omitempty"`
	// CountStudent holds the value of the "count_student" field.
	CountStudent string `json:"count_student,omitempty"`
	// Graduate holds the value of the "graduate" field.
	Graduate string `json:"graduate,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks *string `json:"remarks,omitempty"`
	// ReservationConfirmAt holds the value of the "reservation_confirm_at" field.
	ReservationConfirmAt *time.Time `json:"reservation_confirm_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonReservationQuery when eager-loading is set.
	Edges        LessonReservationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonReservationEdges holds the relations/edges for other nodes in the graph.
type LessonReservationEdges struct {
	// LessonSchedule holds the value of the lesson_schedule edge.
	LessonSchedule *LessonSchedule `json:"lesson_schedule,omitempty"`
	// School holds the value of the school edge.
	School *School `json:"school,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// LessonReservationPreferredDates holds the value of the lesson_reservation_preferred_dates edge.
	LessonReservationPreferredDates []*LessonReservationPreferredDate `json:"lesson_reservation_preferred_dates,omitempty"`
	// LessonConfirmation holds the value of the lesson_confirmation edge.
	LessonConfirmation []*LessonConfirmation `json:"lesson_confirmation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// LessonScheduleOrErr returns the LessonSchedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonReservationEdges) LessonScheduleOrErr() (*LessonSchedule, error) {
	if e.LessonSchedule != nil {
		return e.LessonSchedule, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lessonschedule.Label}
	}
	return nil, &NotLoadedError{edge: "lesson_schedule"}
}

// SchoolOrErr returns the School value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonReservationEdges) SchoolOrErr() (*School, error) {
	if e.School != nil {
		return e.School, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: school.Label}
	}
	return nil, &NotLoadedError{edge: "school"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonReservationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LessonReservationPreferredDatesOrErr returns the LessonReservationPreferredDates value or an error if the edge
// was not loaded in eager-loading.
func (e LessonReservationEdges) LessonReservationPreferredDatesOrErr() ([]*LessonReservationPreferredDate, error) {
	if e.loadedTypes[3] {
		return e.LessonReservationPreferredDates, nil
	}
	return nil, &NotLoadedError{edge: "lesson_reservation_preferred_dates"}
}

// LessonConfirmationOrErr returns the LessonConfirmation value or an error if the edge
// was not loaded in eager-loading.
func (e LessonReservationEdges) LessonConfirmationOrErr() ([]*LessonConfirmation, error) {
	if e.loadedTypes[4] {
		return e.LessonConfirmation, nil
	}
	return nil, &NotLoadedError{edge: "lesson_confirmation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LessonReservation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lessonreservation.FieldID, lessonreservation.FieldLessonScheduleID, lessonreservation.FieldSchoolID, lessonreservation.FieldUserID:
			values[i] = new(sql.NullInt64)
		case lessonreservation.FieldReservationStatus, lessonreservation.FieldCountStudent, lessonreservation.FieldGraduate, lessonreservation.FieldSubject, lessonreservation.FieldRemarks:
			values[i] = new(sql.NullString)
		case lessonreservation.FieldReservationConfirmAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LessonReservation fields.
func (lr *LessonReservation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lessonreservation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int(value.Int64)
		case lessonreservation.FieldLessonScheduleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_schedule_id", values[i])
			} else if value.Valid {
				lr.LessonScheduleID = int(value.Int64)
			}
		case lessonreservation.FieldSchoolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field school_id", values[i])
			} else if value.Valid {
				lr.SchoolID = int(value.Int64)
			}
		case lessonreservation.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				lr.UserID = int(value.Int64)
			}
		case lessonreservation.FieldReservationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reservation_status", values[i])
			} else if value.Valid {
				lr.ReservationStatus = lessonreservation.ReservationStatus(value.String)
			}
		case lessonreservation.FieldCountStudent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field count_student", values[i])
			} else if value.Valid {
				lr.CountStudent = value.String
			}
		case lessonreservation.FieldGraduate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field graduate", values[i])
			} else if value.Valid {
				lr.Graduate = value.String
			}
		case lessonreservation.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				lr.Subject = value.String
			}
		case lessonreservation.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				lr.Remarks = new(string)
				*lr.Remarks = value.String
			}
		case lessonreservation.FieldReservationConfirmAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reservation_confirm_at", values[i])
			} else if value.Valid {
				lr.ReservationConfirmAt = new(time.Time)
				*lr.ReservationConfirmAt = value.Time
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LessonReservation.
// This includes values selected through modifiers, order, etc.
func (lr *LessonReservation) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// QueryLessonSchedule queries the "lesson_schedule" edge of the LessonReservation entity.
func (lr *LessonReservation) QueryLessonSchedule() *LessonScheduleQuery {
	return NewLessonReservationClient(lr.config).QueryLessonSchedule(lr)
}

// QuerySchool queries the "school" edge of the LessonReservation entity.
func (lr *LessonReservation) QuerySchool() *SchoolQuery {
	return NewLessonReservationClient(lr.config).QuerySchool(lr)
}

// QueryUser queries the "user" edge of the LessonReservation entity.
func (lr *LessonReservation) QueryUser() *UserQuery {
	return NewLessonReservationClient(lr.config).QueryUser(lr)
}

// QueryLessonReservationPreferredDates queries the "lesson_reservation_preferred_dates" edge of the LessonReservation entity.
func (lr *LessonReservation) QueryLessonReservationPreferredDates() *LessonReservationPreferredDateQuery {
	return NewLessonReservationClient(lr.config).QueryLessonReservationPreferredDates(lr)
}

// QueryLessonConfirmation queries the "lesson_confirmation" edge of the LessonReservation entity.
func (lr *LessonReservation) QueryLessonConfirmation() *LessonConfirmationQuery {
	return NewLessonReservationClient(lr.config).QueryLessonConfirmation(lr)
}

// Update returns a builder for updating this LessonReservation.
// Note that you need to call LessonReservation.Unwrap() before calling this method if this LessonReservation
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LessonReservation) Update() *LessonReservationUpdateOne {
	return NewLessonReservationClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LessonReservation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LessonReservation) Unwrap() *LessonReservation {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LessonReservation is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LessonReservation) String() string {
	var builder strings.Builder
	builder.WriteString("LessonReservation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("lesson_schedule_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.LessonScheduleID))
	builder.WriteString(", ")
	builder.WriteString("school_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.SchoolID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.UserID))
	builder.WriteString(", ")
	builder.WriteString("reservation_status=")
	builder.WriteString(fmt.Sprintf("%v", lr.ReservationStatus))
	builder.WriteString(", ")
	builder.WriteString("count_student=")
	builder.WriteString(lr.CountStudent)
	builder.WriteString(", ")
	builder.WriteString("graduate=")
	builder.WriteString(lr.Graduate)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(lr.Subject)
	builder.WriteString(", ")
	if v := lr.Remarks; v != nil {
		builder.WriteString("remarks=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := lr.ReservationConfirmAt; v != nil {
		builder.WriteString("reservation_confirm_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// LessonReservations is a parsable slice of LessonReservation.
type LessonReservations []*LessonReservation
