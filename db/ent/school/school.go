// Code generated by ent, DO NOT EDIT.

package school

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the school type in the database.
	Label = "school"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSchoolType holds the string denoting the school_type field in the database.
	FieldSchoolType = "school_type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldPrefecture holds the string denoting the prefecture field in the database.
	FieldPrefecture = "prefecture"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldPostCode holds the string denoting the post_code field in the database.
	FieldPostCode = "post_code"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTeachers holds the string denoting the teachers edge name in mutations.
	EdgeTeachers = "teachers"
	// Table holds the table name of the school in the database.
	Table = "schools"
	// TeachersTable is the table that holds the teachers relation/edge.
	TeachersTable = "users"
	// TeachersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TeachersInverseTable = "users"
	// TeachersColumn is the table column denoting the teachers relation/edge.
	TeachersColumn = "school_id"
)

// Columns holds all SQL columns for school fields.
var Columns = []string{
	FieldID,
	FieldSchoolType,
	FieldName,
	FieldEmail,
	FieldPhoneNumber,
	FieldPrefecture,
	FieldCity,
	FieldStreet,
	FieldPostCode,
	FieldURL,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
	// PrefectureValidator is a validator for the "prefecture" field. It is called by the builders before save.
	PrefectureValidator func(int) error
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// PostCodeValidator is a validator for the "post_code" field. It is called by the builders before save.
	PostCodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// SchoolType defines the type for the "school_type" enum field.
type SchoolType string

// SchoolType values.
const (
	SchoolTypeElementary SchoolType = "elementary"
	SchoolTypeJuniorHigh SchoolType = "juniorHigh"
	SchoolTypeHighSchool SchoolType = "highSchool"
)

func (st SchoolType) String() string {
	return string(st)
}

// SchoolTypeValidator is a validator for the "school_type" field enum values. It is called by the builders before save.
func SchoolTypeValidator(st SchoolType) error {
	switch st {
	case SchoolTypeElementary, SchoolTypeJuniorHigh, SchoolTypeHighSchool:
		return nil
	default:
		return fmt.Errorf("school: invalid enum value for school_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the School queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySchoolType orders the results by the school_type field.
func BySchoolType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchoolType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByPrefecture orders the results by the prefecture field.
func ByPrefecture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrefecture, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByStreet orders the results by the street field.
func ByStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreet, opts...).ToFunc()
}

// ByPostCode orders the results by the post_code field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTeachersCount orders the results by teachers count.
func ByTeachersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeachersStep(), opts...)
	}
}

// ByTeachers orders the results by teachers terms.
func ByTeachers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeachersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeachersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeachersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TeachersTable, TeachersColumn),
	)
}
