// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldSchoolID holds the string denoting the school_id field in the database.
	FieldSchoolID = "school_id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldFamilyName holds the string denoting the family_name field in the database.
	FieldFamilyName = "family_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeInquiries holds the string denoting the inquiries edge name in mutations.
	EdgeInquiries = "inquiries"
	// EdgeLessonReservations holds the string denoting the lesson_reservations edge name in mutations.
	EdgeLessonReservations = "lesson_reservations"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "users"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_id"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "users"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_id"
	// InquiriesTable is the table that holds the inquiries relation/edge.
	InquiriesTable = "inquiries"
	// InquiriesInverseTable is the table name for the Inquiry entity.
	// It exists in this package in order to avoid circular dependency with the "inquiry" package.
	InquiriesInverseTable = "inquiries"
	// InquiriesColumn is the table column denoting the inquiries relation/edge.
	InquiriesColumn = "user_id"
	// LessonReservationsTable is the table that holds the lesson_reservations relation/edge.
	LessonReservationsTable = "lesson_reservations"
	// LessonReservationsInverseTable is the table name for the LessonReservation entity.
	// It exists in this package in order to avoid circular dependency with the "lessonreservation" package.
	LessonReservationsInverseTable = "lesson_reservations"
	// LessonReservationsColumn is the table column denoting the lesson_reservations relation/edge.
	LessonReservationsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserType,
	FieldSchoolID,
	FieldCompanyID,
	FieldFirstName,
	FieldFamilyName,
	FieldEmail,
	FieldPhoneNumber,
	FieldPassword,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SchoolIDValidator is a validator for the "school_id" field. It is called by the builders before save.
	SchoolIDValidator func(int64) error
	// CompanyIDValidator is a validator for the "company_id" field. It is called by the builders before save.
	CompanyIDValidator func(int64) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// FamilyNameValidator is a validator for the "family_name" field. It is called by the builders before save.
	FamilyNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// UserType defines the type for the "user_type" enum field.
type UserType string

// UserTypeTeacher is the default value of the UserType enum.
const DefaultUserType = UserTypeTeacher

// UserType values.
const (
	UserTypeTeacher       UserType = "teacher"
	UserTypeCompanyMember UserType = "company_member"
	UserTypeAdmin         UserType = "admin"
)

func (ut UserType) String() string {
	return string(ut)
}

// UserTypeValidator is a validator for the "user_type" field enum values. It is called by the builders before save.
func UserTypeValidator(ut UserType) error {
	switch ut {
	case UserTypeTeacher, UserTypeCompanyMember, UserTypeAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_type field: %q", ut)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserType orders the results by the user_type field.
func ByUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserType, opts...).ToFunc()
}

// BySchoolID orders the results by the school_id field.
func BySchoolID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchoolID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByFamilyName orders the results by the family_name field.
func ByFamilyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFamilyName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// BySchoolField orders the results by school field.
func BySchoolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchoolStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByInquiriesCount orders the results by inquiries count.
func ByInquiriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInquiriesStep(), opts...)
	}
}

// ByInquiries orders the results by inquiries terms.
func ByInquiries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInquiriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLessonReservationsCount orders the results by lesson_reservations count.
func ByLessonReservationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonReservationsStep(), opts...)
	}
}

// ByLessonReservations orders the results by lesson_reservations terms.
func ByLessonReservations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonReservationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSchoolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchoolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SchoolTable, SchoolColumn),
	)
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newInquiriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InquiriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InquiriesTable, InquiriesColumn),
	)
}
func newLessonReservationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonReservationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LessonReservationsTable, LessonReservationsColumn),
	)
}
