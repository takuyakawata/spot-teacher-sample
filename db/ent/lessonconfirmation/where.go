// Code generated by ent, DO NOT EDIT.

package lessonconfirmation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldUpdatedAt, v))
}

// LessonReservationID applies equality check predicate on the "lesson_reservation_id" field. It's identical to LessonReservationIDEQ.
func LessonReservationID(v int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldLessonReservationID, v))
}

// MatchingDate applies equality check predicate on the "matching_date" field. It's identical to MatchingDateEQ.
func MatchingDate(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldMatchingDate, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldStartTime, v))
}

// FinishTime applies equality check predicate on the "finish_time" field. It's identical to FinishTimeEQ.
func FinishTime(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldFinishTime, v))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldRemarks, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLTE(FieldUpdatedAt, v))
}

// LessonReservationIDEQ applies the EQ predicate on the "lesson_reservation_id" field.
func LessonReservationIDEQ(v int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldLessonReservationID, v))
}

// LessonReservationIDNEQ applies the NEQ predicate on the "lesson_reservation_id" field.
func LessonReservationIDNEQ(v int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldLessonReservationID, v))
}

// LessonReservationIDIn applies the In predicate on the "lesson_reservation_id" field.
func LessonReservationIDIn(vs ...int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldLessonReservationID, vs...))
}

// LessonReservationIDNotIn applies the NotIn predicate on the "lesson_reservation_id" field.
func LessonReservationIDNotIn(vs ...int64) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldLessonReservationID, vs...))
}

// MatchingDateEQ applies the EQ predicate on the "matching_date" field.
func MatchingDateEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldMatchingDate, v))
}

// MatchingDateNEQ applies the NEQ predicate on the "matching_date" field.
func MatchingDateNEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldMatchingDate, v))
}

// MatchingDateIn applies the In predicate on the "matching_date" field.
func MatchingDateIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldMatchingDate, vs...))
}

// MatchingDateNotIn applies the NotIn predicate on the "matching_date" field.
func MatchingDateNotIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldMatchingDate, vs...))
}

// MatchingDateGT applies the GT predicate on the "matching_date" field.
func MatchingDateGT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGT(FieldMatchingDate, v))
}

// MatchingDateGTE applies the GTE predicate on the "matching_date" field.
func MatchingDateGTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGTE(FieldMatchingDate, v))
}

// MatchingDateLT applies the LT predicate on the "matching_date" field.
func MatchingDateLT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLT(FieldMatchingDate, v))
}

// MatchingDateLTE applies the LTE predicate on the "matching_date" field.
func MatchingDateLTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLTE(FieldMatchingDate, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLTE(FieldStartTime, v))
}

// FinishTimeEQ applies the EQ predicate on the "finish_time" field.
func FinishTimeEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldFinishTime, v))
}

// FinishTimeNEQ applies the NEQ predicate on the "finish_time" field.
func FinishTimeNEQ(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldFinishTime, v))
}

// FinishTimeIn applies the In predicate on the "finish_time" field.
func FinishTimeIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldFinishTime, vs...))
}

// FinishTimeNotIn applies the NotIn predicate on the "finish_time" field.
func FinishTimeNotIn(vs ...time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldFinishTime, vs...))
}

// FinishTimeGT applies the GT predicate on the "finish_time" field.
func FinishTimeGT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGT(FieldFinishTime, v))
}

// FinishTimeGTE applies the GTE predicate on the "finish_time" field.
func FinishTimeGTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGTE(FieldFinishTime, v))
}

// FinishTimeLT applies the LT predicate on the "finish_time" field.
func FinishTimeLT(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLT(FieldFinishTime, v))
}

// FinishTimeLTE applies the LTE predicate on the "finish_time" field.
func FinishTimeLTE(v time.Time) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLTE(FieldFinishTime, v))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.FieldContainsFold(FieldRemarks, v))
}

// HasLessonReservation applies the HasEdge predicate on the "lesson_reservation" edge.
func HasLessonReservation() predicate.LessonConfirmation {
	return predicate.LessonConfirmation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LessonReservationTable, LessonReservationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonReservationWith applies the HasEdge predicate on the "lesson_reservation" edge with a given conditions (other predicates).
func HasLessonReservationWith(preds ...predicate.LessonReservation) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(func(s *sql.Selector) {
		step := newLessonReservationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LessonConfirmation) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LessonConfirmation) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LessonConfirmation) predicate.LessonConfirmation {
	return predicate.LessonConfirmation(sql.NotPredicates(p))
}
