// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/educationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplan"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonplaneducationcategory"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonPlanEducationCategoryQuery is the builder for querying LessonPlanEducationCategory entities.
type LessonPlanEducationCategoryQuery struct {
	config
	ctx                   *QueryContext
	order                 []lessonplaneducationcategory.OrderOption
	inters                []Interceptor
	predicates            []predicate.LessonPlanEducationCategory
	withLessonPlan        *LessonPlanQuery
	withEducationCategory *EducationCategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LessonPlanEducationCategoryQuery builder.
func (lpecq *LessonPlanEducationCategoryQuery) Where(ps ...predicate.LessonPlanEducationCategory) *LessonPlanEducationCategoryQuery {
	lpecq.predicates = append(lpecq.predicates, ps...)
	return lpecq
}

// Limit the number of records to be returned by this query.
func (lpecq *LessonPlanEducationCategoryQuery) Limit(limit int) *LessonPlanEducationCategoryQuery {
	lpecq.ctx.Limit = &limit
	return lpecq
}

// Offset to start from.
func (lpecq *LessonPlanEducationCategoryQuery) Offset(offset int) *LessonPlanEducationCategoryQuery {
	lpecq.ctx.Offset = &offset
	return lpecq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lpecq *LessonPlanEducationCategoryQuery) Unique(unique bool) *LessonPlanEducationCategoryQuery {
	lpecq.ctx.Unique = &unique
	return lpecq
}

// Order specifies how the records should be ordered.
func (lpecq *LessonPlanEducationCategoryQuery) Order(o ...lessonplaneducationcategory.OrderOption) *LessonPlanEducationCategoryQuery {
	lpecq.order = append(lpecq.order, o...)
	return lpecq
}

// QueryLessonPlan chains the current query on the "lesson_plan" edge.
func (lpecq *LessonPlanEducationCategoryQuery) QueryLessonPlan() *LessonPlanQuery {
	query := (&LessonPlanClient{config: lpecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplaneducationcategory.Table, lessonplaneducationcategory.FieldID, selector),
			sqlgraph.To(lessonplan.Table, lessonplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lessonplaneducationcategory.LessonPlanTable, lessonplaneducationcategory.LessonPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEducationCategory chains the current query on the "education_category" edge.
func (lpecq *LessonPlanEducationCategoryQuery) QueryEducationCategory() *EducationCategoryQuery {
	query := (&EducationCategoryClient{config: lpecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lessonplaneducationcategory.Table, lessonplaneducationcategory.FieldID, selector),
			sqlgraph.To(educationcategory.Table, educationcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lessonplaneducationcategory.EducationCategoryTable, lessonplaneducationcategory.EducationCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LessonPlanEducationCategory entity from the query.
// Returns a *NotFoundError when no LessonPlanEducationCategory was found.
func (lpecq *LessonPlanEducationCategoryQuery) First(ctx context.Context) (*LessonPlanEducationCategory, error) {
	nodes, err := lpecq.Limit(1).All(setContextOp(ctx, lpecq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lessonplaneducationcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) FirstX(ctx context.Context) *LessonPlanEducationCategory {
	node, err := lpecq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LessonPlanEducationCategory ID from the query.
// Returns a *NotFoundError when no LessonPlanEducationCategory ID was found.
func (lpecq *LessonPlanEducationCategoryQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpecq.Limit(1).IDs(setContextOp(ctx, lpecq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lessonplaneducationcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) FirstIDX(ctx context.Context) int64 {
	id, err := lpecq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LessonPlanEducationCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LessonPlanEducationCategory entity is found.
// Returns a *NotFoundError when no LessonPlanEducationCategory entities are found.
func (lpecq *LessonPlanEducationCategoryQuery) Only(ctx context.Context) (*LessonPlanEducationCategory, error) {
	nodes, err := lpecq.Limit(2).All(setContextOp(ctx, lpecq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lessonplaneducationcategory.Label}
	default:
		return nil, &NotSingularError{lessonplaneducationcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) OnlyX(ctx context.Context) *LessonPlanEducationCategory {
	node, err := lpecq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LessonPlanEducationCategory ID in the query.
// Returns a *NotSingularError when more than one LessonPlanEducationCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (lpecq *LessonPlanEducationCategoryQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpecq.Limit(2).IDs(setContextOp(ctx, lpecq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lessonplaneducationcategory.Label}
	default:
		err = &NotSingularError{lessonplaneducationcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := lpecq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LessonPlanEducationCategories.
func (lpecq *LessonPlanEducationCategoryQuery) All(ctx context.Context) ([]*LessonPlanEducationCategory, error) {
	ctx = setContextOp(ctx, lpecq.ctx, ent.OpQueryAll)
	if err := lpecq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LessonPlanEducationCategory, *LessonPlanEducationCategoryQuery]()
	return withInterceptors[[]*LessonPlanEducationCategory](ctx, lpecq, qr, lpecq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) AllX(ctx context.Context) []*LessonPlanEducationCategory {
	nodes, err := lpecq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LessonPlanEducationCategory IDs.
func (lpecq *LessonPlanEducationCategoryQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if lpecq.ctx.Unique == nil && lpecq.path != nil {
		lpecq.Unique(true)
	}
	ctx = setContextOp(ctx, lpecq.ctx, ent.OpQueryIDs)
	if err = lpecq.Select(lessonplaneducationcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) IDsX(ctx context.Context) []int64 {
	ids, err := lpecq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lpecq *LessonPlanEducationCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lpecq.ctx, ent.OpQueryCount)
	if err := lpecq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lpecq, querierCount[*LessonPlanEducationCategoryQuery](), lpecq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) CountX(ctx context.Context) int {
	count, err := lpecq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lpecq *LessonPlanEducationCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lpecq.ctx, ent.OpQueryExist)
	switch _, err := lpecq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lpecq *LessonPlanEducationCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := lpecq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LessonPlanEducationCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lpecq *LessonPlanEducationCategoryQuery) Clone() *LessonPlanEducationCategoryQuery {
	if lpecq == nil {
		return nil
	}
	return &LessonPlanEducationCategoryQuery{
		config:                lpecq.config,
		ctx:                   lpecq.ctx.Clone(),
		order:                 append([]lessonplaneducationcategory.OrderOption{}, lpecq.order...),
		inters:                append([]Interceptor{}, lpecq.inters...),
		predicates:            append([]predicate.LessonPlanEducationCategory{}, lpecq.predicates...),
		withLessonPlan:        lpecq.withLessonPlan.Clone(),
		withEducationCategory: lpecq.withEducationCategory.Clone(),
		// clone intermediate query.
		sql:  lpecq.sql.Clone(),
		path: lpecq.path,
	}
}

// WithLessonPlan tells the query-builder to eager-load the nodes that are connected to
// the "lesson_plan" edge. The optional arguments are used to configure the query builder of the edge.
func (lpecq *LessonPlanEducationCategoryQuery) WithLessonPlan(opts ...func(*LessonPlanQuery)) *LessonPlanEducationCategoryQuery {
	query := (&LessonPlanClient{config: lpecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpecq.withLessonPlan = query
	return lpecq
}

// WithEducationCategory tells the query-builder to eager-load the nodes that are connected to
// the "education_category" edge. The optional arguments are used to configure the query builder of the edge.
func (lpecq *LessonPlanEducationCategoryQuery) WithEducationCategory(opts ...func(*EducationCategoryQuery)) *LessonPlanEducationCategoryQuery {
	query := (&EducationCategoryClient{config: lpecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpecq.withEducationCategory = query
	return lpecq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LessonPlanEducationCategory.Query().
//		GroupBy(lessonplaneducationcategory.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lpecq *LessonPlanEducationCategoryQuery) GroupBy(field string, fields ...string) *LessonPlanEducationCategoryGroupBy {
	lpecq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LessonPlanEducationCategoryGroupBy{build: lpecq}
	grbuild.flds = &lpecq.ctx.Fields
	grbuild.label = lessonplaneducationcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LessonPlanEducationCategory.Query().
//		Select(lessonplaneducationcategory.FieldCreatedAt).
//		Scan(ctx, &v)
func (lpecq *LessonPlanEducationCategoryQuery) Select(fields ...string) *LessonPlanEducationCategorySelect {
	lpecq.ctx.Fields = append(lpecq.ctx.Fields, fields...)
	sbuild := &LessonPlanEducationCategorySelect{LessonPlanEducationCategoryQuery: lpecq}
	sbuild.label = lessonplaneducationcategory.Label
	sbuild.flds, sbuild.scan = &lpecq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LessonPlanEducationCategorySelect configured with the given aggregations.
func (lpecq *LessonPlanEducationCategoryQuery) Aggregate(fns ...AggregateFunc) *LessonPlanEducationCategorySelect {
	return lpecq.Select().Aggregate(fns...)
}

func (lpecq *LessonPlanEducationCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lpecq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lpecq); err != nil {
				return err
			}
		}
	}
	for _, f := range lpecq.ctx.Fields {
		if !lessonplaneducationcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lpecq.path != nil {
		prev, err := lpecq.path(ctx)
		if err != nil {
			return err
		}
		lpecq.sql = prev
	}
	return nil
}

func (lpecq *LessonPlanEducationCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LessonPlanEducationCategory, error) {
	var (
		nodes       = []*LessonPlanEducationCategory{}
		_spec       = lpecq.querySpec()
		loadedTypes = [2]bool{
			lpecq.withLessonPlan != nil,
			lpecq.withEducationCategory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LessonPlanEducationCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LessonPlanEducationCategory{config: lpecq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lpecq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lpecq.withLessonPlan; query != nil {
		if err := lpecq.loadLessonPlan(ctx, query, nodes, nil,
			func(n *LessonPlanEducationCategory, e *LessonPlan) { n.Edges.LessonPlan = e }); err != nil {
			return nil, err
		}
	}
	if query := lpecq.withEducationCategory; query != nil {
		if err := lpecq.loadEducationCategory(ctx, query, nodes, nil,
			func(n *LessonPlanEducationCategory, e *EducationCategory) { n.Edges.EducationCategory = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lpecq *LessonPlanEducationCategoryQuery) loadLessonPlan(ctx context.Context, query *LessonPlanQuery, nodes []*LessonPlanEducationCategory, init func(*LessonPlanEducationCategory), assign func(*LessonPlanEducationCategory, *LessonPlan)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonPlanEducationCategory)
	for i := range nodes {
		fk := nodes[i].LessonPlanID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lessonplan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lesson_plan_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpecq *LessonPlanEducationCategoryQuery) loadEducationCategory(ctx context.Context, query *EducationCategoryQuery, nodes []*LessonPlanEducationCategory, init func(*LessonPlanEducationCategory), assign func(*LessonPlanEducationCategory, *EducationCategory)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LessonPlanEducationCategory)
	for i := range nodes {
		fk := nodes[i].EducationCategoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(educationcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "education_category_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lpecq *LessonPlanEducationCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lpecq.querySpec()
	_spec.Node.Columns = lpecq.ctx.Fields
	if len(lpecq.ctx.Fields) > 0 {
		_spec.Unique = lpecq.ctx.Unique != nil && *lpecq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lpecq.driver, _spec)
}

func (lpecq *LessonPlanEducationCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lessonplaneducationcategory.Table, lessonplaneducationcategory.Columns, sqlgraph.NewFieldSpec(lessonplaneducationcategory.FieldID, field.TypeInt64))
	_spec.From = lpecq.sql
	if unique := lpecq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lpecq.path != nil {
		_spec.Unique = true
	}
	if fields := lpecq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lessonplaneducationcategory.FieldID)
		for i := range fields {
			if fields[i] != lessonplaneducationcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lpecq.withLessonPlan != nil {
			_spec.Node.AddColumnOnce(lessonplaneducationcategory.FieldLessonPlanID)
		}
		if lpecq.withEducationCategory != nil {
			_spec.Node.AddColumnOnce(lessonplaneducationcategory.FieldEducationCategoryID)
		}
	}
	if ps := lpecq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lpecq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lpecq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lpecq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lpecq *LessonPlanEducationCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lpecq.driver.Dialect())
	t1 := builder.Table(lessonplaneducationcategory.Table)
	columns := lpecq.ctx.Fields
	if len(columns) == 0 {
		columns = lessonplaneducationcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lpecq.sql != nil {
		selector = lpecq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lpecq.ctx.Unique != nil && *lpecq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lpecq.predicates {
		p(selector)
	}
	for _, p := range lpecq.order {
		p(selector)
	}
	if offset := lpecq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lpecq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LessonPlanEducationCategoryGroupBy is the group-by builder for LessonPlanEducationCategory entities.
type LessonPlanEducationCategoryGroupBy struct {
	selector
	build *LessonPlanEducationCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lpecgb *LessonPlanEducationCategoryGroupBy) Aggregate(fns ...AggregateFunc) *LessonPlanEducationCategoryGroupBy {
	lpecgb.fns = append(lpecgb.fns, fns...)
	return lpecgb
}

// Scan applies the selector query and scans the result into the given value.
func (lpecgb *LessonPlanEducationCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpecgb.build.ctx, ent.OpQueryGroupBy)
	if err := lpecgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonPlanEducationCategoryQuery, *LessonPlanEducationCategoryGroupBy](ctx, lpecgb.build, lpecgb, lpecgb.build.inters, v)
}

func (lpecgb *LessonPlanEducationCategoryGroupBy) sqlScan(ctx context.Context, root *LessonPlanEducationCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lpecgb.fns))
	for _, fn := range lpecgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lpecgb.flds)+len(lpecgb.fns))
		for _, f := range *lpecgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lpecgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpecgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LessonPlanEducationCategorySelect is the builder for selecting fields of LessonPlanEducationCategory entities.
type LessonPlanEducationCategorySelect struct {
	*LessonPlanEducationCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lpecs *LessonPlanEducationCategorySelect) Aggregate(fns ...AggregateFunc) *LessonPlanEducationCategorySelect {
	lpecs.fns = append(lpecs.fns, fns...)
	return lpecs
}

// Scan applies the selector query and scans the result into the given value.
func (lpecs *LessonPlanEducationCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpecs.ctx, ent.OpQuerySelect)
	if err := lpecs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LessonPlanEducationCategoryQuery, *LessonPlanEducationCategorySelect](ctx, lpecs.LessonPlanEducationCategoryQuery, lpecs, lpecs.inters, v)
}

func (lpecs *LessonPlanEducationCategorySelect) sqlScan(ctx context.Context, root *LessonPlanEducationCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lpecs.fns))
	for _, fn := range lpecs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lpecs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpecs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
