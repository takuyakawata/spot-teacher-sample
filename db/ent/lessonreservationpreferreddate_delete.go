// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/lessonreservationpreferreddate"
	"github.com/takuyakawta/spot-teacher-sample/db/ent/predicate"
)

// LessonReservationPreferredDateDelete is the builder for deleting a LessonReservationPreferredDate entity.
type LessonReservationPreferredDateDelete struct {
	config
	hooks    []Hook
	mutation *LessonReservationPreferredDateMutation
}

// Where appends a list predicates to the LessonReservationPreferredDateDelete builder.
func (lrpdd *LessonReservationPreferredDateDelete) Where(ps ...predicate.LessonReservationPreferredDate) *LessonReservationPreferredDateDelete {
	lrpdd.mutation.Where(ps...)
	return lrpdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lrpdd *LessonReservationPreferredDateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lrpdd.sqlExec, lrpdd.mutation, lrpdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lrpdd *LessonReservationPreferredDateDelete) ExecX(ctx context.Context) int {
	n, err := lrpdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lrpdd *LessonReservationPreferredDateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lessonreservationpreferreddate.Table, sqlgraph.NewFieldSpec(lessonreservationpreferreddate.FieldID, field.TypeInt))
	if ps := lrpdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lrpdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lrpdd.mutation.done = true
	return affected, err
}

// LessonReservationPreferredDateDeleteOne is the builder for deleting a single LessonReservationPreferredDate entity.
type LessonReservationPreferredDateDeleteOne struct {
	lrpdd *LessonReservationPreferredDateDelete
}

// Where appends a list predicates to the LessonReservationPreferredDateDelete builder.
func (lrpddo *LessonReservationPreferredDateDeleteOne) Where(ps ...predicate.LessonReservationPreferredDate) *LessonReservationPreferredDateDeleteOne {
	lrpddo.lrpdd.mutation.Where(ps...)
	return lrpddo
}

// Exec executes the deletion query.
func (lrpddo *LessonReservationPreferredDateDeleteOne) Exec(ctx context.Context) error {
	n, err := lrpddo.lrpdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lessonreservationpreferreddate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lrpddo *LessonReservationPreferredDateDeleteOne) ExecX(ctx context.Context) {
	if err := lrpddo.Exec(ctx); err != nil {
		panic(err)
	}
}
