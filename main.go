package main

import (
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"net/http"
)

// main 関数は Go プログラムの開始地点です。
func main() {
	// --- 1. Echo インスタンスの作成 ---
	// まず、Echo フレームワークの本体となるインスタンスを作成します。
	// 慣習的に 'e' という変数名がよく使われます。
	e := echo.New()

	// --- 2. ミドルウェアの設定 (推奨) ---
	// これらは必須ではありませんが、開発や運用に非常に役立ちます。

	// Logger ミドルウェア:
	// サーバーへのすべてのリクエストに関する情報（メソッド、パス、ステータスコード、処理時間など）を
	// ターミナル (標準出力) にログとして記録します。デバッグに便利です。
	e.Use(middleware.Logger())

	// Recover ミドルウェア:
	// リクエスト処理中に予期せぬエラー（パニック）が発生した場合に、
	// サーバー全体を停止させる代わりに、自動的に回復処理を行い、
	// クライアントには HTTP 500 Internal Server Error を返します。サーバーの安定性が向上します。
	e.Use(middleware.Recover())

	// --- 3. ルートの定義 ---
	// ここで、特定のURLパスとHTTPメソッドに対する処理を結びつけます。

	// e.GET("/", ...) は、
	// HTTP の GET メソッドで、ルートパス ("/") にアクセスがあった場合に、
	// 後ろに続く関数 (ハンドラー関数) を実行するように Echo に指示します。
	e.GET("/", func(c echo.Context) error {
		// この関数が、実際のリクエストを処理するハンドラーです。
		// 引数の 'c' (echo.Context) は、リクエスト情報へのアクセスや、
		// レスポンスをクライアントに送信するためのメソッドを提供します。

		// c.String(ステータスコード, 返す文字列) を使ってレスポンスを返します。
		// http.StatusOK は、HTTPステータスコード 200 (成功) を表す定数です。
		message := "Hello, World!" // 返すメッセージを変数に入れてみました
		return c.String(http.StatusOK, message)
	})

	// --- 4. サーバーの起動 ---
	// 作成した Echo インスタンスに、指定したポート番号で HTTP リクエストの待機を開始させます。
	// ":1323" はポート番号 1323 でリクエストを待つことを意味します。
	// ポート番号は、他のプログラムが使用していなければ基本的に自由ですが、1024未満は特別な権限が必要な場合があります。
	// 1323 は Echo のドキュメントでよく使われる例です。
	port := ":1323"
	e.Logger.Infof("Starting server on port %s", port) // 起動ポートをログに出力 (オプション)

	// e.Start(ポート番号) でサーバーが起動します。
	// この関数は処理をブロックし、サーバーが動き続ける間は戻ってきません。
	// もしサーバーの起動に失敗した場合（例：ポートが既に使用中など）、エラーが返されます。
	// e.Logger.Fatal() は、エラーが発生した場合にログを出力し、プログラムを終了させます。
	err := e.Start(port)
	if err != nil {
		e.Logger.Fatal(err)
	}
}
